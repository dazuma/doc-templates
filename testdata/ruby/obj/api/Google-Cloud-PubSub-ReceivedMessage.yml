### YamlMime:UniversalReference
items:
- uid: Google::Cloud::PubSub::ReceivedMessage
  children: 
  - Google::Cloud::PubSub::ReceivedMessage#ack!(instance)
  - Google::Cloud::PubSub::ReceivedMessage#ack_id(instance)
  - Google::Cloud::PubSub::ReceivedMessage#acknowledge!(instance)
  - Google::Cloud::PubSub::ReceivedMessage#attributes(instance)
  - Google::Cloud::PubSub::ReceivedMessage#data(instance)
  - Google::Cloud::PubSub::ReceivedMessage#delivery_attempt(instance)
  - Google::Cloud::PubSub::ReceivedMessage#ensure_subscription!(instance)
  - Google::Cloud::PubSub::ReceivedMessage#ignore!(instance)
  - Google::Cloud::PubSub::ReceivedMessage#message(instance)
  - Google::Cloud::PubSub::ReceivedMessage#message_id(instance)
  - Google::Cloud::PubSub::ReceivedMessage#modify_ack_deadline!(instance)
  - Google::Cloud::PubSub::ReceivedMessage#msg(instance)
  - Google::Cloud::PubSub::ReceivedMessage#msg_id(instance)
  - Google::Cloud::PubSub::ReceivedMessage#nack!(instance)
  - Google::Cloud::PubSub::ReceivedMessage#ordering_key(instance)
  - Google::Cloud::PubSub::ReceivedMessage#publish_time(instance)
  - Google::Cloud::PubSub::ReceivedMessage#published_at(instance)
  - Google::Cloud::PubSub::ReceivedMessage#reject!(instance)
  fullName: Google::Cloud::PubSub::ReceivedMessage
  langs:
  - ruby
  module: google-cloud-pubsub
  id: ReceivedMessage
  summary: "<h1>ReceivedMessage</h1>\n\n<p>Represents a Pub/Sub <a href=\"./Google-Cloud-PubSub-Message\">Message</a> that can be acknowledged or delayed.</p>"
  type: "class"
  name: Google::Cloud::PubSub::ReceivedMessage
  example:     
    - "<pre class=\"prettyprint lang-rb\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::PubSub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\nsubscriber = sub.listen do |received_message|\n  puts received_message.message.data\n  received_message.acknowledge!\nend\n\n# Start background threads that will call the block passed to listen.\nsubscriber.start\n\n# Shut down the subscriber when ready to stop receiving messages.\nsubscriber.stop!</pre>"
  inherits:
  - "Object"
- uid: Google::Cloud::PubSub::ReceivedMessage#ack!(instance)
  fullName: Google::Cloud::PubSub::ReceivedMessage#ack!
  name: "#ack!"
  langs:
    - ruby
  module: google-cloud-pubsub
  id: "#ack!"
  summary: "Acknowledges receipt of the message."
  type: method
  example:     
    - "<pre class=\"prettyprint lang-rb\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::PubSub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\nsubscriber = sub.listen do |received_message|\n  puts received_message.message.data\n\n  received_message.acknowledge!\nend\n\n# Start background threads that will call block passed to listen.\nsubscriber.start\n\n# Shut down the subscriber when ready to stop receiving messages.\nsubscriber.stop!</pre>"
  syntax:
    description: "Acknowledges receipt of the message."
    content: "def ack!"
    arguments: []
    yields: []
    yieldparams: []
    returnValues: []
    raises: []
- uid: Google::Cloud::PubSub::ReceivedMessage#ack_id(instance)
  fullName: Google::Cloud::PubSub::ReceivedMessage#ack_id
  name: "#ack_id"
  langs:
    - ruby
  module: google-cloud-pubsub
  id: "#ack_id"
  summary: "The acknowledgment ID for the message."
  type: method
  example: []
  syntax:
    description: "The acknowledgment ID for the message."
    content: "def ack_id"
    arguments: []
    yields: []
    yieldparams: []
    returnValues: []
    raises: []
- uid: Google::Cloud::PubSub::ReceivedMessage#acknowledge!(instance)
  fullName: Google::Cloud::PubSub::ReceivedMessage#acknowledge!
  name: "#acknowledge!"
  langs:
    - ruby
  module: google-cloud-pubsub
  id: "#acknowledge!"
  summary: "Acknowledges receipt of the message."
  type: method
  example:     
    - "<pre class=\"prettyprint lang-rb\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::PubSub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\nsubscriber = sub.listen do |received_message|\n  puts received_message.message.data\n\n  received_message.acknowledge!\nend\n\n# Start background threads that will call block passed to listen.\nsubscriber.start\n\n# Shut down the subscriber when ready to stop receiving messages.\nsubscriber.stop!</pre>"
  syntax:
    description: "Acknowledges receipt of the message."
    content: "def acknowledge!"
    arguments: []
    yields: []
    yieldparams: []
    returnValues: []
    raises: []
- uid: Google::Cloud::PubSub::ReceivedMessage#attributes(instance)
  fullName: Google::Cloud::PubSub::ReceivedMessage#attributes
  name: "#attributes"
  langs:
    - ruby
  module: google-cloud-pubsub
  id: "#attributes"
  summary: "Optional attributes for the received message."
  type: method
  example: []
  syntax:
    description: "Optional attributes for the received message."
    content: "def attributes"
    arguments: []
    yields: []
    yieldparams: []
    returnValues: []
    raises: []
- uid: Google::Cloud::PubSub::ReceivedMessage#data(instance)
  fullName: Google::Cloud::PubSub::ReceivedMessage#data
  name: "#data"
  langs:
    - ruby
  module: google-cloud-pubsub
  id: "#data"
  summary: "The received message payload. This data is a list of bytes encoded as\nASCII-8BIT."
  type: method
  example: []
  syntax:
    description: "The received message payload. This data is a list of bytes encoded as\nASCII-8BIT."
    content: "def data"
    arguments: []
    yields: []
    yieldparams: []
    returnValues: []
    raises: []
- uid: Google::Cloud::PubSub::ReceivedMessage#delivery_attempt(instance)
  fullName: Google::Cloud::PubSub::ReceivedMessage#delivery_attempt
  name: "#delivery_attempt"
  langs:
    - ruby
  module: google-cloud-pubsub
  id: "#delivery_attempt"
  summary: "Returns the delivery attempt counter for the message. If a dead letter policy is not set on the subscription,\nthis will be <code>nil</code>. See <a href=\"./Google-Cloud-PubSub-Topic#Google__Cloud__PubSub__Topic_subscribe_instance_\">Topic#subscribe</a>, Subscription#dead&lt;em&gt;letter&lt;/em&gt;topic= and\nSubscription#dead&lt;em&gt;letter&lt;/em&gt;max&lt;em&gt;delivery&lt;/em&gt;attempts=.</p>\n\n<p>The delivery attempt counter is <code>1 + (the sum of number of NACKs and number of ack_deadline exceeds)</code> for the\nmessage.</p>\n\n<p>A NACK is any call to <code>ModifyAckDeadline</code> with a <code>0</code> deadline. An <code>ack_deadline</code> exceeds event is whenever a\nmessage is not acknowledged within <code>ack_deadline</code>. Note that <code>ack_deadline</code> is initially\n<code>Subscription.ackDeadlineSeconds</code>, but may get extended automatically by the client library.</p>\n\n<p>The first delivery of a given message will have this value as <code>1</code>. The value is calculated at best effort and\nis approximate."
  type: method
  example:     
    - "<pre class=\"prettyprint lang-rb\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::PubSub.new\n\ntopic = pubsub.topic \"my-topic\"\ndead_letter_topic = pubsub.topic \"my-dead-letter-topic\", skip_lookup: true\nsub = topic.subscribe \"my-topic-sub\",\n                      dead_letter_topic: dead_letter_topic,\n                      dead_letter_max_delivery_attempts: 10\n\nsubscriber = sub.listen do |received_message|\n  puts received_message.message.delivery_attempt\nend</pre>"
  syntax:
    description: "Returns the delivery attempt counter for the message. If a dead letter policy is not set on the subscription,\nthis will be <code>nil</code>. See <a href=\"./Google-Cloud-PubSub-Topic#Google__Cloud__PubSub__Topic_subscribe_instance_\">Topic#subscribe</a>, Subscription#dead&lt;em&gt;letter&lt;/em&gt;topic= and\nSubscription#dead&lt;em&gt;letter&lt;/em&gt;max&lt;em&gt;delivery&lt;/em&gt;attempts=.</p>\n\n<p>The delivery attempt counter is <code>1 + (the sum of number of NACKs and number of ack_deadline exceeds)</code> for the\nmessage.</p>\n\n<p>A NACK is any call to <code>ModifyAckDeadline</code> with a <code>0</code> deadline. An <code>ack_deadline</code> exceeds event is whenever a\nmessage is not acknowledged within <code>ack_deadline</code>. Note that <code>ack_deadline</code> is initially\n<code>Subscription.ackDeadlineSeconds</code>, but may get extended automatically by the client library.</p>\n\n<p>The first delivery of a given message will have this value as <code>1</code>. The value is calculated at best effort and\nis approximate."
    content: "def delivery_attempt => Integer, nil"
    arguments: []
    yields: []
    yieldparams: []
    returnValues:
    - description: "(Integer, nil) â€” A delivery attempt value of <code>1</code> or greater, or <code>nil</code> if a dead letter policy is not set\non the subscription."
    raises: []
- uid: Google::Cloud::PubSub::ReceivedMessage#ensure_subscription!(instance)
  fullName: Google::Cloud::PubSub::ReceivedMessage#ensure_subscription!
  name: "#ensure_subscription!"
  langs:
    - ruby
  module: google-cloud-pubsub
  id: "#ensure_subscription!"
  summary: "Raise an error unless an active subscription is available."
  type: method
  example: []
  syntax:
    description: "Raise an error unless an active subscription is available."
    content: "def ensure_subscription!"
    arguments: []
    yields: []
    yieldparams: []
    returnValues: []
    raises: []
- uid: Google::Cloud::PubSub::ReceivedMessage#ignore!(instance)
  fullName: Google::Cloud::PubSub::ReceivedMessage#ignore!
  name: "#ignore!"
  langs:
    - ruby
  module: google-cloud-pubsub
  id: "#ignore!"
  summary: "Resets the acknowledge deadline for the message without acknowledging\nit.</p>\n\n<p>This will make the message available for redelivery."
  type: method
  example:     
    - "<pre class=\"prettyprint lang-rb\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::PubSub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\nsubscriber = sub.listen do |received_message|\n  puts received_message.message.data\n\n  # Release message back to the API.\n  received_message.reject!\nend\n\n# Start background threads that will call block passed to listen.\nsubscriber.start\n\n# Shut down the subscriber when ready to stop receiving messages.\nsubscriber.stop!</pre>"
  syntax:
    description: "Resets the acknowledge deadline for the message without acknowledging\nit.</p>\n\n<p>This will make the message available for redelivery."
    content: "def ignore!"
    arguments: []
    yields: []
    yieldparams: []
    returnValues: []
    raises: []
- uid: Google::Cloud::PubSub::ReceivedMessage#message(instance)
  fullName: Google::Cloud::PubSub::ReceivedMessage#message
  name: "#message"
  langs:
    - ruby
  module: google-cloud-pubsub
  id: "#message"
  summary: "The received message."
  type: method
  example: []
  syntax:
    description: "The received message."
    content: "def message"
    arguments: []
    yields: []
    yieldparams: []
    returnValues: []
    raises: []
- uid: Google::Cloud::PubSub::ReceivedMessage#message_id(instance)
  fullName: Google::Cloud::PubSub::ReceivedMessage#message_id
  name: "#message_id"
  langs:
    - ruby
  module: google-cloud-pubsub
  id: "#message_id"
  summary: "The ID of the received message, assigned by the server at publication\ntime. Guaranteed to be unique within the topic."
  type: method
  example: []
  syntax:
    description: "The ID of the received message, assigned by the server at publication\ntime. Guaranteed to be unique within the topic."
    content: "def message_id"
    arguments: []
    yields: []
    yieldparams: []
    returnValues: []
    raises: []
- uid: Google::Cloud::PubSub::ReceivedMessage#modify_ack_deadline!(instance)
  fullName: Google::Cloud::PubSub::ReceivedMessage#modify_ack_deadline!
  name: "#modify_ack_deadline!"
  langs:
    - ruby
  module: google-cloud-pubsub
  id: "#modify_ack_deadline!"
  summary: "Modifies the acknowledge deadline for the message.</p>\n\n<p>This indicates that more time is needed to process the message, or to\nmake the message available for redelivery."
  type: method
  example:     
    - "<pre class=\"prettyprint lang-rb\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::PubSub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\nsubscriber = sub.listen do |received_message|\n  puts received_message.message.data\n\n  # Delay for 2 minutes\n  received_message.modify_ack_deadline! 120\nend\n\n# Start background threads that will call block passed to listen.\nsubscriber.start\n\n# Shut down the subscriber when ready to stop receiving messages.\nsubscriber.stop!</pre>"
  syntax:
    description: "Modifies the acknowledge deadline for the message.</p>\n\n<p>This indicates that more time is needed to process the message, or to\nmake the message available for redelivery."
    content: "def modify_ack_deadline!(new_deadline)"
    arguments:
    - description: "<strong>new_deadline</strong> (Integer) â€” The new ack deadline in seconds from the\ntime this request is sent to the Pub/Sub system. Must be &gt;= 0. For\nexample, if the value is <code>10</code>, the new ack deadline will expire 10\nseconds after the call is made. Specifying <code>0</code> may immediately make\nthe message available for another pull request."
    yields: []
    yieldparams: []
    returnValues: []
    raises: []
- uid: Google::Cloud::PubSub::ReceivedMessage#msg(instance)
  fullName: Google::Cloud::PubSub::ReceivedMessage#msg
  name: "#msg"
  langs:
    - ruby
  module: google-cloud-pubsub
  id: "#msg"
  summary: "The received message."
  type: method
  example: []
  syntax:
    description: "The received message."
    content: "def msg"
    arguments: []
    yields: []
    yieldparams: []
    returnValues: []
    raises: []
- uid: Google::Cloud::PubSub::ReceivedMessage#msg_id(instance)
  fullName: Google::Cloud::PubSub::ReceivedMessage#msg_id
  name: "#msg_id"
  langs:
    - ruby
  module: google-cloud-pubsub
  id: "#msg_id"
  summary: "The ID of the received message, assigned by the server at publication\ntime. Guaranteed to be unique within the topic."
  type: method
  example: []
  syntax:
    description: "The ID of the received message, assigned by the server at publication\ntime. Guaranteed to be unique within the topic."
    content: "def msg_id"
    arguments: []
    yields: []
    yieldparams: []
    returnValues: []
    raises: []
- uid: Google::Cloud::PubSub::ReceivedMessage#nack!(instance)
  fullName: Google::Cloud::PubSub::ReceivedMessage#nack!
  name: "#nack!"
  langs:
    - ruby
  module: google-cloud-pubsub
  id: "#nack!"
  summary: "Resets the acknowledge deadline for the message without acknowledging\nit.</p>\n\n<p>This will make the message available for redelivery."
  type: method
  example:     
    - "<pre class=\"prettyprint lang-rb\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::PubSub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\nsubscriber = sub.listen do |received_message|\n  puts received_message.message.data\n\n  # Release message back to the API.\n  received_message.reject!\nend\n\n# Start background threads that will call block passed to listen.\nsubscriber.start\n\n# Shut down the subscriber when ready to stop receiving messages.\nsubscriber.stop!</pre>"
  syntax:
    description: "Resets the acknowledge deadline for the message without acknowledging\nit.</p>\n\n<p>This will make the message available for redelivery."
    content: "def nack!"
    arguments: []
    yields: []
    yieldparams: []
    returnValues: []
    raises: []
- uid: Google::Cloud::PubSub::ReceivedMessage#ordering_key(instance)
  fullName: Google::Cloud::PubSub::ReceivedMessage#ordering_key
  name: "#ordering_key"
  langs:
    - ruby
  module: google-cloud-pubsub
  id: "#ordering_key"
  summary: "Identifies related messages for which publish order should be\nrespected.</p>\n\n<p>Google Cloud Pub/Sub ordering keys provide the ability to ensure\nrelated messages are sent to subscribers in the order in which they\nwere published. Messages can be tagged with an ordering key, a string\nthat identifies related messages for which publish order should be\nrespected. The service guarantees that, for a given ordering key and\npublisher, messages are sent to subscribers in the order in which they\nwere published. Ordering does not require sacrificing high throughput\nor scalability, as the service automatically distributes messages for\ndifferent ordering keys across subscribers.</p>\n\n<p>See <a href=\"./Google-Cloud-PubSub-Topic#Google__Cloud__PubSub__Topic_publish_async_instance_\">Topic#publish_async</a> and <a href=\"./Google-Cloud-PubSub-Subscription#Google__Cloud__PubSub__Subscription_listen_instance_\">Subscription#listen</a>."
  type: method
  example: []
  syntax:
    description: "Identifies related messages for which publish order should be\nrespected.</p>\n\n<p>Google Cloud Pub/Sub ordering keys provide the ability to ensure\nrelated messages are sent to subscribers in the order in which they\nwere published. Messages can be tagged with an ordering key, a string\nthat identifies related messages for which publish order should be\nrespected. The service guarantees that, for a given ordering key and\npublisher, messages are sent to subscribers in the order in which they\nwere published. Ordering does not require sacrificing high throughput\nor scalability, as the service automatically distributes messages for\ndifferent ordering keys across subscribers.</p>\n\n<p>See <a href=\"./Google-Cloud-PubSub-Topic#Google__Cloud__PubSub__Topic_publish_async_instance_\">Topic#publish_async</a> and <a href=\"./Google-Cloud-PubSub-Subscription#Google__Cloud__PubSub__Subscription_listen_instance_\">Subscription#listen</a>."
    content: "def ordering_key => String"
    arguments: []
    yields: []
    yieldparams: []
    returnValues:
    - description: "(String)"
    raises: []
- uid: Google::Cloud::PubSub::ReceivedMessage#publish_time(instance)
  fullName: Google::Cloud::PubSub::ReceivedMessage#publish_time
  name: "#publish_time"
  langs:
    - ruby
  module: google-cloud-pubsub
  id: "#publish_time"
  summary: "The time at which the message was published."
  type: method
  example: []
  syntax:
    description: "The time at which the message was published."
    content: "def publish_time"
    arguments: []
    yields: []
    yieldparams: []
    returnValues: []
    raises: []
- uid: Google::Cloud::PubSub::ReceivedMessage#published_at(instance)
  fullName: Google::Cloud::PubSub::ReceivedMessage#published_at
  name: "#published_at"
  langs:
    - ruby
  module: google-cloud-pubsub
  id: "#published_at"
  summary: "The time at which the message was published."
  type: method
  example: []
  syntax:
    description: "The time at which the message was published."
    content: "def published_at"
    arguments: []
    yields: []
    yieldparams: []
    returnValues: []
    raises: []
- uid: Google::Cloud::PubSub::ReceivedMessage#reject!(instance)
  fullName: Google::Cloud::PubSub::ReceivedMessage#reject!
  name: "#reject!"
  langs:
    - ruby
  module: google-cloud-pubsub
  id: "#reject!"
  summary: "Resets the acknowledge deadline for the message without acknowledging\nit.</p>\n\n<p>This will make the message available for redelivery."
  type: method
  example:     
    - "<pre class=\"prettyprint lang-rb\">require \"google/cloud/pubsub\"\n\npubsub = Google::Cloud::PubSub.new\n\nsub = pubsub.subscription \"my-topic-sub\"\nsubscriber = sub.listen do |received_message|\n  puts received_message.message.data\n\n  # Release message back to the API.\n  received_message.reject!\nend\n\n# Start background threads that will call block passed to listen.\nsubscriber.start\n\n# Shut down the subscriber when ready to stop receiving messages.\nsubscriber.stop!</pre>"
  syntax:
    description: "Resets the acknowledge deadline for the message without acknowledging\nit.</p>\n\n<p>This will make the message available for redelivery."
    content: "def reject!"
    arguments: []
    yields: []
    yieldparams: []
    returnValues: []
    raises: []
references: []