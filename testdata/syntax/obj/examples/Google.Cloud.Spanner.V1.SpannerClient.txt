----- Snippet .CreateSession(CreateSessionRequest, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
CreateSessionRequest request = new CreateSessionRequest
{
    DatabaseAsDatabaseName = DatabaseName.FromProjectInstanceDatabase("[PROJECT]", "[INSTANCE]", "[DATABASE]"),
    Session = new Session(),
};
// Make the request
Session response = spannerClient.CreateSession(request);

----- Snippet .CreateSessionAsync(CreateSessionRequest, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
CreateSessionRequest request = new CreateSessionRequest
{
    DatabaseAsDatabaseName = DatabaseName.FromProjectInstanceDatabase("[PROJECT]", "[INSTANCE]", "[DATABASE]"),
    Session = new Session(),
};
// Make the request
Session response = await spannerClient.CreateSessionAsync(request);

----- Snippet .CreateSession(string, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
string database = "projects/[PROJECT]/instances/[INSTANCE]/databases/[DATABASE]";
// Make the request
Session response = spannerClient.CreateSession(database);

----- Snippet .CreateSessionAsync(string, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
string database = "projects/[PROJECT]/instances/[INSTANCE]/databases/[DATABASE]";
// Make the request
Session response = await spannerClient.CreateSessionAsync(database);

----- Snippet .CreateSession(DatabaseName, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
DatabaseName database = DatabaseName.FromProjectInstanceDatabase("[PROJECT]", "[INSTANCE]", "[DATABASE]");
// Make the request
Session response = spannerClient.CreateSession(database);

----- Snippet .CreateSessionAsync(DatabaseName, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
DatabaseName database = DatabaseName.FromProjectInstanceDatabase("[PROJECT]", "[INSTANCE]", "[DATABASE]");
// Make the request
Session response = await spannerClient.CreateSessionAsync(database);

----- Snippet .BatchCreateSessions(BatchCreateSessionsRequest, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
BatchCreateSessionsRequest request = new BatchCreateSessionsRequest
{
    DatabaseAsDatabaseName = DatabaseName.FromProjectInstanceDatabase("[PROJECT]", "[INSTANCE]", "[DATABASE]"),
    SessionTemplate = new Session(),
    SessionCount = 0,
};
// Make the request
BatchCreateSessionsResponse response = spannerClient.BatchCreateSessions(request);

----- Snippet .BatchCreateSessionsAsync(BatchCreateSessionsRequest, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
BatchCreateSessionsRequest request = new BatchCreateSessionsRequest
{
    DatabaseAsDatabaseName = DatabaseName.FromProjectInstanceDatabase("[PROJECT]", "[INSTANCE]", "[DATABASE]"),
    SessionTemplate = new Session(),
    SessionCount = 0,
};
// Make the request
BatchCreateSessionsResponse response = await spannerClient.BatchCreateSessionsAsync(request);

----- Snippet .BatchCreateSessions(string, int, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
string database = "projects/[PROJECT]/instances/[INSTANCE]/databases/[DATABASE]";
int sessionCount = 0;
// Make the request
BatchCreateSessionsResponse response = spannerClient.BatchCreateSessions(database, sessionCount);

----- Snippet .BatchCreateSessionsAsync(string, int, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
string database = "projects/[PROJECT]/instances/[INSTANCE]/databases/[DATABASE]";
int sessionCount = 0;
// Make the request
BatchCreateSessionsResponse response = await spannerClient.BatchCreateSessionsAsync(database, sessionCount);

----- Snippet .BatchCreateSessions(DatabaseName, int, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
DatabaseName database = DatabaseName.FromProjectInstanceDatabase("[PROJECT]", "[INSTANCE]", "[DATABASE]");
int sessionCount = 0;
// Make the request
BatchCreateSessionsResponse response = spannerClient.BatchCreateSessions(database, sessionCount);

----- Snippet .BatchCreateSessionsAsync(DatabaseName, int, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
DatabaseName database = DatabaseName.FromProjectInstanceDatabase("[PROJECT]", "[INSTANCE]", "[DATABASE]");
int sessionCount = 0;
// Make the request
BatchCreateSessionsResponse response = await spannerClient.BatchCreateSessionsAsync(database, sessionCount);

----- Snippet .GetSession(GetSessionRequest, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
GetSessionRequest request = new GetSessionRequest
{
    SessionName = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]"),
};
// Make the request
Session response = spannerClient.GetSession(request);

----- Snippet .GetSessionAsync(GetSessionRequest, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
GetSessionRequest request = new GetSessionRequest
{
    SessionName = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]"),
};
// Make the request
Session response = await spannerClient.GetSessionAsync(request);

----- Snippet .GetSession(string, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
string name = "projects/[PROJECT]/instances/[INSTANCE]/databases/[DATABASE]/sessions/[SESSION]";
// Make the request
Session response = spannerClient.GetSession(name);

----- Snippet .GetSessionAsync(string, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
string name = "projects/[PROJECT]/instances/[INSTANCE]/databases/[DATABASE]/sessions/[SESSION]";
// Make the request
Session response = await spannerClient.GetSessionAsync(name);

----- Snippet .GetSession(SessionName, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
SessionName name = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]");
// Make the request
Session response = spannerClient.GetSession(name);

----- Snippet .GetSessionAsync(SessionName, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
SessionName name = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]");
// Make the request
Session response = await spannerClient.GetSessionAsync(name);

----- Snippet .ListSessions(ListSessionsRequest, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
ListSessionsRequest request = new ListSessionsRequest
{
    DatabaseAsDatabaseName = DatabaseName.FromProjectInstanceDatabase("[PROJECT]", "[INSTANCE]", "[DATABASE]"),
    Filter = "",
};
// Make the request
PagedEnumerable<ListSessionsResponse, Session> response = spannerClient.ListSessions(request);

// Iterate over all response items, lazily performing RPCs as required
foreach (Session item in response)
{
    // Do something with each item
    Console.WriteLine(item);
}

// Or iterate over pages (of server-defined size), performing one RPC per page
foreach (ListSessionsResponse page in response.AsRawResponses())
{
    // Do something with each page of items
    Console.WriteLine("A page of results:");
    foreach (Session item in page)
    {
        // Do something with each item
        Console.WriteLine(item);
    }
}

// Or retrieve a single page of known size (unless it's the final page), performing as many RPCs as required
int pageSize = 10;
Page<Session> singlePage = response.ReadPage(pageSize);
// Do something with the page of items
Console.WriteLine($"A page of {pageSize} results (unless it's the final page):");
foreach (Session item in singlePage)
{
    // Do something with each item
    Console.WriteLine(item);
}
// Store the pageToken, for when the next page is required.
string nextPageToken = singlePage.NextPageToken;

----- Snippet .ListSessionsAsync(ListSessionsRequest, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
ListSessionsRequest request = new ListSessionsRequest
{
    DatabaseAsDatabaseName = DatabaseName.FromProjectInstanceDatabase("[PROJECT]", "[INSTANCE]", "[DATABASE]"),
    Filter = "",
};
// Make the request
PagedAsyncEnumerable<ListSessionsResponse, Session> response = spannerClient.ListSessionsAsync(request);

// Iterate over all response items, lazily performing RPCs as required
await response.ForEachAsync((Session item) =>
{
    // Do something with each item
    Console.WriteLine(item);
});

// Or iterate over pages (of server-defined size), performing one RPC per page
await response.AsRawResponses().ForEachAsync((ListSessionsResponse page) =>
{
    // Do something with each page of items
    Console.WriteLine("A page of results:");
    foreach (Session item in page)
    {
        // Do something with each item
        Console.WriteLine(item);
    }
});

// Or retrieve a single page of known size (unless it's the final page), performing as many RPCs as required
int pageSize = 10;
Page<Session> singlePage = await response.ReadPageAsync(pageSize);
// Do something with the page of items
Console.WriteLine($"A page of {pageSize} results (unless it's the final page):");
foreach (Session item in singlePage)
{
    // Do something with each item
    Console.WriteLine(item);
}
// Store the pageToken, for when the next page is required.
string nextPageToken = singlePage.NextPageToken;

----- Snippet .ListSessions(string, string, int?, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
string database = "projects/[PROJECT]/instances/[INSTANCE]/databases/[DATABASE]";
// Make the request
PagedEnumerable<ListSessionsResponse, Session> response = spannerClient.ListSessions(database);

// Iterate over all response items, lazily performing RPCs as required
foreach (Session item in response)
{
    // Do something with each item
    Console.WriteLine(item);
}

// Or iterate over pages (of server-defined size), performing one RPC per page
foreach (ListSessionsResponse page in response.AsRawResponses())
{
    // Do something with each page of items
    Console.WriteLine("A page of results:");
    foreach (Session item in page)
    {
        // Do something with each item
        Console.WriteLine(item);
    }
}

// Or retrieve a single page of known size (unless it's the final page), performing as many RPCs as required
int pageSize = 10;
Page<Session> singlePage = response.ReadPage(pageSize);
// Do something with the page of items
Console.WriteLine($"A page of {pageSize} results (unless it's the final page):");
foreach (Session item in singlePage)
{
    // Do something with each item
    Console.WriteLine(item);
}
// Store the pageToken, for when the next page is required.
string nextPageToken = singlePage.NextPageToken;

----- Snippet .ListSessionsAsync(string, string, int?, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
string database = "projects/[PROJECT]/instances/[INSTANCE]/databases/[DATABASE]";
// Make the request
PagedAsyncEnumerable<ListSessionsResponse, Session> response = spannerClient.ListSessionsAsync(database);

// Iterate over all response items, lazily performing RPCs as required
await response.ForEachAsync((Session item) =>
{
    // Do something with each item
    Console.WriteLine(item);
});

// Or iterate over pages (of server-defined size), performing one RPC per page
await response.AsRawResponses().ForEachAsync((ListSessionsResponse page) =>
{
    // Do something with each page of items
    Console.WriteLine("A page of results:");
    foreach (Session item in page)
    {
        // Do something with each item
        Console.WriteLine(item);
    }
});

// Or retrieve a single page of known size (unless it's the final page), performing as many RPCs as required
int pageSize = 10;
Page<Session> singlePage = await response.ReadPageAsync(pageSize);
// Do something with the page of items
Console.WriteLine($"A page of {pageSize} results (unless it's the final page):");
foreach (Session item in singlePage)
{
    // Do something with each item
    Console.WriteLine(item);
}
// Store the pageToken, for when the next page is required.
string nextPageToken = singlePage.NextPageToken;

----- Snippet .ListSessions(DatabaseName, string, int?, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
DatabaseName database = DatabaseName.FromProjectInstanceDatabase("[PROJECT]", "[INSTANCE]", "[DATABASE]");
// Make the request
PagedEnumerable<ListSessionsResponse, Session> response = spannerClient.ListSessions(database);

// Iterate over all response items, lazily performing RPCs as required
foreach (Session item in response)
{
    // Do something with each item
    Console.WriteLine(item);
}

// Or iterate over pages (of server-defined size), performing one RPC per page
foreach (ListSessionsResponse page in response.AsRawResponses())
{
    // Do something with each page of items
    Console.WriteLine("A page of results:");
    foreach (Session item in page)
    {
        // Do something with each item
        Console.WriteLine(item);
    }
}

// Or retrieve a single page of known size (unless it's the final page), performing as many RPCs as required
int pageSize = 10;
Page<Session> singlePage = response.ReadPage(pageSize);
// Do something with the page of items
Console.WriteLine($"A page of {pageSize} results (unless it's the final page):");
foreach (Session item in singlePage)
{
    // Do something with each item
    Console.WriteLine(item);
}
// Store the pageToken, for when the next page is required.
string nextPageToken = singlePage.NextPageToken;

----- Snippet .ListSessionsAsync(DatabaseName, string, int?, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
DatabaseName database = DatabaseName.FromProjectInstanceDatabase("[PROJECT]", "[INSTANCE]", "[DATABASE]");
// Make the request
PagedAsyncEnumerable<ListSessionsResponse, Session> response = spannerClient.ListSessionsAsync(database);

// Iterate over all response items, lazily performing RPCs as required
await response.ForEachAsync((Session item) =>
{
    // Do something with each item
    Console.WriteLine(item);
});

// Or iterate over pages (of server-defined size), performing one RPC per page
await response.AsRawResponses().ForEachAsync((ListSessionsResponse page) =>
{
    // Do something with each page of items
    Console.WriteLine("A page of results:");
    foreach (Session item in page)
    {
        // Do something with each item
        Console.WriteLine(item);
    }
});

// Or retrieve a single page of known size (unless it's the final page), performing as many RPCs as required
int pageSize = 10;
Page<Session> singlePage = await response.ReadPageAsync(pageSize);
// Do something with the page of items
Console.WriteLine($"A page of {pageSize} results (unless it's the final page):");
foreach (Session item in singlePage)
{
    // Do something with each item
    Console.WriteLine(item);
}
// Store the pageToken, for when the next page is required.
string nextPageToken = singlePage.NextPageToken;

----- Snippet .DeleteSession(DeleteSessionRequest, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
DeleteSessionRequest request = new DeleteSessionRequest
{
    SessionName = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]"),
};
// Make the request
spannerClient.DeleteSession(request);

----- Snippet .DeleteSessionAsync(DeleteSessionRequest, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
DeleteSessionRequest request = new DeleteSessionRequest
{
    SessionName = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]"),
};
// Make the request
await spannerClient.DeleteSessionAsync(request);

----- Snippet .DeleteSession(string, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
string name = "projects/[PROJECT]/instances/[INSTANCE]/databases/[DATABASE]/sessions/[SESSION]";
// Make the request
spannerClient.DeleteSession(name);

----- Snippet .DeleteSessionAsync(string, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
string name = "projects/[PROJECT]/instances/[INSTANCE]/databases/[DATABASE]/sessions/[SESSION]";
// Make the request
await spannerClient.DeleteSessionAsync(name);

----- Snippet .DeleteSession(SessionName, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
SessionName name = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]");
// Make the request
spannerClient.DeleteSession(name);

----- Snippet .DeleteSessionAsync(SessionName, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
SessionName name = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]");
// Make the request
await spannerClient.DeleteSessionAsync(name);

----- Snippet .ExecuteSql(ExecuteSqlRequest, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
ExecuteSqlRequest request = new ExecuteSqlRequest
{
    SessionAsSessionName = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]"),
    Transaction = new TransactionSelector(),
    Sql = "",
    Params = new Struct(),
    ParamTypes =
    {
        {
            "",
            new gcsv::Type()
        },
    },
    ResumeToken = ByteString.Empty,
    QueryMode = ExecuteSqlRequest.Types.QueryMode.Normal,
    PartitionToken = ByteString.Empty,
    Seqno = 0L,
    QueryOptions = new ExecuteSqlRequest.Types.QueryOptions(),
};
// Make the request
ResultSet response = spannerClient.ExecuteSql(request);

----- Snippet .ExecuteSqlAsync(ExecuteSqlRequest, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
ExecuteSqlRequest request = new ExecuteSqlRequest
{
    SessionAsSessionName = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]"),
    Transaction = new TransactionSelector(),
    Sql = "",
    Params = new Struct(),
    ParamTypes =
    {
        {
            "",
            new gcsv::Type()
        },
    },
    ResumeToken = ByteString.Empty,
    QueryMode = ExecuteSqlRequest.Types.QueryMode.Normal,
    PartitionToken = ByteString.Empty,
    Seqno = 0L,
    QueryOptions = new ExecuteSqlRequest.Types.QueryOptions(),
};
// Make the request
ResultSet response = await spannerClient.ExecuteSqlAsync(request);

----- Snippet .ExecuteStreamingSql(ExecuteSqlRequest, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
ExecuteSqlRequest request = new ExecuteSqlRequest
{
    SessionAsSessionName = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]"),
    Transaction = new TransactionSelector(),
    Sql = "",
    Params = new Struct(),
    ParamTypes =
    {
        {
            "",
            new gcsv::Type()
        },
    },
    ResumeToken = ByteString.Empty,
    QueryMode = ExecuteSqlRequest.Types.QueryMode.Normal,
    PartitionToken = ByteString.Empty,
    Seqno = 0L,
    QueryOptions = new ExecuteSqlRequest.Types.QueryOptions(),
};
// Make the request, returning a streaming response
SpannerClient.ExecuteStreamingSqlStream response = spannerClient.ExecuteStreamingSql(request);

// Read streaming responses from server until complete
// Note that C# 8 code can use await foreach
AsyncResponseStream<PartialResultSet> responseStream = response.GetResponseStream();
while (await responseStream.MoveNextAsync())
{
    PartialResultSet responseItem = responseStream.Current;
    // Do something with streamed response
}
// The response stream has completed

----- Snippet .ExecuteBatchDml(ExecuteBatchDmlRequest, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
ExecuteBatchDmlRequest request = new ExecuteBatchDmlRequest
{
    SessionAsSessionName = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]"),
    Transaction = new TransactionSelector(),
    Statements =
    {
        new ExecuteBatchDmlRequest.Types.Statement(),
    },
    Seqno = 0L,
};
// Make the request
ExecuteBatchDmlResponse response = spannerClient.ExecuteBatchDml(request);

----- Snippet .ExecuteBatchDmlAsync(ExecuteBatchDmlRequest, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
ExecuteBatchDmlRequest request = new ExecuteBatchDmlRequest
{
    SessionAsSessionName = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]"),
    Transaction = new TransactionSelector(),
    Statements =
    {
        new ExecuteBatchDmlRequest.Types.Statement(),
    },
    Seqno = 0L,
};
// Make the request
ExecuteBatchDmlResponse response = await spannerClient.ExecuteBatchDmlAsync(request);

----- Snippet .Read(ReadRequest, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
ReadRequest request = new ReadRequest
{
    SessionAsSessionName = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]"),
    Transaction = new TransactionSelector(),
    Table = "",
    Index = "",
    Columns = { "", },
    KeySet = new KeySet(),
    Limit = 0L,
    ResumeToken = ByteString.Empty,
    PartitionToken = ByteString.Empty,
};
// Make the request
ResultSet response = spannerClient.Read(request);

----- Snippet .ReadAsync(ReadRequest, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
ReadRequest request = new ReadRequest
{
    SessionAsSessionName = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]"),
    Transaction = new TransactionSelector(),
    Table = "",
    Index = "",
    Columns = { "", },
    KeySet = new KeySet(),
    Limit = 0L,
    ResumeToken = ByteString.Empty,
    PartitionToken = ByteString.Empty,
};
// Make the request
ResultSet response = await spannerClient.ReadAsync(request);

----- Snippet .StreamingRead(ReadRequest, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
ReadRequest request = new ReadRequest
{
    SessionAsSessionName = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]"),
    Transaction = new TransactionSelector(),
    Table = "",
    Index = "",
    Columns = { "", },
    KeySet = new KeySet(),
    Limit = 0L,
    ResumeToken = ByteString.Empty,
    PartitionToken = ByteString.Empty,
};
// Make the request, returning a streaming response
SpannerClient.StreamingReadStream response = spannerClient.StreamingRead(request);

// Read streaming responses from server until complete
// Note that C# 8 code can use await foreach
AsyncResponseStream<PartialResultSet> responseStream = response.GetResponseStream();
while (await responseStream.MoveNextAsync())
{
    PartialResultSet responseItem = responseStream.Current;
    // Do something with streamed response
}
// The response stream has completed

----- Snippet .BeginTransaction(BeginTransactionRequest, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
BeginTransactionRequest request = new BeginTransactionRequest
{
    SessionAsSessionName = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]"),
    Options = new TransactionOptions(),
};
// Make the request
Transaction response = spannerClient.BeginTransaction(request);

----- Snippet .BeginTransactionAsync(BeginTransactionRequest, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
BeginTransactionRequest request = new BeginTransactionRequest
{
    SessionAsSessionName = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]"),
    Options = new TransactionOptions(),
};
// Make the request
Transaction response = await spannerClient.BeginTransactionAsync(request);

----- Snippet .BeginTransaction(string, TransactionOptions, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
string session = "projects/[PROJECT]/instances/[INSTANCE]/databases/[DATABASE]/sessions/[SESSION]";
TransactionOptions options = new TransactionOptions();
// Make the request
Transaction response = spannerClient.BeginTransaction(session, options);

----- Snippet .BeginTransactionAsync(string, TransactionOptions, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
string session = "projects/[PROJECT]/instances/[INSTANCE]/databases/[DATABASE]/sessions/[SESSION]";
TransactionOptions options = new TransactionOptions();
// Make the request
Transaction response = await spannerClient.BeginTransactionAsync(session, options);

----- Snippet .BeginTransaction(SessionName, TransactionOptions, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
SessionName session = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]");
TransactionOptions options = new TransactionOptions();
// Make the request
Transaction response = spannerClient.BeginTransaction(session, options);

----- Snippet .BeginTransactionAsync(SessionName, TransactionOptions, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
SessionName session = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]");
TransactionOptions options = new TransactionOptions();
// Make the request
Transaction response = await spannerClient.BeginTransactionAsync(session, options);

----- Snippet .Commit(CommitRequest, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
CommitRequest request = new CommitRequest
{
    SessionAsSessionName = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]"),
    TransactionId = ByteString.Empty,
    SingleUseTransaction = new TransactionOptions(),
    Mutations = { new Mutation(), },
    ReturnCommitStats = false,
};
// Make the request
CommitResponse response = spannerClient.Commit(request);

----- Snippet .CommitAsync(CommitRequest, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
CommitRequest request = new CommitRequest
{
    SessionAsSessionName = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]"),
    TransactionId = ByteString.Empty,
    SingleUseTransaction = new TransactionOptions(),
    Mutations = { new Mutation(), },
    ReturnCommitStats = false,
};
// Make the request
CommitResponse response = await spannerClient.CommitAsync(request);

----- Snippet .Commit(string, ByteString, IEnumerable<Mutation>, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
string session = "projects/[PROJECT]/instances/[INSTANCE]/databases/[DATABASE]/sessions/[SESSION]";
ByteString transactionId = ByteString.Empty;
IEnumerable<Mutation> mutations = new Mutation[] { new Mutation(), };
// Make the request
CommitResponse response = spannerClient.Commit(session, transactionId, mutations);

----- Snippet .CommitAsync(string, ByteString, IEnumerable<Mutation>, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
string session = "projects/[PROJECT]/instances/[INSTANCE]/databases/[DATABASE]/sessions/[SESSION]";
ByteString transactionId = ByteString.Empty;
IEnumerable<Mutation> mutations = new Mutation[] { new Mutation(), };
// Make the request
CommitResponse response = await spannerClient.CommitAsync(session, transactionId, mutations);

----- Snippet .Commit(SessionName, ByteString, IEnumerable<Mutation>, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
SessionName session = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]");
ByteString transactionId = ByteString.Empty;
IEnumerable<Mutation> mutations = new Mutation[] { new Mutation(), };
// Make the request
CommitResponse response = spannerClient.Commit(session, transactionId, mutations);

----- Snippet .CommitAsync(SessionName, ByteString, IEnumerable<Mutation>, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
SessionName session = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]");
ByteString transactionId = ByteString.Empty;
IEnumerable<Mutation> mutations = new Mutation[] { new Mutation(), };
// Make the request
CommitResponse response = await spannerClient.CommitAsync(session, transactionId, mutations);

----- Snippet .Commit(string, TransactionOptions, IEnumerable<Mutation>, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
string session = "projects/[PROJECT]/instances/[INSTANCE]/databases/[DATABASE]/sessions/[SESSION]";
TransactionOptions singleUseTransaction = new TransactionOptions();
IEnumerable<Mutation> mutations = new Mutation[] { new Mutation(), };
// Make the request
CommitResponse response = spannerClient.Commit(session, singleUseTransaction, mutations);

----- Snippet .CommitAsync(string, TransactionOptions, IEnumerable<Mutation>, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
string session = "projects/[PROJECT]/instances/[INSTANCE]/databases/[DATABASE]/sessions/[SESSION]";
TransactionOptions singleUseTransaction = new TransactionOptions();
IEnumerable<Mutation> mutations = new Mutation[] { new Mutation(), };
// Make the request
CommitResponse response = await spannerClient.CommitAsync(session, singleUseTransaction, mutations);

----- Snippet .Commit(SessionName, TransactionOptions, IEnumerable<Mutation>, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
SessionName session = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]");
TransactionOptions singleUseTransaction = new TransactionOptions();
IEnumerable<Mutation> mutations = new Mutation[] { new Mutation(), };
// Make the request
CommitResponse response = spannerClient.Commit(session, singleUseTransaction, mutations);

----- Snippet .CommitAsync(SessionName, TransactionOptions, IEnumerable<Mutation>, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
SessionName session = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]");
TransactionOptions singleUseTransaction = new TransactionOptions();
IEnumerable<Mutation> mutations = new Mutation[] { new Mutation(), };
// Make the request
CommitResponse response = await spannerClient.CommitAsync(session, singleUseTransaction, mutations);

----- Snippet .Rollback(RollbackRequest, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
RollbackRequest request = new RollbackRequest
{
    SessionAsSessionName = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]"),
    TransactionId = ByteString.Empty,
};
// Make the request
spannerClient.Rollback(request);

----- Snippet .RollbackAsync(RollbackRequest, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
RollbackRequest request = new RollbackRequest
{
    SessionAsSessionName = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]"),
    TransactionId = ByteString.Empty,
};
// Make the request
await spannerClient.RollbackAsync(request);

----- Snippet .Rollback(string, ByteString, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
string session = "projects/[PROJECT]/instances/[INSTANCE]/databases/[DATABASE]/sessions/[SESSION]";
ByteString transactionId = ByteString.Empty;
// Make the request
spannerClient.Rollback(session, transactionId);

----- Snippet .RollbackAsync(string, ByteString, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
string session = "projects/[PROJECT]/instances/[INSTANCE]/databases/[DATABASE]/sessions/[SESSION]";
ByteString transactionId = ByteString.Empty;
// Make the request
await spannerClient.RollbackAsync(session, transactionId);

----- Snippet .Rollback(SessionName, ByteString, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
SessionName session = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]");
ByteString transactionId = ByteString.Empty;
// Make the request
spannerClient.Rollback(session, transactionId);

----- Snippet .RollbackAsync(SessionName, ByteString, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
SessionName session = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]");
ByteString transactionId = ByteString.Empty;
// Make the request
await spannerClient.RollbackAsync(session, transactionId);

----- Snippet .PartitionQuery(PartitionQueryRequest, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
PartitionQueryRequest request = new PartitionQueryRequest
{
    SessionAsSessionName = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]"),
    Transaction = new TransactionSelector(),
    Sql = "",
    Params = new Struct(),
    ParamTypes =
    {
        {
            "",
            new gcsv::Type()
        },
    },
    PartitionOptions = new PartitionOptions(),
};
// Make the request
PartitionResponse response = spannerClient.PartitionQuery(request);

----- Snippet .PartitionQueryAsync(PartitionQueryRequest, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
PartitionQueryRequest request = new PartitionQueryRequest
{
    SessionAsSessionName = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]"),
    Transaction = new TransactionSelector(),
    Sql = "",
    Params = new Struct(),
    ParamTypes =
    {
        {
            "",
            new gcsv::Type()
        },
    },
    PartitionOptions = new PartitionOptions(),
};
// Make the request
PartitionResponse response = await spannerClient.PartitionQueryAsync(request);

----- Snippet .PartitionRead(PartitionReadRequest, CallSettings) -----
// Create client
SpannerClient spannerClient = SpannerClient.Create();
// Initialize request argument(s)
PartitionReadRequest request = new PartitionReadRequest
{
    SessionAsSessionName = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]"),
    Transaction = new TransactionSelector(),
    Table = "",
    Index = "",
    Columns = { "", },
    KeySet = new KeySet(),
    PartitionOptions = new PartitionOptions(),
};
// Make the request
PartitionResponse response = spannerClient.PartitionRead(request);

----- Snippet .PartitionReadAsync(PartitionReadRequest, CallSettings) -----
// Create client
SpannerClient spannerClient = await SpannerClient.CreateAsync();
// Initialize request argument(s)
PartitionReadRequest request = new PartitionReadRequest
{
    SessionAsSessionName = SessionName.FromProjectInstanceDatabaseSession("[PROJECT]", "[INSTANCE]", "[DATABASE]", "[SESSION]"),
    Transaction = new TransactionSelector(),
    Table = "",
    Index = "",
    Columns = { "", },
    KeySet = new KeySet(),
    PartitionOptions = new PartitionOptions(),
};
// Make the request
PartitionResponse response = await spannerClient.PartitionReadAsync(request);

