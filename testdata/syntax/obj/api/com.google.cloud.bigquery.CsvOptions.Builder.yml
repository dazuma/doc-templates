### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.CsvOptions.Builder"
  id: "Builder"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.CsvOptions.Builder.build()"
  - "com.google.cloud.bigquery.CsvOptions.Builder.setAllowJaggedRows(boolean)"
  - "com.google.cloud.bigquery.CsvOptions.Builder.setAllowQuotedNewLines(boolean)"
  - "com.google.cloud.bigquery.CsvOptions.Builder.setEncoding(java.lang.String)"
  - "com.google.cloud.bigquery.CsvOptions.Builder.setEncoding(java.nio.charset.Charset)"
  - "com.google.cloud.bigquery.CsvOptions.Builder.setFieldDelimiter(java.lang.String)"
  - "com.google.cloud.bigquery.CsvOptions.Builder.setQuote(java.lang.String)"
  - "com.google.cloud.bigquery.CsvOptions.Builder.setSkipLeadingRows(long)"
  langs:
  - "java"
  name: "CsvOptions.Builder"
  nameWithType: "CsvOptions.Builder"
  fullName: "com.google.cloud.bigquery.CsvOptions.Builder"
  type: "Class"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public static final class CsvOptions.Builder"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.CsvOptions.Builder.Builder()"
  id: "Builder()"
  parent: "com.google.cloud.bigquery.CsvOptions.Builder"
  langs:
  - "java"
  name: "Builder()"
  nameWithType: "CsvOptions.Builder.Builder()"
  fullName: "com.google.cloud.bigquery.CsvOptions.Builder.Builder()"
  overload: "com.google.cloud.bigquery.CsvOptions.Builder.Builder*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "private Builder()"
- uid: "com.google.cloud.bigquery.CsvOptions.Builder.Builder(com.google.cloud.bigquery.CsvOptions)"
  id: "Builder(com.google.cloud.bigquery.CsvOptions)"
  parent: "com.google.cloud.bigquery.CsvOptions.Builder"
  langs:
  - "java"
  name: "Builder(CsvOptions csvOptions)"
  nameWithType: "CsvOptions.Builder.Builder(CsvOptions csvOptions)"
  fullName: "com.google.cloud.bigquery.CsvOptions.Builder.Builder(CsvOptions csvOptions)"
  overload: "com.google.cloud.bigquery.CsvOptions.Builder.Builder*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "private Builder(CsvOptions csvOptions)"
    parameters:
    - id: "csvOptions"
      type: "com.google.cloud.bigquery.CsvOptions"
- uid: "com.google.cloud.bigquery.CsvOptions.Builder.build()"
  id: "build()"
  parent: "com.google.cloud.bigquery.CsvOptions.Builder"
  langs:
  - "java"
  name: "build()"
  nameWithType: "CsvOptions.Builder.build()"
  fullName: "com.google.cloud.bigquery.CsvOptions.Builder.build()"
  overload: "com.google.cloud.bigquery.CsvOptions.Builder.build*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Creates a `CsvOptions` object."
  syntax:
    content: "public CsvOptions build()"
    return:
      type: "com.google.cloud.bigquery.CsvOptions"
- uid: "com.google.cloud.bigquery.CsvOptions.Builder.setAllowJaggedRows(boolean)"
  id: "setAllowJaggedRows(boolean)"
  parent: "com.google.cloud.bigquery.CsvOptions.Builder"
  langs:
  - "java"
  name: "setAllowJaggedRows(boolean allowJaggedRows)"
  nameWithType: "CsvOptions.Builder.setAllowJaggedRows(boolean allowJaggedRows)"
  fullName: "com.google.cloud.bigquery.CsvOptions.Builder.setAllowJaggedRows(boolean allowJaggedRows)"
  overload: "com.google.cloud.bigquery.CsvOptions.Builder.setAllowJaggedRows*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Set whether BigQuery should accept rows that are missing trailing optional columns. If `true`, BigQuery treats missing trailing columns as null values. If `false`, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. By default, rows with missing trailing columns are considered bad records."
  syntax:
    content: "public CsvOptions.Builder setAllowJaggedRows(boolean allowJaggedRows)"
    parameters:
    - id: "allowJaggedRows"
      type: "boolean"
    return:
      type: "com.google.cloud.bigquery.CsvOptions.Builder"
- uid: "com.google.cloud.bigquery.CsvOptions.Builder.setAllowQuotedNewLines(boolean)"
  id: "setAllowQuotedNewLines(boolean)"
  parent: "com.google.cloud.bigquery.CsvOptions.Builder"
  langs:
  - "java"
  name: "setAllowQuotedNewLines(boolean allowQuotedNewLines)"
  nameWithType: "CsvOptions.Builder.setAllowQuotedNewLines(boolean allowQuotedNewLines)"
  fullName: "com.google.cloud.bigquery.CsvOptions.Builder.setAllowQuotedNewLines(boolean allowQuotedNewLines)"
  overload: "com.google.cloud.bigquery.CsvOptions.Builder.setAllowQuotedNewLines*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets whether BigQuery should allow quoted data sections that contain newline characters in a CSV file. By default quoted newline are not allowed."
  syntax:
    content: "public CsvOptions.Builder setAllowQuotedNewLines(boolean allowQuotedNewLines)"
    parameters:
    - id: "allowQuotedNewLines"
      type: "boolean"
    return:
      type: "com.google.cloud.bigquery.CsvOptions.Builder"
- uid: "com.google.cloud.bigquery.CsvOptions.Builder.setEncoding(java.lang.String)"
  id: "setEncoding(java.lang.String)"
  parent: "com.google.cloud.bigquery.CsvOptions.Builder"
  langs:
  - "java"
  name: "setEncoding(String encoding)"
  nameWithType: "CsvOptions.Builder.setEncoding(String encoding)"
  fullName: "com.google.cloud.bigquery.CsvOptions.Builder.setEncoding(String encoding)"
  overload: "com.google.cloud.bigquery.CsvOptions.Builder.setEncoding*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values set in <xref uid=\"com.google.cloud.bigquery.CsvOptions.Builder.setQuote(java.lang.String)\" data-throw-if-not-resolved=\"false\">#setQuote(String)</xref> and <xref uid=\"com.google.cloud.bigquery.CsvOptions.Builder.setFieldDelimiter(java.lang.String)\" data-throw-if-not-resolved=\"false\">#setFieldDelimiter(String)</xref>."
  syntax:
    content: "public CsvOptions.Builder setEncoding(String encoding)"
    parameters:
    - id: "encoding"
      type: "java.lang.String"
    return:
      type: "com.google.cloud.bigquery.CsvOptions.Builder"
- uid: "com.google.cloud.bigquery.CsvOptions.Builder.setEncoding(java.nio.charset.Charset)"
  id: "setEncoding(java.nio.charset.Charset)"
  parent: "com.google.cloud.bigquery.CsvOptions.Builder"
  langs:
  - "java"
  name: "setEncoding(Charset encoding)"
  nameWithType: "CsvOptions.Builder.setEncoding(Charset encoding)"
  fullName: "com.google.cloud.bigquery.CsvOptions.Builder.setEncoding(Charset encoding)"
  overload: "com.google.cloud.bigquery.CsvOptions.Builder.setEncoding*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values set in <xref uid=\"com.google.cloud.bigquery.CsvOptions.Builder.setQuote(java.lang.String)\" data-throw-if-not-resolved=\"false\">#setQuote(String)</xref> and <xref uid=\"com.google.cloud.bigquery.CsvOptions.Builder.setFieldDelimiter(java.lang.String)\" data-throw-if-not-resolved=\"false\">#setFieldDelimiter(String)</xref>."
  syntax:
    content: "public CsvOptions.Builder setEncoding(Charset encoding)"
    parameters:
    - id: "encoding"
      type: "java.nio.charset.Charset"
    return:
      type: "com.google.cloud.bigquery.CsvOptions.Builder"
- uid: "com.google.cloud.bigquery.CsvOptions.Builder.setFieldDelimiter(java.lang.String)"
  id: "setFieldDelimiter(java.lang.String)"
  parent: "com.google.cloud.bigquery.CsvOptions.Builder"
  langs:
  - "java"
  name: "setFieldDelimiter(String fieldDelimiter)"
  nameWithType: "CsvOptions.Builder.setFieldDelimiter(String fieldDelimiter)"
  fullName: "com.google.cloud.bigquery.CsvOptions.Builder.setFieldDelimiter(String fieldDelimiter)"
  overload: "com.google.cloud.bigquery.CsvOptions.Builder.setFieldDelimiter*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the separator for fields in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence \"\\\\t\" to specify a tab separator. The default value is a comma (',')."
  syntax:
    content: "public CsvOptions.Builder setFieldDelimiter(String fieldDelimiter)"
    parameters:
    - id: "fieldDelimiter"
      type: "java.lang.String"
    return:
      type: "com.google.cloud.bigquery.CsvOptions.Builder"
- uid: "com.google.cloud.bigquery.CsvOptions.Builder.setQuote(java.lang.String)"
  id: "setQuote(java.lang.String)"
  parent: "com.google.cloud.bigquery.CsvOptions.Builder"
  langs:
  - "java"
  name: "setQuote(String quote)"
  nameWithType: "CsvOptions.Builder.setQuote(String quote)"
  fullName: "com.google.cloud.bigquery.CsvOptions.Builder.setQuote(String quote)"
  overload: "com.google.cloud.bigquery.CsvOptions.Builder.setQuote*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('\"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set <xref uid=\"com.google.cloud.bigquery.CsvOptions.Builder.setAllowQuotedNewLines(boolean)\" data-throw-if-not-resolved=\"false\">#setAllowQuotedNewLines(boolean)</xref> property to `true`."
  syntax:
    content: "public CsvOptions.Builder setQuote(String quote)"
    parameters:
    - id: "quote"
      type: "java.lang.String"
    return:
      type: "com.google.cloud.bigquery.CsvOptions.Builder"
- uid: "com.google.cloud.bigquery.CsvOptions.Builder.setSkipLeadingRows(long)"
  id: "setSkipLeadingRows(long)"
  parent: "com.google.cloud.bigquery.CsvOptions.Builder"
  langs:
  - "java"
  name: "setSkipLeadingRows(long skipLeadingRows)"
  nameWithType: "CsvOptions.Builder.setSkipLeadingRows(long skipLeadingRows)"
  fullName: "com.google.cloud.bigquery.CsvOptions.Builder.setSkipLeadingRows(long skipLeadingRows)"
  overload: "com.google.cloud.bigquery.CsvOptions.Builder.setSkipLeadingRows*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the number of rows at the top of a CSV file that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped."
  syntax:
    content: "public CsvOptions.Builder setSkipLeadingRows(long skipLeadingRows)"
    parameters:
    - id: "skipLeadingRows"
      type: "long"
    return:
      type: "com.google.cloud.bigquery.CsvOptions.Builder"
references:
- uid: "com.google.cloud.bigquery.CsvOptions.Builder.Builder*"
  name: "Builder"
  nameWithType: "CsvOptions.Builder.Builder"
  fullName: "com.google.cloud.bigquery.CsvOptions.Builder.Builder"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.CsvOptions"
  name: "CsvOptions"
  nameWithType: "CsvOptions"
  fullName: "com.google.cloud.bigquery.CsvOptions"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.google.cloud.bigquery.CsvOptions.Builder.setAllowJaggedRows*"
  name: "setAllowJaggedRows"
  nameWithType: "CsvOptions.Builder.setAllowJaggedRows"
  fullName: "com.google.cloud.bigquery.CsvOptions.Builder.setAllowJaggedRows"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.CsvOptions.Builder.setAllowQuotedNewLines*"
  name: "setAllowQuotedNewLines"
  nameWithType: "CsvOptions.Builder.setAllowQuotedNewLines"
  fullName: "com.google.cloud.bigquery.CsvOptions.Builder.setAllowQuotedNewLines"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.CsvOptions.Builder.setEncoding*"
  name: "setEncoding"
  nameWithType: "CsvOptions.Builder.setEncoding"
  fullName: "com.google.cloud.bigquery.CsvOptions.Builder.setEncoding"
  package: "com.google.cloud.bigquery"
- uid: "java.nio.charset.Charset"
  spec.java:
  - uid: "java.nio.charset.Charset"
    name: "Charset"
    fullName: "java.nio.charset.Charset"
- uid: "com.google.cloud.bigquery.CsvOptions.Builder.setFieldDelimiter*"
  name: "setFieldDelimiter"
  nameWithType: "CsvOptions.Builder.setFieldDelimiter"
  fullName: "com.google.cloud.bigquery.CsvOptions.Builder.setFieldDelimiter"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.CsvOptions.Builder.setQuote*"
  name: "setQuote"
  nameWithType: "CsvOptions.Builder.setQuote"
  fullName: "com.google.cloud.bigquery.CsvOptions.Builder.setQuote"
  package: "com.google.cloud.bigquery"
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "com.google.cloud.bigquery.CsvOptions.Builder.setSkipLeadingRows*"
  name: "setSkipLeadingRows"
  nameWithType: "CsvOptions.Builder.setSkipLeadingRows"
  fullName: "com.google.cloud.bigquery.CsvOptions.Builder.setSkipLeadingRows"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.CsvOptions.Builder.build*"
  name: "build"
  nameWithType: "CsvOptions.Builder.build"
  fullName: "com.google.cloud.bigquery.CsvOptions.Builder.build"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
