### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.Table"
  id: "Table"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.Table.Builder"
  - "com.google.cloud.bigquery.Table.copy(com.google.cloud.bigquery.TableId,com.google.cloud.bigquery.BigQuery.JobOption...)"
  - "com.google.cloud.bigquery.Table.copy(java.lang.String,java.lang.String,com.google.cloud.bigquery.BigQuery.JobOption...)"
  - "com.google.cloud.bigquery.Table.delete()"
  - "com.google.cloud.bigquery.Table.equals(java.lang.Object)"
  - "com.google.cloud.bigquery.Table.exists()"
  - "com.google.cloud.bigquery.Table.extract(java.lang.String,java.lang.String,com.google.cloud.bigquery.BigQuery.JobOption...)"
  - "com.google.cloud.bigquery.Table.extract(java.lang.String,java.util.List<java.lang.String>,com.google.cloud.bigquery.BigQuery.JobOption...)"
  - "com.google.cloud.bigquery.Table.getBigQuery()"
  - "com.google.cloud.bigquery.Table.hashCode()"
  - "com.google.cloud.bigquery.Table.insert(java.lang.Iterable<com.google.cloud.bigquery.InsertAllRequest.RowToInsert>)"
  - "com.google.cloud.bigquery.Table.insert(java.lang.Iterable<com.google.cloud.bigquery.InsertAllRequest.RowToInsert>,boolean,boolean)"
  - "com.google.cloud.bigquery.Table.list(com.google.cloud.bigquery.BigQuery.TableDataListOption...)"
  - "com.google.cloud.bigquery.Table.list(com.google.cloud.bigquery.Schema,com.google.cloud.bigquery.BigQuery.TableDataListOption...)"
  - "com.google.cloud.bigquery.Table.load(com.google.cloud.bigquery.FormatOptions,java.lang.String,com.google.cloud.bigquery.BigQuery.JobOption...)"
  - "com.google.cloud.bigquery.Table.load(com.google.cloud.bigquery.FormatOptions,java.util.List<java.lang.String>,com.google.cloud.bigquery.BigQuery.JobOption...)"
  - "com.google.cloud.bigquery.Table.reload(com.google.cloud.bigquery.BigQuery.TableOption...)"
  - "com.google.cloud.bigquery.Table.toBuilder()"
  - "com.google.cloud.bigquery.Table.update(com.google.cloud.bigquery.BigQuery.TableOption...)"
  langs:
  - "java"
  name: "Table"
  nameWithType: "Table"
  fullName: "com.google.cloud.bigquery.Table"
  type: "Class"
  package: "com.google.cloud.bigquery"
  summary: "A Google BigQuery Table.\n\nObjects of this class are immutable. Operations that modify the table like <xref uid=\"com.google.cloud.bigquery.Table.update*\" data-throw-if-not-resolved=\"false\">#update</xref> return a new object. To get a `Table` object with the most recent information use <xref uid=\"com.google.cloud.bigquery.Table.reload*\" data-throw-if-not-resolved=\"false\">#reload</xref>. `Table` adds a layer of service-related functionality over <xref uid=\"com.google.cloud.bigquery.TableInfo\" data-throw-if-not-resolved=\"false\">TableInfo</xref>."
  syntax:
    content: "public class Table extends TableInfo"
  inheritance:
  - "java.lang.Object"
  - "com.google.cloud.bigquery.TableInfo"
  inheritedMembers:
  - "com.google.cloud.bigquery.TableInfo.<T>getDefinition()"
  - "com.google.cloud.bigquery.TableInfo.equals(java.lang.Object)"
  - "com.google.cloud.bigquery.TableInfo.getCreationTime()"
  - "com.google.cloud.bigquery.TableInfo.getDescription()"
  - "com.google.cloud.bigquery.TableInfo.getEncryptionConfiguration()"
  - "com.google.cloud.bigquery.TableInfo.getEtag()"
  - "com.google.cloud.bigquery.TableInfo.getExpirationTime()"
  - "com.google.cloud.bigquery.TableInfo.getFriendlyName()"
  - "com.google.cloud.bigquery.TableInfo.getGeneratedId()"
  - "com.google.cloud.bigquery.TableInfo.getLabels()"
  - "com.google.cloud.bigquery.TableInfo.getLastModifiedTime()"
  - "com.google.cloud.bigquery.TableInfo.getNumBytes()"
  - "com.google.cloud.bigquery.TableInfo.getNumLongTermBytes()"
  - "com.google.cloud.bigquery.TableInfo.getNumRows()"
  - "com.google.cloud.bigquery.TableInfo.getRequirePartitionFilter()"
  - "com.google.cloud.bigquery.TableInfo.getSelfLink()"
  - "com.google.cloud.bigquery.TableInfo.getTableId()"
  - "com.google.cloud.bigquery.TableInfo.hashCode()"
  - "com.google.cloud.bigquery.TableInfo.newBuilder(com.google.cloud.bigquery.TableId,com.google.cloud.bigquery.TableDefinition)"
  - "com.google.cloud.bigquery.TableInfo.of(com.google.cloud.bigquery.TableId,com.google.cloud.bigquery.TableDefinition)"
  - "com.google.cloud.bigquery.TableInfo.toBuilder()"
  - "com.google.cloud.bigquery.TableInfo.toString()"
  - "java.lang.Object.clone()"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.Table.Table(com.google.cloud.bigquery.BigQuery,com.google.cloud.bigquery.TableInfo.BuilderImpl)"
  id: "Table(com.google.cloud.bigquery.BigQuery,com.google.cloud.bigquery.TableInfo.BuilderImpl)"
  parent: "com.google.cloud.bigquery.Table"
  langs:
  - "java"
  name: "Table(BigQuery bigquery, TableInfo.BuilderImpl infoBuilder)"
  nameWithType: "Table.Table(BigQuery bigquery, TableInfo.BuilderImpl infoBuilder)"
  fullName: "com.google.cloud.bigquery.Table.Table(BigQuery bigquery, TableInfo.BuilderImpl infoBuilder)"
  overload: "com.google.cloud.bigquery.Table.Table*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: " Table(BigQuery bigquery, TableInfo.BuilderImpl infoBuilder)"
    parameters:
    - id: "bigquery"
      type: "com.google.cloud.bigquery.BigQuery"
    - id: "infoBuilder"
      type: "com.google.cloud.bigquery.TableInfo.BuilderImpl"
- uid: "com.google.cloud.bigquery.Table.copy(com.google.cloud.bigquery.TableId,com.google.cloud.bigquery.BigQuery.JobOption...)"
  id: "copy(com.google.cloud.bigquery.TableId,com.google.cloud.bigquery.BigQuery.JobOption...)"
  parent: "com.google.cloud.bigquery.Table"
  langs:
  - "java"
  name: "copy(TableId destinationTable, BigQuery.JobOption[] options)"
  nameWithType: "Table.copy(TableId destinationTable, BigQuery.JobOption[] options)"
  fullName: "com.google.cloud.bigquery.Table.copy(TableId destinationTable, BigQuery.JobOption[] options)"
  overload: "com.google.cloud.bigquery.Table.copy*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Starts a BigQuery Job to copy the current table to the provided destination table. Returns the started <xref uid=\"com.google.cloud.bigquery.Job\" data-throw-if-not-resolved=\"false\">Job</xref> object.\n\nExample copying the table to a destination table.\n\n```java\nString dataset = \"my_dataset\";\n String tableName = \"my_destination_table\";\n TableId destinationId = TableId.of(dataset, tableName);\n JobOption options = JobOption.fields(JobField.STATUS, JobField.USER_EMAIL);\n Job job = table.copy(destinationId, options);\n // Wait for the job to complete.\n try {\n   Job completedJob = job.waitFor(RetryOption.initialRetryDelay(Duration.ofSeconds(1)),\n       RetryOption.totalTimeout(Duration.ofMinutes(3)));\n   if (completedJob != null && completedJob.getStatus().getError() == null) {\n     // Job completed successfully.\n   } else {\n     // Handle error case.\n   }\n } catch (InterruptedException e) {\n   // Handle interrupted wait\n }\n```"
  syntax:
    content: "public Job copy(TableId destinationTable, BigQuery.JobOption[] options)"
    parameters:
    - id: "destinationTable"
      type: "com.google.cloud.bigquery.TableId"
      description: "the destination table of the copy job"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.JobOption[]"
      description: "job options"
    return:
      type: "com.google.cloud.bigquery.Job"
  exceptions:
  - type: "com.google.cloud.bigquery.BigQueryException"
    description: "upon failure"
- uid: "com.google.cloud.bigquery.Table.copy(java.lang.String,java.lang.String,com.google.cloud.bigquery.BigQuery.JobOption...)"
  id: "copy(java.lang.String,java.lang.String,com.google.cloud.bigquery.BigQuery.JobOption...)"
  parent: "com.google.cloud.bigquery.Table"
  langs:
  - "java"
  name: "copy(String destinationDataset, String destinationTable, BigQuery.JobOption[] options)"
  nameWithType: "Table.copy(String destinationDataset, String destinationTable, BigQuery.JobOption[] options)"
  fullName: "com.google.cloud.bigquery.Table.copy(String destinationDataset, String destinationTable, BigQuery.JobOption[] options)"
  overload: "com.google.cloud.bigquery.Table.copy*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Starts a BigQuery Job to copy the current table to the provided destination table. Returns the started <xref uid=\"com.google.cloud.bigquery.Job\" data-throw-if-not-resolved=\"false\">Job</xref> object.\n\nExample of copying the table to a destination table.\n\n```java\nString datasetName = \"my_dataset\";\n String tableName = \"my_destination_table\";\n Job job = table.copy(datasetName, tableName);\n // Wait for the job to complete.\n try {\n   Job completedJob = job.waitFor(RetryOption.initialRetryDelay(Duration.ofSeconds(1)),\n       RetryOption.totalTimeout(Duration.ofMinutes(3)));\n   if (completedJob != null && completedJob.getStatus().getError() == null) {\n     // Job completed successfully\n   } else {\n     // Handle error case\n   }\n } catch (InterruptedException e) {\n   // Handle interrupted wait\n }\n```"
  syntax:
    content: "public Job copy(String destinationDataset, String destinationTable, BigQuery.JobOption[] options)"
    parameters:
    - id: "destinationDataset"
      type: "java.lang.String"
      description: "the user-defined id of the destination dataset"
    - id: "destinationTable"
      type: "java.lang.String"
      description: "the user-defined id of the destination table"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.JobOption[]"
      description: "job options"
    return:
      type: "com.google.cloud.bigquery.Job"
  exceptions:
  - type: "com.google.cloud.bigquery.BigQueryException"
    description: "upon failure"
- uid: "com.google.cloud.bigquery.Table.delete()"
  id: "delete()"
  parent: "com.google.cloud.bigquery.Table"
  langs:
  - "java"
  name: "delete()"
  nameWithType: "Table.delete()"
  fullName: "com.google.cloud.bigquery.Table.delete()"
  overload: "com.google.cloud.bigquery.Table.delete*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Deletes this table.\n\nExample of deleting the table.\n\n```java\nboolean deleted = table.delete();\n if (deleted) {\n   // the table was deleted\n } else {\n   // the table was not found\n }\n```"
  syntax:
    content: "public boolean delete()"
    return:
      type: "boolean"
      description: "<code>true</code> if table was deleted, <code>false</code> if it was not found"
- uid: "com.google.cloud.bigquery.Table.equals(java.lang.Object)"
  id: "equals(java.lang.Object)"
  parent: "com.google.cloud.bigquery.Table"
  langs:
  - "java"
  name: "equals(Object obj)"
  nameWithType: "Table.equals(Object obj)"
  fullName: "com.google.cloud.bigquery.Table.equals(Object obj)"
  overload: "com.google.cloud.bigquery.Table.equals*"
  overridden: "com.google.cloud.bigquery.TableInfo.equals(java.lang.Object)"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public final boolean equals(Object obj)"
    parameters:
    - id: "obj"
      type: "java.lang.Object"
    return:
      type: "boolean"
- uid: "com.google.cloud.bigquery.Table.exists()"
  id: "exists()"
  parent: "com.google.cloud.bigquery.Table"
  langs:
  - "java"
  name: "exists()"
  nameWithType: "Table.exists()"
  fullName: "com.google.cloud.bigquery.Table.exists()"
  overload: "com.google.cloud.bigquery.Table.exists*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Checks if this table exists.\n\nExample of checking if the table exists.\n\n```java\nboolean exists = table.exists();\n if (exists) {\n   // the table exists\n } else {\n   // the table was not found\n }\n```"
  syntax:
    content: "public boolean exists()"
    return:
      type: "boolean"
      description: "<code>true</code> if this table exists, <code>false</code> otherwise"
- uid: "com.google.cloud.bigquery.Table.extract(java.lang.String,java.lang.String,com.google.cloud.bigquery.BigQuery.JobOption...)"
  id: "extract(java.lang.String,java.lang.String,com.google.cloud.bigquery.BigQuery.JobOption...)"
  parent: "com.google.cloud.bigquery.Table"
  langs:
  - "java"
  name: "extract(String format, String destinationUri, BigQuery.JobOption[] options)"
  nameWithType: "Table.extract(String format, String destinationUri, BigQuery.JobOption[] options)"
  fullName: "com.google.cloud.bigquery.Table.extract(String format, String destinationUri, BigQuery.JobOption[] options)"
  overload: "com.google.cloud.bigquery.Table.extract*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Starts a BigQuery Job to extract the current table to the provided destination URI. Returns the started <xref uid=\"com.google.cloud.bigquery.Job\" data-throw-if-not-resolved=\"false\">Job</xref> object.\n\nExample extracting data to single Google Cloud Storage file.\n\n```java\nString format = \"CSV\";\n String gcsUrl = \"gs://my_bucket/filename.csv\";\n Job job = table.extract(format, gcsUrl);\n // Wait for the job to complete\n try {\n   Job completedJob = job.waitFor(RetryOption.initialRetryDelay(Duration.ofSeconds(1)),\n       RetryOption.totalTimeout(Duration.ofMinutes(3)));\n   if (completedJob != null && completedJob.getStatus().getError() == null) {\n     // Job completed successfully\n   } else {\n     // Handle error case\n   }\n } catch (InterruptedException e) {\n   // Handle interrupted wait\n }\n```"
  syntax:
    content: "public Job extract(String format, String destinationUri, BigQuery.JobOption[] options)"
    parameters:
    - id: "format"
      type: "java.lang.String"
      description: "the format of the extracted data"
    - id: "destinationUri"
      type: "java.lang.String"
      description: "the fully-qualified Google Cloud Storage URI (e.g. gs://bucket/path)\n     where the extracted table should be written"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.JobOption[]"
      description: "job options"
    return:
      type: "com.google.cloud.bigquery.Job"
  exceptions:
  - type: "com.google.cloud.bigquery.BigQueryException"
    description: "upon failure"
- uid: "com.google.cloud.bigquery.Table.extract(java.lang.String,java.util.List<java.lang.String>,com.google.cloud.bigquery.BigQuery.JobOption...)"
  id: "extract(java.lang.String,java.util.List<java.lang.String>,com.google.cloud.bigquery.BigQuery.JobOption...)"
  parent: "com.google.cloud.bigquery.Table"
  langs:
  - "java"
  name: "extract(String format, List<String> destinationUris, BigQuery.JobOption[] options)"
  nameWithType: "Table.extract(String format, List<String> destinationUris, BigQuery.JobOption[] options)"
  fullName: "com.google.cloud.bigquery.Table.extract(String format, List<String> destinationUris, BigQuery.JobOption[] options)"
  overload: "com.google.cloud.bigquery.Table.extract*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Starts a BigQuery Job to extract the current table to the provided destination URIs. Returns the started <xref uid=\"com.google.cloud.bigquery.Job\" data-throw-if-not-resolved=\"false\">Job</xref> object.\n\nExample of partitioning data to a list of Google Cloud Storage files.\n\n```java\nString format = \"CSV\";\n String gcsUrl1 = \"gs://my_bucket/PartitionA_*.csv\";\n String gcsUrl2 = \"gs://my_bucket/PartitionB_*.csv\";\n List destinationUris = new ArrayList<>();\n destinationUris.add(gcsUrl1);\n destinationUris.add(gcsUrl2);\n Job job = table.extract(format, destinationUris);\n // Wait for the job to complete\n try {\n   Job completedJob = job.waitFor(RetryOption.initialRetryDelay(Duration.ofSeconds(1)),\n       RetryOption.totalTimeout(Duration.ofMinutes(3)));\n   if (completedJob != null && completedJob.getStatus().getError() == null) {\n     // Job completed successfully\n   } else {\n     // Handle error case\n   }\n } catch (InterruptedException e) {\n   // Handle interrupted wait\n }\n```"
  syntax:
    content: "public Job extract(String format, List<String> destinationUris, BigQuery.JobOption[] options)"
    parameters:
    - id: "format"
      type: "java.lang.String"
      description: "the format of the exported data"
    - id: "destinationUris"
      type: "java.util.List<java.lang.String>"
      description: "the fully-qualified Google Cloud Storage URIs (e.g. gs://bucket/path)\n     where the extracted table should be written"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.JobOption[]"
      description: "job options"
    return:
      type: "com.google.cloud.bigquery.Job"
  exceptions:
  - type: "com.google.cloud.bigquery.BigQueryException"
    description: "upon failure"
- uid: "com.google.cloud.bigquery.Table.getBigQuery()"
  id: "getBigQuery()"
  parent: "com.google.cloud.bigquery.Table"
  langs:
  - "java"
  name: "getBigQuery()"
  nameWithType: "Table.getBigQuery()"
  fullName: "com.google.cloud.bigquery.Table.getBigQuery()"
  overload: "com.google.cloud.bigquery.Table.getBigQuery*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the table's `BigQuery` object used to issue requests."
  syntax:
    content: "public BigQuery getBigQuery()"
    return:
      type: "com.google.cloud.bigquery.BigQuery"
- uid: "com.google.cloud.bigquery.Table.hashCode()"
  id: "hashCode()"
  parent: "com.google.cloud.bigquery.Table"
  langs:
  - "java"
  name: "hashCode()"
  nameWithType: "Table.hashCode()"
  fullName: "com.google.cloud.bigquery.Table.hashCode()"
  overload: "com.google.cloud.bigquery.Table.hashCode*"
  overridden: "com.google.cloud.bigquery.TableInfo.hashCode()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public final int hashCode()"
    return:
      type: "int"
- uid: "com.google.cloud.bigquery.Table.insert(java.lang.Iterable<com.google.cloud.bigquery.InsertAllRequest.RowToInsert>)"
  id: "insert(java.lang.Iterable<com.google.cloud.bigquery.InsertAllRequest.RowToInsert>)"
  parent: "com.google.cloud.bigquery.Table"
  langs:
  - "java"
  name: "insert(Iterable<InsertAllRequest.RowToInsert> rows)"
  nameWithType: "Table.insert(Iterable<InsertAllRequest.RowToInsert> rows)"
  fullName: "com.google.cloud.bigquery.Table.insert(Iterable<InsertAllRequest.RowToInsert> rows)"
  overload: "com.google.cloud.bigquery.Table.insert*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Insert rows into the table.\n\nStreaming inserts reside temporarily in the streaming buffer, which has different availability characteristics than managed storage. Certain operations do not interact with the streaming buffer, such as <xref uid=\"com.google.cloud.bigquery.Table.list*\" data-throw-if-not-resolved=\"false\">#list(TableDataListOption...)</xref> and <xref uid=\"#copy(TableId,\n JobOption...)\" data-throw-if-not-resolved=\"false\">#copy(TableId,\n JobOption...)</xref>. As such, recent streaming data will not be present in the destination table or output.\n\nExample of inserting rows into the table.\n\n```java\nString rowId1 = \"rowId1\";\n String rowId2 = \"rowId2\";\n List rows = new ArrayList<>();\n Map row1 = new HashMap<>();\n row1.put(\"stringField\", \"value1\");\n row1.put(\"booleanField\", true);\n Map row2 = new HashMap<>();\n row2.put(\"stringField\", \"value2\");\n row2.put(\"booleanField\", false);\n rows.add(RowToInsert.of(rowId1, row1));\n rows.add(RowToInsert.of(rowId2, row2));\n InsertAllResponse response = table.insert(rows);\n // do something with response\n```"
  syntax:
    content: "public InsertAllResponse insert(Iterable<InsertAllRequest.RowToInsert> rows)"
    parameters:
    - id: "rows"
      type: "java.lang.Iterable<com.google.cloud.bigquery.InsertAllRequest.RowToInsert>"
      description: "rows to be inserted"
    return:
      type: "com.google.cloud.bigquery.InsertAllResponse"
  exceptions:
  - type: "com.google.cloud.bigquery.BigQueryException"
    description: "upon failure"
- uid: "com.google.cloud.bigquery.Table.insert(java.lang.Iterable<com.google.cloud.bigquery.InsertAllRequest.RowToInsert>,boolean,boolean)"
  id: "insert(java.lang.Iterable<com.google.cloud.bigquery.InsertAllRequest.RowToInsert>,boolean,boolean)"
  parent: "com.google.cloud.bigquery.Table"
  langs:
  - "java"
  name: "insert(Iterable<InsertAllRequest.RowToInsert> rows, boolean skipInvalidRows, boolean ignoreUnknownValues)"
  nameWithType: "Table.insert(Iterable<InsertAllRequest.RowToInsert> rows, boolean skipInvalidRows, boolean ignoreUnknownValues)"
  fullName: "com.google.cloud.bigquery.Table.insert(Iterable<InsertAllRequest.RowToInsert> rows, boolean skipInvalidRows, boolean ignoreUnknownValues)"
  overload: "com.google.cloud.bigquery.Table.insert*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Insert rows into the table.\n\nStreaming inserts reside temporarily in the streaming buffer, which has different availability characteristics than managed storage. Certain operations do not interact with the streaming buffer, such as <xref uid=\"com.google.cloud.bigquery.Table.list*\" data-throw-if-not-resolved=\"false\">#list(TableDataListOption...)</xref> and <xref uid=\"#copy(TableId,\n JobOption...)\" data-throw-if-not-resolved=\"false\">#copy(TableId,\n JobOption...)</xref>. As such, recent streaming data will not be present in the destination table or output.\n\nExample of inserting rows into the table, ignoring invalid rows.\n\n```java\nString rowId1 = \"rowId1\";\n String rowId2 = \"rowId2\";\n List rows = new ArrayList<>();\n Map row1 = new HashMap<>();\n row1.put(\"stringField\", 1);\n row1.put(\"booleanField\", true);\n Map row2 = new HashMap<>();\n row2.put(\"stringField\", \"value2\");\n row2.put(\"booleanField\", false);\n rows.add(RowToInsert.of(rowId1, row1));\n rows.add(RowToInsert.of(rowId2, row2));\n InsertAllResponse response = table.insert(rows, true, true);\n // do something with response\n```"
  syntax:
    content: "public InsertAllResponse insert(Iterable<InsertAllRequest.RowToInsert> rows, boolean skipInvalidRows, boolean ignoreUnknownValues)"
    parameters:
    - id: "rows"
      type: "java.lang.Iterable<com.google.cloud.bigquery.InsertAllRequest.RowToInsert>"
      description: "rows to be inserted"
    - id: "skipInvalidRows"
      type: "boolean"
      description: "whether to insert all valid rows, even if invalid rows exist. If not set\n     the entire insert operation will fail if rows to be inserted contain an invalid row"
    - id: "ignoreUnknownValues"
      type: "boolean"
      description: "whether to accept rows that contain values that do not match the\n     schema. The unknown values are ignored. If not set, rows with unknown values are considered\n     to be invalid"
    return:
      type: "com.google.cloud.bigquery.InsertAllResponse"
  exceptions:
  - type: "com.google.cloud.bigquery.BigQueryException"
    description: "upon failure"
- uid: "com.google.cloud.bigquery.Table.list(com.google.cloud.bigquery.BigQuery.TableDataListOption...)"
  id: "list(com.google.cloud.bigquery.BigQuery.TableDataListOption...)"
  parent: "com.google.cloud.bigquery.Table"
  langs:
  - "java"
  name: "list(BigQuery.TableDataListOption[] options)"
  nameWithType: "Table.list(BigQuery.TableDataListOption[] options)"
  fullName: "com.google.cloud.bigquery.Table.list(BigQuery.TableDataListOption[] options)"
  overload: "com.google.cloud.bigquery.Table.list*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the paginated list rows in this table.\n\nExample of listing rows in the table.\n\n```java\n// This example reads the result 100 rows per RPC call. If there's no need to limit the number,\n // simply omit the option.\n Page page = table.list(TableDataListOption.pageSize(100));\n for (FieldValueList row : page.iterateAll()) {\n   // do something with the row\n }\n```"
  syntax:
    content: "public TableResult list(BigQuery.TableDataListOption[] options)"
    parameters:
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.TableDataListOption[]"
      description: "table data list options"
    return:
      type: "com.google.cloud.bigquery.TableResult"
  exceptions:
  - type: "com.google.cloud.bigquery.BigQueryException"
    description: "upon failure"
- uid: "com.google.cloud.bigquery.Table.list(com.google.cloud.bigquery.Schema,com.google.cloud.bigquery.BigQuery.TableDataListOption...)"
  id: "list(com.google.cloud.bigquery.Schema,com.google.cloud.bigquery.BigQuery.TableDataListOption...)"
  parent: "com.google.cloud.bigquery.Table"
  langs:
  - "java"
  name: "list(Schema schema, BigQuery.TableDataListOption[] options)"
  nameWithType: "Table.list(Schema schema, BigQuery.TableDataListOption[] options)"
  fullName: "com.google.cloud.bigquery.Table.list(Schema schema, BigQuery.TableDataListOption[] options)"
  overload: "com.google.cloud.bigquery.Table.list*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the paginated list rows in this table.\n\nExample of listing rows in the table given a schema.\n\n```java\nSchema schema = ...;\n String field = \"my_field\";\n Page page = table.list(schema);\n for (FieldValueList row : page.iterateAll()) {\n   row.get(field);\n }\n```"
  syntax:
    content: "public TableResult list(Schema schema, BigQuery.TableDataListOption[] options)"
    parameters:
    - id: "schema"
      type: "com.google.cloud.bigquery.Schema"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.TableDataListOption[]"
      description: "table data list options"
    return:
      type: "com.google.cloud.bigquery.TableResult"
  exceptions:
  - type: "com.google.cloud.bigquery.BigQueryException"
    description: "upon failure"
- uid: "com.google.cloud.bigquery.Table.load(com.google.cloud.bigquery.FormatOptions,java.lang.String,com.google.cloud.bigquery.BigQuery.JobOption...)"
  id: "load(com.google.cloud.bigquery.FormatOptions,java.lang.String,com.google.cloud.bigquery.BigQuery.JobOption...)"
  parent: "com.google.cloud.bigquery.Table"
  langs:
  - "java"
  name: "load(FormatOptions format, String sourceUri, BigQuery.JobOption[] options)"
  nameWithType: "Table.load(FormatOptions format, String sourceUri, BigQuery.JobOption[] options)"
  fullName: "com.google.cloud.bigquery.Table.load(FormatOptions format, String sourceUri, BigQuery.JobOption[] options)"
  overload: "com.google.cloud.bigquery.Table.load*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Starts a BigQuery Job to load data into the current table from the provided source URI. Returns the started <xref uid=\"com.google.cloud.bigquery.Job\" data-throw-if-not-resolved=\"false\">Job</xref> object.\n\nExample loading data from a single Google Cloud Storage file.\n\n```java\nString sourceUri = \"gs://my_bucket/filename.csv\";\n Job job = table.load(FormatOptions.csv(), sourceUri);\n // Wait for the job to complete\n try {\n   Job completedJob = job.waitFor(RetryOption.initialRetryDelay(Duration.ofSeconds(1)),\n             RetryOption.totalTimeout(Duration.ofMinutes(3)));\n   if (completedJob != null && completedJob.getStatus().getError() == null) {\n     // Job completed successfully\n   } else {\n     // Handle error case\n   }\n } catch (InterruptedException e) {\n   // Handle interrupted wait\n }\n```"
  syntax:
    content: "public Job load(FormatOptions format, String sourceUri, BigQuery.JobOption[] options)"
    parameters:
    - id: "format"
      type: "com.google.cloud.bigquery.FormatOptions"
      description: "the format of the data to load"
    - id: "sourceUri"
      type: "java.lang.String"
      description: "the fully-qualified Google Cloud Storage URI (e.g. gs://bucket/path) from\n     which to load the data"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.JobOption[]"
      description: "job options"
    return:
      type: "com.google.cloud.bigquery.Job"
  exceptions:
  - type: "com.google.cloud.bigquery.BigQueryException"
    description: "upon failure"
- uid: "com.google.cloud.bigquery.Table.load(com.google.cloud.bigquery.FormatOptions,java.util.List<java.lang.String>,com.google.cloud.bigquery.BigQuery.JobOption...)"
  id: "load(com.google.cloud.bigquery.FormatOptions,java.util.List<java.lang.String>,com.google.cloud.bigquery.BigQuery.JobOption...)"
  parent: "com.google.cloud.bigquery.Table"
  langs:
  - "java"
  name: "load(FormatOptions format, List<String> sourceUris, BigQuery.JobOption[] options)"
  nameWithType: "Table.load(FormatOptions format, List<String> sourceUris, BigQuery.JobOption[] options)"
  fullName: "com.google.cloud.bigquery.Table.load(FormatOptions format, List<String> sourceUris, BigQuery.JobOption[] options)"
  overload: "com.google.cloud.bigquery.Table.load*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Starts a BigQuery Job to load data into the current table from the provided source URIs. Returns the started <xref uid=\"com.google.cloud.bigquery.Job\" data-throw-if-not-resolved=\"false\">Job</xref> object.\n\nExample loading data from a list of Google Cloud Storage files.\n\n```java\nString gcsUrl1 = \"gs://my_bucket/filename1.csv\";\n String gcsUrl2 = \"gs://my_bucket/filename2.csv\";\n List sourceUris = new ArrayList<>();\n sourceUris.add(gcsUrl1);\n sourceUris.add(gcsUrl2);\n Job job = table.load(FormatOptions.csv(), sourceUris);\n // Wait for the job to complete\n try {\n   Job completedJob = job.waitFor(RetryOption.initialRetryDelay(Duration.ofSeconds(1)),\n       RetryOption.totalTimeout(Duration.ofMinutes(3)));\n   if (completedJob != null && completedJob.getStatus().getError() == null) {\n     // Job completed successfully\n   } else {\n     // Handle error case\n   }\n } catch (InterruptedException e) {\n   // Handle interrupted wait\n }\n```"
  syntax:
    content: "public Job load(FormatOptions format, List<String> sourceUris, BigQuery.JobOption[] options)"
    parameters:
    - id: "format"
      type: "com.google.cloud.bigquery.FormatOptions"
      description: "the format of the exported data"
    - id: "sourceUris"
      type: "java.util.List<java.lang.String>"
      description: "the fully-qualified Google Cloud Storage URIs (e.g. gs://bucket/path) from\n     which to load the data"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.JobOption[]"
      description: "job options"
    return:
      type: "com.google.cloud.bigquery.Job"
  exceptions:
  - type: "com.google.cloud.bigquery.BigQueryException"
    description: "upon failure"
- uid: "com.google.cloud.bigquery.Table.reload(com.google.cloud.bigquery.BigQuery.TableOption...)"
  id: "reload(com.google.cloud.bigquery.BigQuery.TableOption...)"
  parent: "com.google.cloud.bigquery.Table"
  langs:
  - "java"
  name: "reload(BigQuery.TableOption[] options)"
  nameWithType: "Table.reload(BigQuery.TableOption[] options)"
  fullName: "com.google.cloud.bigquery.Table.reload(BigQuery.TableOption[] options)"
  overload: "com.google.cloud.bigquery.Table.reload*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Fetches current table's latest information. Returns `null` if the table does not exist.\n\nExample of fetching the table's latest information, specifying particular table fields to get.\n\n```java\nTableField field1 = TableField.LAST_MODIFIED_TIME;\n TableField field2 = TableField.NUM_ROWS;\n Table latestTable = table.reload(TableOption.fields(field1, field2));\n if (latestTable == null) {\n   // the table was not found\n }\n```"
  syntax:
    content: "public Table reload(BigQuery.TableOption[] options)"
    parameters:
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.TableOption[]"
      description: "table options"
    return:
      type: "com.google.cloud.bigquery.Table"
      description: "a <code>Table</code> object with latest information or <code>null</code> if not found"
- uid: "com.google.cloud.bigquery.Table.toBuilder()"
  id: "toBuilder()"
  parent: "com.google.cloud.bigquery.Table"
  langs:
  - "java"
  name: "toBuilder()"
  nameWithType: "Table.toBuilder()"
  fullName: "com.google.cloud.bigquery.Table.toBuilder()"
  overload: "com.google.cloud.bigquery.Table.toBuilder*"
  overridden: "com.google.cloud.bigquery.TableInfo.toBuilder()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a builder for the table object."
  syntax:
    content: "public Table.Builder toBuilder()"
    return:
      type: "com.google.cloud.bigquery.Table.Builder"
- uid: "com.google.cloud.bigquery.Table.update(com.google.cloud.bigquery.BigQuery.TableOption...)"
  id: "update(com.google.cloud.bigquery.BigQuery.TableOption...)"
  parent: "com.google.cloud.bigquery.Table"
  langs:
  - "java"
  name: "update(BigQuery.TableOption[] options)"
  nameWithType: "Table.update(BigQuery.TableOption[] options)"
  fullName: "com.google.cloud.bigquery.Table.update(BigQuery.TableOption[] options)"
  overload: "com.google.cloud.bigquery.Table.update*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Updates the table's information with this table's information. Dataset's and table's user-defined ids cannot be changed. A new `Table` object is returned.\n\nExample of updating the table's information.\n\n```java\nTable updatedTable = table.toBuilder().setDescription(\"new description\").build().update();\n```"
  syntax:
    content: "public Table update(BigQuery.TableOption[] options)"
    parameters:
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.TableOption[]"
      description: "dataset options"
    return:
      type: "com.google.cloud.bigquery.Table"
      description: "a <code>Table</code> object with updated information"
references:
- uid: "com.google.cloud.bigquery.BigQuery"
  name: "BigQuery"
  nameWithType: "BigQuery"
  fullName: "com.google.cloud.bigquery.BigQuery"
- uid: "com.google.cloud.bigquery.TableInfo.BuilderImpl"
  spec.java:
  - uid: "com.google.cloud.bigquery.TableInfo.BuilderImpl"
    name: "BuilderImpl"
    fullName: "com.google.cloud.bigquery.TableInfo.BuilderImpl"
- uid: "com.google.cloud.bigquery.Table.Table*"
  name: "Table"
  nameWithType: "Table.Table"
  fullName: "com.google.cloud.bigquery.Table.Table"
  package: "com.google.cloud.bigquery"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.google.cloud.bigquery.Table.exists*"
  name: "exists"
  nameWithType: "Table.exists"
  fullName: "com.google.cloud.bigquery.Table.exists"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.BigQuery.TableOption[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.BigQuery.TableOption"
    name: "TableOption"
    fullName: "com.google.cloud.bigquery.BigQuery.TableOption"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.cloud.bigquery.Table.reload*"
  name: "reload"
  nameWithType: "Table.reload"
  fullName: "com.google.cloud.bigquery.Table.reload"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Table.update*"
  name: "update"
  nameWithType: "Table.update"
  fullName: "com.google.cloud.bigquery.Table.update"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Table.delete*"
  name: "delete"
  nameWithType: "Table.delete"
  fullName: "com.google.cloud.bigquery.Table.delete"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.BigQueryException"
  name: "BigQueryException"
  nameWithType: "BigQueryException"
  fullName: "com.google.cloud.bigquery.BigQueryException"
- uid: "java.lang.Iterable<com.google.cloud.bigquery.InsertAllRequest.RowToInsert>"
  spec.java:
  - uid: "java.lang.Iterable"
    name: "Iterable"
    fullName: "java.lang.Iterable"
  - name: "<"
    fullName: "<"
  - uid: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert"
    name: "RowToInsert"
    fullName: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.InsertAllResponse"
  name: "InsertAllResponse"
  nameWithType: "InsertAllResponse"
  fullName: "com.google.cloud.bigquery.InsertAllResponse"
- uid: "com.google.cloud.bigquery.Table.insert*"
  name: "insert"
  nameWithType: "Table.insert"
  fullName: "com.google.cloud.bigquery.Table.insert"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.BigQuery.TableDataListOption[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.BigQuery.TableDataListOption"
    name: "TableDataListOption"
    fullName: "com.google.cloud.bigquery.BigQuery.TableDataListOption"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.cloud.bigquery.TableResult"
  name: "TableResult"
  nameWithType: "TableResult"
  fullName: "com.google.cloud.bigquery.TableResult"
- uid: "com.google.cloud.bigquery.Table.list*"
  name: "list"
  nameWithType: "Table.list"
  fullName: "com.google.cloud.bigquery.Table.list"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Schema"
  name: "Schema"
  nameWithType: "Schema"
  fullName: "com.google.cloud.bigquery.Schema"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.BigQuery.JobOption[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.BigQuery.JobOption"
    name: "JobOption"
    fullName: "com.google.cloud.bigquery.BigQuery.JobOption"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.cloud.bigquery.Job"
  name: "Job"
  nameWithType: "Job"
  fullName: "com.google.cloud.bigquery.Job"
- uid: "com.google.cloud.bigquery.Table.copy*"
  name: "copy"
  nameWithType: "Table.copy"
  fullName: "com.google.cloud.bigquery.Table.copy"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TableId"
  name: "TableId"
  nameWithType: "TableId"
  fullName: "com.google.cloud.bigquery.TableId"
- uid: "com.google.cloud.bigquery.Table.extract*"
  name: "extract"
  nameWithType: "Table.extract"
  fullName: "com.google.cloud.bigquery.Table.extract"
  package: "com.google.cloud.bigquery"
- uid: "java.util.List<java.lang.String>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.FormatOptions"
  name: "FormatOptions"
  nameWithType: "FormatOptions"
  fullName: "com.google.cloud.bigquery.FormatOptions"
- uid: "com.google.cloud.bigquery.Table.load*"
  name: "load"
  nameWithType: "Table.load"
  fullName: "com.google.cloud.bigquery.Table.load"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Table.getBigQuery*"
  name: "getBigQuery"
  nameWithType: "Table.getBigQuery"
  fullName: "com.google.cloud.bigquery.Table.getBigQuery"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Table.Builder"
  name: "Table.Builder"
  nameWithType: "Table.Builder"
  fullName: "com.google.cloud.bigquery.Table.Builder"
- uid: "com.google.cloud.bigquery.Table.toBuilder*"
  name: "toBuilder"
  nameWithType: "Table.toBuilder"
  fullName: "com.google.cloud.bigquery.Table.toBuilder"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "com.google.cloud.bigquery.Table.equals*"
  name: "equals"
  nameWithType: "Table.equals"
  fullName: "com.google.cloud.bigquery.Table.equals"
  package: "com.google.cloud.bigquery"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.google.cloud.bigquery.Table.hashCode*"
  name: "hashCode"
  nameWithType: "Table.hashCode"
  fullName: "com.google.cloud.bigquery.Table.hashCode"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TableInfo"
  name: "TableInfo"
  nameWithType: "TableInfo"
  fullName: "com.google.cloud.bigquery.TableInfo"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "com.google.cloud.bigquery.TableInfo.getDescription()"
  name: "TableInfo.getDescription()"
  nameWithType: "TableInfo.getDescription()"
  fullName: "com.google.cloud.bigquery.TableInfo.getDescription()"
- uid: "com.google.cloud.bigquery.TableInfo.newBuilder(com.google.cloud.bigquery.TableId,com.google.cloud.bigquery.TableDefinition)"
  name: "TableInfo.newBuilder(TableId,TableDefinition)"
  nameWithType: "TableInfo.newBuilder(TableId,TableDefinition)"
  fullName: "com.google.cloud.bigquery.TableInfo.newBuilder(com.google.cloud.bigquery.TableId,com.google.cloud.bigquery.TableDefinition)"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "com.google.cloud.bigquery.TableInfo.toString()"
  name: "TableInfo.toString()"
  nameWithType: "TableInfo.toString()"
  fullName: "com.google.cloud.bigquery.TableInfo.toString()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "com.google.cloud.bigquery.TableInfo.getGeneratedId()"
  name: "TableInfo.getGeneratedId()"
  nameWithType: "TableInfo.getGeneratedId()"
  fullName: "com.google.cloud.bigquery.TableInfo.getGeneratedId()"
- uid: "com.google.cloud.bigquery.TableInfo.getFriendlyName()"
  name: "TableInfo.getFriendlyName()"
  nameWithType: "TableInfo.getFriendlyName()"
  fullName: "com.google.cloud.bigquery.TableInfo.getFriendlyName()"
- uid: "com.google.cloud.bigquery.TableInfo.getEtag()"
  name: "TableInfo.getEtag()"
  nameWithType: "TableInfo.getEtag()"
  fullName: "com.google.cloud.bigquery.TableInfo.getEtag()"
- uid: "com.google.cloud.bigquery.TableInfo.getNumLongTermBytes()"
  name: "TableInfo.getNumLongTermBytes()"
  nameWithType: "TableInfo.getNumLongTermBytes()"
  fullName: "com.google.cloud.bigquery.TableInfo.getNumLongTermBytes()"
- uid: "com.google.cloud.bigquery.TableInfo.getNumBytes()"
  name: "TableInfo.getNumBytes()"
  nameWithType: "TableInfo.getNumBytes()"
  fullName: "com.google.cloud.bigquery.TableInfo.getNumBytes()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "com.google.cloud.bigquery.TableInfo.getNumRows()"
  name: "TableInfo.getNumRows()"
  nameWithType: "TableInfo.getNumRows()"
  fullName: "com.google.cloud.bigquery.TableInfo.getNumRows()"
- uid: "com.google.cloud.bigquery.TableInfo.getRequirePartitionFilter()"
  name: "TableInfo.getRequirePartitionFilter()"
  nameWithType: "TableInfo.getRequirePartitionFilter()"
  fullName: "com.google.cloud.bigquery.TableInfo.getRequirePartitionFilter()"
- uid: "com.google.cloud.bigquery.TableInfo.toBuilder()"
  name: "TableInfo.toBuilder()"
  nameWithType: "TableInfo.toBuilder()"
  fullName: "com.google.cloud.bigquery.TableInfo.toBuilder()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "com.google.cloud.bigquery.TableInfo.getExpirationTime()"
  name: "TableInfo.getExpirationTime()"
  nameWithType: "TableInfo.getExpirationTime()"
  fullName: "com.google.cloud.bigquery.TableInfo.getExpirationTime()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "com.google.cloud.bigquery.TableInfo.getCreationTime()"
  name: "TableInfo.getCreationTime()"
  nameWithType: "TableInfo.getCreationTime()"
  fullName: "com.google.cloud.bigquery.TableInfo.getCreationTime()"
- uid: "com.google.cloud.bigquery.TableInfo.getLastModifiedTime()"
  name: "TableInfo.getLastModifiedTime()"
  nameWithType: "TableInfo.getLastModifiedTime()"
  fullName: "com.google.cloud.bigquery.TableInfo.getLastModifiedTime()"
- uid: "com.google.cloud.bigquery.TableInfo.<T>getDefinition()"
  name: "TableInfo.<T>getDefinition()"
  nameWithType: "TableInfo.<T>getDefinition()"
  fullName: "com.google.cloud.bigquery.TableInfo.<T>getDefinition()"
- uid: "com.google.cloud.bigquery.TableInfo.equals(java.lang.Object)"
  name: "TableInfo.equals(Object)"
  nameWithType: "TableInfo.equals(Object)"
  fullName: "com.google.cloud.bigquery.TableInfo.equals(java.lang.Object)"
- uid: "com.google.cloud.bigquery.TableInfo.getLabels()"
  name: "TableInfo.getLabels()"
  nameWithType: "TableInfo.getLabels()"
  fullName: "com.google.cloud.bigquery.TableInfo.getLabels()"
- uid: "com.google.cloud.bigquery.TableInfo.of(com.google.cloud.bigquery.TableId,com.google.cloud.bigquery.TableDefinition)"
  name: "TableInfo.of(TableId,TableDefinition)"
  nameWithType: "TableInfo.of(TableId,TableDefinition)"
  fullName: "com.google.cloud.bigquery.TableInfo.of(com.google.cloud.bigquery.TableId,com.google.cloud.bigquery.TableDefinition)"
- uid: "com.google.cloud.bigquery.TableInfo.getEncryptionConfiguration()"
  name: "TableInfo.getEncryptionConfiguration()"
  nameWithType: "TableInfo.getEncryptionConfiguration()"
  fullName: "com.google.cloud.bigquery.TableInfo.getEncryptionConfiguration()"
- uid: "com.google.cloud.bigquery.TableInfo.getTableId()"
  name: "TableInfo.getTableId()"
  nameWithType: "TableInfo.getTableId()"
  fullName: "com.google.cloud.bigquery.TableInfo.getTableId()"
- uid: "com.google.cloud.bigquery.TableInfo.hashCode()"
  name: "TableInfo.hashCode()"
  nameWithType: "TableInfo.hashCode()"
  fullName: "com.google.cloud.bigquery.TableInfo.hashCode()"
- uid: "com.google.cloud.bigquery.TableInfo.getSelfLink()"
  name: "TableInfo.getSelfLink()"
  nameWithType: "TableInfo.getSelfLink()"
  fullName: "com.google.cloud.bigquery.TableInfo.getSelfLink()"
- uid: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert"
  name: "InsertAllRequest.RowToInsert"
  nameWithType: "InsertAllRequest.RowToInsert"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert"
- uid: "java.lang.Iterable"
  name: "Iterable"
  nameWithType: "Iterable"
  fullName: "java.lang.Iterable"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "T>getDefinition()"
  name: "T>getDefinition()"
  nameWithType: "T>getDefinition()"
  fullName: "T>getDefinition()"
- uid: "com.google.cloud.bigquery.TableInfo."
  name: "TableInfo."
  nameWithType: "TableInfo."
  fullName: "com.google.cloud.bigquery.TableInfo."
