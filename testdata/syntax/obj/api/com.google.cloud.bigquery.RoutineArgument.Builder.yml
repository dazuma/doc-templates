### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.RoutineArgument.Builder"
  id: "Builder"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.RoutineArgument.Builder.Builder()"
  - "com.google.cloud.bigquery.RoutineArgument.Builder.build()"
  - "com.google.cloud.bigquery.RoutineArgument.Builder.setDataType(com.google.cloud.bigquery.StandardSQLDataType)"
  - "com.google.cloud.bigquery.RoutineArgument.Builder.setKind(java.lang.String)"
  - "com.google.cloud.bigquery.RoutineArgument.Builder.setMode(java.lang.String)"
  - "com.google.cloud.bigquery.RoutineArgument.Builder.setName(java.lang.String)"
  langs:
  - "java"
  name: "RoutineArgument.Builder"
  nameWithType: "RoutineArgument.Builder"
  fullName: "com.google.cloud.bigquery.RoutineArgument.Builder"
  type: "Class"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public abstract static class RoutineArgument.Builder"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.RoutineArgument.Builder.Builder()"
  id: "Builder()"
  parent: "com.google.cloud.bigquery.RoutineArgument.Builder"
  langs:
  - "java"
  name: "Builder()"
  nameWithType: "RoutineArgument.Builder.Builder()"
  fullName: "com.google.cloud.bigquery.RoutineArgument.Builder.Builder()"
  overload: "com.google.cloud.bigquery.RoutineArgument.Builder.Builder*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public Builder()"
- uid: "com.google.cloud.bigquery.RoutineArgument.Builder.build()"
  id: "build()"
  parent: "com.google.cloud.bigquery.RoutineArgument.Builder"
  langs:
  - "java"
  name: "build()"
  nameWithType: "RoutineArgument.Builder.build()"
  fullName: "com.google.cloud.bigquery.RoutineArgument.Builder.build()"
  overload: "com.google.cloud.bigquery.RoutineArgument.Builder.build*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Creates a `RoutineArgument` object."
  syntax:
    content: "public abstract RoutineArgument build()"
    return:
      type: "com.google.cloud.bigquery.RoutineArgument"
- uid: "com.google.cloud.bigquery.RoutineArgument.Builder.setDataType(com.google.cloud.bigquery.StandardSQLDataType)"
  id: "setDataType(com.google.cloud.bigquery.StandardSQLDataType)"
  parent: "com.google.cloud.bigquery.RoutineArgument.Builder"
  langs:
  - "java"
  name: "setDataType(StandardSQLDataType dataType)"
  nameWithType: "RoutineArgument.Builder.setDataType(StandardSQLDataType dataType)"
  fullName: "com.google.cloud.bigquery.RoutineArgument.Builder.setDataType(StandardSQLDataType dataType)"
  overload: "com.google.cloud.bigquery.RoutineArgument.Builder.setDataType*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the data type specification for the argument. It is required except for ANY\\_TYPE argument kinds."
  syntax:
    content: "public abstract RoutineArgument.Builder setDataType(StandardSQLDataType dataType)"
    parameters:
    - id: "dataType"
      type: "com.google.cloud.bigquery.StandardSQLDataType"
    return:
      type: "com.google.cloud.bigquery.RoutineArgument.Builder"
- uid: "com.google.cloud.bigquery.RoutineArgument.Builder.setKind(java.lang.String)"
  id: "setKind(java.lang.String)"
  parent: "com.google.cloud.bigquery.RoutineArgument.Builder"
  langs:
  - "java"
  name: "setKind(String kind)"
  nameWithType: "RoutineArgument.Builder.setKind(String kind)"
  fullName: "com.google.cloud.bigquery.RoutineArgument.Builder.setKind(String kind)"
  overload: "com.google.cloud.bigquery.RoutineArgument.Builder.setKind*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the kind of argument.\n\nA FIXED\\_TYPE argument is a fully specified type. It can be a struct or an array, but not a table.\n\nAn ANY\\_TYPE argument is any type. It can be a struct or an array, but not a table."
  syntax:
    content: "public abstract RoutineArgument.Builder setKind(String kind)"
    parameters:
    - id: "kind"
      type: "java.lang.String"
    return:
      type: "com.google.cloud.bigquery.RoutineArgument.Builder"
- uid: "com.google.cloud.bigquery.RoutineArgument.Builder.setMode(java.lang.String)"
  id: "setMode(java.lang.String)"
  parent: "com.google.cloud.bigquery.RoutineArgument.Builder"
  langs:
  - "java"
  name: "setMode(String mode)"
  nameWithType: "RoutineArgument.Builder.setMode(String mode)"
  fullName: "com.google.cloud.bigquery.RoutineArgument.Builder.setMode(String mode)"
  overload: "com.google.cloud.bigquery.RoutineArgument.Builder.setMode*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Optionally specifies the input/output mode of the argument.\n\nAn IN mode argument is input-only. An OUT mode argument is output-only. An INOUT mode argument is both an input and output."
  syntax:
    content: "public abstract RoutineArgument.Builder setMode(String mode)"
    parameters:
    - id: "mode"
      type: "java.lang.String"
    return:
      type: "com.google.cloud.bigquery.RoutineArgument.Builder"
- uid: "com.google.cloud.bigquery.RoutineArgument.Builder.setName(java.lang.String)"
  id: "setName(java.lang.String)"
  parent: "com.google.cloud.bigquery.RoutineArgument.Builder"
  langs:
  - "java"
  name: "setName(String name)"
  nameWithType: "RoutineArgument.Builder.setName(String name)"
  fullName: "com.google.cloud.bigquery.RoutineArgument.Builder.setName(String name)"
  overload: "com.google.cloud.bigquery.RoutineArgument.Builder.setName*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the argument name."
  syntax:
    content: "public abstract RoutineArgument.Builder setName(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
    return:
      type: "com.google.cloud.bigquery.RoutineArgument.Builder"
references:
- uid: "com.google.cloud.bigquery.RoutineArgument.Builder.Builder*"
  name: "Builder"
  nameWithType: "RoutineArgument.Builder.Builder"
  fullName: "com.google.cloud.bigquery.RoutineArgument.Builder.Builder"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.RoutineArgument.Builder.setName*"
  name: "setName"
  nameWithType: "RoutineArgument.Builder.setName"
  fullName: "com.google.cloud.bigquery.RoutineArgument.Builder.setName"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.RoutineArgument.Builder.setKind*"
  name: "setKind"
  nameWithType: "RoutineArgument.Builder.setKind"
  fullName: "com.google.cloud.bigquery.RoutineArgument.Builder.setKind"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.RoutineArgument.Builder.setMode*"
  name: "setMode"
  nameWithType: "RoutineArgument.Builder.setMode"
  fullName: "com.google.cloud.bigquery.RoutineArgument.Builder.setMode"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.StandardSQLDataType"
  name: "StandardSQLDataType"
  nameWithType: "StandardSQLDataType"
  fullName: "com.google.cloud.bigquery.StandardSQLDataType"
- uid: "com.google.cloud.bigquery.RoutineArgument.Builder.setDataType*"
  name: "setDataType"
  nameWithType: "RoutineArgument.Builder.setDataType"
  fullName: "com.google.cloud.bigquery.RoutineArgument.Builder.setDataType"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.RoutineArgument"
  name: "RoutineArgument"
  nameWithType: "RoutineArgument"
  fullName: "com.google.cloud.bigquery.RoutineArgument"
- uid: "com.google.cloud.bigquery.RoutineArgument.Builder.build*"
  name: "build"
  nameWithType: "RoutineArgument.Builder.build"
  fullName: "com.google.cloud.bigquery.RoutineArgument.Builder.build"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
