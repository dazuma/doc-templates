### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
  id: "Builder"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.ExternalTableDefinition.Builder.Builder()"
  - "com.google.cloud.bigquery.ExternalTableDefinition.Builder.build()"
  - "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setAutodetect(java.lang.Boolean)"
  - "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setCompression(java.lang.String)"
  - "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setConnectionId(java.lang.String)"
  - "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setFormatOptions(com.google.cloud.bigquery.FormatOptions)"
  - "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setHivePartitioningOptions(com.google.cloud.bigquery.HivePartitioningOptions)"
  - "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setIgnoreUnknownValues(java.lang.Boolean)"
  - "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setMaxBadRecords(java.lang.Integer)"
  - "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setSchema(com.google.cloud.bigquery.Schema)"
  - "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setSourceUris(java.util.List<java.lang.String>)"
  - "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setType(com.google.cloud.bigquery.TableDefinition.Type)"
  langs:
  - "java"
  name: "ExternalTableDefinition.Builder"
  nameWithType: "ExternalTableDefinition.Builder"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
  type: "Class"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public abstract static class ExternalTableDefinition.Builder extends TableDefinition.Builder<ExternalTableDefinition,ExternalTableDefinition.Builder>"
  inheritance:
  - "java.lang.Object"
  - "com.google.cloud.bigquery.TableDefinition.Builder"
  inheritedMembers:
  - "com.google.cloud.bigquery.TableDefinition.Builder.build()"
  - "com.google.cloud.bigquery.TableDefinition.Builder.setSchema(com.google.cloud.bigquery.Schema)"
  - "com.google.cloud.bigquery.TableDefinition.Builder.setType(com.google.cloud.bigquery.TableDefinition.Type)"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.Builder()"
  id: "Builder()"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
  langs:
  - "java"
  name: "Builder()"
  nameWithType: "ExternalTableDefinition.Builder.Builder()"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.Builder()"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.Builder*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public Builder()"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.build()"
  id: "build()"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
  langs:
  - "java"
  name: "build()"
  nameWithType: "ExternalTableDefinition.Builder.build()"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.build()"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.build*"
  overridden: "com.google.cloud.bigquery.TableDefinition.Builder.build()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Creates an `ExternalTableDefinition` object."
  syntax:
    content: "public abstract ExternalTableDefinition build()"
    return:
      type: "com.google.cloud.bigquery.ExternalTableDefinition"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setAutodetect(java.lang.Boolean)"
  id: "setAutodetect(java.lang.Boolean)"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
  langs:
  - "java"
  name: "setAutodetect(Boolean autodetect)"
  nameWithType: "ExternalTableDefinition.Builder.setAutodetect(Boolean autodetect)"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setAutodetect(Boolean autodetect)"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setAutodetect*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "\\[Experimental\\] Sets detection of schema and format options automatically. Any option specified explicitly will be honored."
  syntax:
    content: "public abstract ExternalTableDefinition.Builder setAutodetect(Boolean autodetect)"
    parameters:
    - id: "autodetect"
      type: "java.lang.Boolean"
    return:
      type: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setCompression(java.lang.String)"
  id: "setCompression(java.lang.String)"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
  langs:
  - "java"
  name: "setCompression(String compression)"
  nameWithType: "ExternalTableDefinition.Builder.setCompression(String compression)"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setCompression(String compression)"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setCompression*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets compression type of the data source. By default no compression is assumed."
  syntax:
    content: "public abstract ExternalTableDefinition.Builder setCompression(String compression)"
    parameters:
    - id: "compression"
      type: "java.lang.String"
    return:
      type: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setConnectionId(java.lang.String)"
  id: "setConnectionId(java.lang.String)"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
  langs:
  - "java"
  name: "setConnectionId(String connectionId)"
  nameWithType: "ExternalTableDefinition.Builder.setConnectionId(String connectionId)"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setConnectionId(String connectionId)"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setConnectionId*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "\\[Optional, Trusted Tester\\] connectionId for external data source. The value may be `null`."
  syntax:
    content: "public abstract ExternalTableDefinition.Builder setConnectionId(String connectionId)"
    parameters:
    - id: "connectionId"
      type: "java.lang.String"
    return:
      type: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setFormatOptions(com.google.cloud.bigquery.FormatOptions)"
  id: "setFormatOptions(com.google.cloud.bigquery.FormatOptions)"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
  langs:
  - "java"
  name: "setFormatOptions(FormatOptions formatOptions)"
  nameWithType: "ExternalTableDefinition.Builder.setFormatOptions(FormatOptions formatOptions)"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setFormatOptions(FormatOptions formatOptions)"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setFormatOptions*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the source format, and possibly some parsing options, of the external data. Supported formats are `CSV` and `NEWLINE_DELIMITED_JSON`.\n\n[ Source Format][Source Format]\n\n\n[Source Format]: https://cloud.google.com/bigquery/docs/reference/v2/tables#externalDataConfiguration.sourceFormat"
  syntax:
    content: "public ExternalTableDefinition.Builder setFormatOptions(FormatOptions formatOptions)"
    parameters:
    - id: "formatOptions"
      type: "com.google.cloud.bigquery.FormatOptions"
    return:
      type: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setHivePartitioningOptions(com.google.cloud.bigquery.HivePartitioningOptions)"
  id: "setHivePartitioningOptions(com.google.cloud.bigquery.HivePartitioningOptions)"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
  langs:
  - "java"
  name: "setHivePartitioningOptions(HivePartitioningOptions hivePartitioningOptions)"
  nameWithType: "ExternalTableDefinition.Builder.setHivePartitioningOptions(HivePartitioningOptions hivePartitioningOptions)"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setHivePartitioningOptions(HivePartitioningOptions hivePartitioningOptions)"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setHivePartitioningOptions*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the table Hive partitioning options."
  syntax:
    content: "public ExternalTableDefinition.Builder setHivePartitioningOptions(HivePartitioningOptions hivePartitioningOptions)"
    parameters:
    - id: "hivePartitioningOptions"
      type: "com.google.cloud.bigquery.HivePartitioningOptions"
    return:
      type: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setIgnoreUnknownValues(java.lang.Boolean)"
  id: "setIgnoreUnknownValues(java.lang.Boolean)"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
  langs:
  - "java"
  name: "setIgnoreUnknownValues(Boolean ignoreUnknownValues)"
  nameWithType: "ExternalTableDefinition.Builder.setIgnoreUnknownValues(Boolean ignoreUnknownValues)"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setIgnoreUnknownValues(Boolean ignoreUnknownValues)"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setIgnoreUnknownValues*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets whether BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The value set with <xref uid=\"com.google.cloud.bigquery.ExternalTableDefinition.Builder.setFormatOptions(com.google.cloud.bigquery.FormatOptions)\" data-throw-if-not-resolved=\"false\">#setFormatOptions(FormatOptions)</xref> property determines what BigQuery treats as an extra value."
  syntax:
    content: "public abstract ExternalTableDefinition.Builder setIgnoreUnknownValues(Boolean ignoreUnknownValues)"
    parameters:
    - id: "ignoreUnknownValues"
      type: "java.lang.Boolean"
    return:
      type: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setMaxBadRecords(java.lang.Integer)"
  id: "setMaxBadRecords(java.lang.Integer)"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
  langs:
  - "java"
  name: "setMaxBadRecords(Integer maxBadRecords)"
  nameWithType: "ExternalTableDefinition.Builder.setMaxBadRecords(Integer maxBadRecords)"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setMaxBadRecords(Integer maxBadRecords)"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setMaxBadRecords*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result. The default value is 0, which requires that all records are valid."
  syntax:
    content: "public abstract ExternalTableDefinition.Builder setMaxBadRecords(Integer maxBadRecords)"
    parameters:
    - id: "maxBadRecords"
      type: "java.lang.Integer"
    return:
      type: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setSchema(com.google.cloud.bigquery.Schema)"
  id: "setSchema(com.google.cloud.bigquery.Schema)"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
  langs:
  - "java"
  name: "setSchema(Schema schema)"
  nameWithType: "ExternalTableDefinition.Builder.setSchema(Schema schema)"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setSchema(Schema schema)"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setSchema*"
  overridden: "com.google.cloud.bigquery.TableDefinition.Builder.setSchema(com.google.cloud.bigquery.Schema)"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the table schema."
  syntax:
    content: "public abstract ExternalTableDefinition.Builder setSchema(Schema schema)"
    parameters:
    - id: "schema"
      type: "com.google.cloud.bigquery.Schema"
    return:
      type: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setSourceUris(java.util.List<java.lang.String>)"
  id: "setSourceUris(java.util.List<java.lang.String>)"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
  langs:
  - "java"
  name: "setSourceUris(List<String> sourceUris)"
  nameWithType: "ExternalTableDefinition.Builder.setSourceUris(List<String> sourceUris)"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setSourceUris(List<String> sourceUris)"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setSourceUris*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the fully-qualified URIs that point to your data in Google Cloud Storage (e.g. gs://bucket/path). Each URI can contain one '\\*' wildcard character that must come after the bucket's name. Size limits related to load jobs apply to external data sources, plus an additional limit of 10 GB maximum size across all URIs.\n\nFor Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table.\n\nFor Google Cloud Datastore backup URIs: Exactly one URI can be specified. Also, the '\\*' wildcard character is not allowed."
  syntax:
    content: "public ExternalTableDefinition.Builder setSourceUris(List<String> sourceUris)"
    parameters:
    - id: "sourceUris"
      type: "java.util.List<java.lang.String>"
    return:
      type: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setType(com.google.cloud.bigquery.TableDefinition.Type)"
  id: "setType(com.google.cloud.bigquery.TableDefinition.Type)"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
  langs:
  - "java"
  name: "setType(TableDefinition.Type type)"
  nameWithType: "ExternalTableDefinition.Builder.setType(TableDefinition.Type type)"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setType(TableDefinition.Type type)"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setType*"
  overridden: "com.google.cloud.bigquery.TableDefinition.Builder.setType(com.google.cloud.bigquery.TableDefinition.Type)"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public abstract ExternalTableDefinition.Builder setType(TableDefinition.Type type)"
    parameters:
    - id: "type"
      type: "com.google.cloud.bigquery.TableDefinition.Type"
    return:
      type: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
references:
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.Builder*"
  name: "Builder"
  nameWithType: "ExternalTableDefinition.Builder.Builder"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.Builder"
  package: "com.google.cloud.bigquery"
- uid: "java.util.List<java.lang.String>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setSourceUris*"
  name: "setSourceUris"
  nameWithType: "ExternalTableDefinition.Builder.setSourceUris"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setSourceUris"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.FormatOptions"
  name: "FormatOptions"
  nameWithType: "FormatOptions"
  fullName: "com.google.cloud.bigquery.FormatOptions"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setFormatOptions*"
  name: "setFormatOptions"
  nameWithType: "ExternalTableDefinition.Builder.setFormatOptions"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setFormatOptions"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Integer"
  spec.java:
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setMaxBadRecords*"
  name: "setMaxBadRecords"
  nameWithType: "ExternalTableDefinition.Builder.setMaxBadRecords"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setMaxBadRecords"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Boolean"
  spec.java:
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setIgnoreUnknownValues*"
  name: "setIgnoreUnknownValues"
  nameWithType: "ExternalTableDefinition.Builder.setIgnoreUnknownValues"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setIgnoreUnknownValues"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setCompression*"
  name: "setCompression"
  nameWithType: "ExternalTableDefinition.Builder.setCompression"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setCompression"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setConnectionId*"
  name: "setConnectionId"
  nameWithType: "ExternalTableDefinition.Builder.setConnectionId"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setConnectionId"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setAutodetect*"
  name: "setAutodetect"
  nameWithType: "ExternalTableDefinition.Builder.setAutodetect"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setAutodetect"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TableDefinition.Type"
  name: "TableDefinition.Type"
  nameWithType: "TableDefinition.Type"
  fullName: "com.google.cloud.bigquery.TableDefinition.Type"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setType*"
  name: "setType"
  nameWithType: "ExternalTableDefinition.Builder.setType"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setType"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Schema"
  name: "Schema"
  nameWithType: "Schema"
  fullName: "com.google.cloud.bigquery.Schema"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setSchema*"
  name: "setSchema"
  nameWithType: "ExternalTableDefinition.Builder.setSchema"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setSchema"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.HivePartitioningOptions"
  name: "HivePartitioningOptions"
  nameWithType: "HivePartitioningOptions"
  fullName: "com.google.cloud.bigquery.HivePartitioningOptions"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setHivePartitioningOptions*"
  name: "setHivePartitioningOptions"
  nameWithType: "ExternalTableDefinition.Builder.setHivePartitioningOptions"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.setHivePartitioningOptions"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition"
  name: "ExternalTableDefinition"
  nameWithType: "ExternalTableDefinition"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.build*"
  name: "build"
  nameWithType: "ExternalTableDefinition.Builder.build"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.Builder.build"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TableDefinition.Builder<com.google.cloud.bigquery.ExternalTableDefinition,com.google.cloud.bigquery.ExternalTableDefinition.Builder>"
  name: "TableDefinition.Builder<ExternalTableDefinition,ExternalTableDefinition.Builder>"
  nameWithType: "TableDefinition.Builder<ExternalTableDefinition,ExternalTableDefinition.Builder>"
  fullName: "com.google.cloud.bigquery.TableDefinition.Builder<com.google.cloud.bigquery.ExternalTableDefinition,com.google.cloud.bigquery.ExternalTableDefinition.Builder>"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "com.google.cloud.bigquery.TableDefinition.Builder.build()"
  name: "TableDefinition.Builder.build()"
  nameWithType: "TableDefinition.Builder.build()"
  fullName: "com.google.cloud.bigquery.TableDefinition.Builder.build()"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.google.cloud.bigquery.TableDefinition.Builder.setSchema(com.google.cloud.bigquery.Schema)"
  name: "TableDefinition.Builder.setSchema(Schema)"
  nameWithType: "TableDefinition.Builder.setSchema(Schema)"
  fullName: "com.google.cloud.bigquery.TableDefinition.Builder.setSchema(com.google.cloud.bigquery.Schema)"
- uid: "com.google.cloud.bigquery.TableDefinition.Builder.setType(com.google.cloud.bigquery.TableDefinition.Type)"
  name: "TableDefinition.Builder.setType(TableDefinition.Type)"
  nameWithType: "TableDefinition.Builder.setType(TableDefinition.Type)"
  fullName: "com.google.cloud.bigquery.TableDefinition.Builder.setType(com.google.cloud.bigquery.TableDefinition.Type)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "com.google.cloud.bigquery.TableDefinition.Builder"
  name: "TableDefinition.Builder"
  nameWithType: "TableDefinition.Builder"
  fullName: "com.google.cloud.bigquery.TableDefinition.Builder"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition,com.google.cloud.bigquery.ExternalTableDefinition.Builder"
  name: "ExternalTableDefinition,ExternalTableDefinition.Builder"
  nameWithType: "ExternalTableDefinition,ExternalTableDefinition.Builder"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition,com.google.cloud.bigquery.ExternalTableDefinition.Builder"
