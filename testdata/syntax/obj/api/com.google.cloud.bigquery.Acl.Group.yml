### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.Acl.Group"
  id: "Group"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.Acl.Group.Group(java.lang.String)"
  - "com.google.cloud.bigquery.Acl.Group.equals(java.lang.Object)"
  - "com.google.cloud.bigquery.Acl.Group.getIdentifier()"
  - "com.google.cloud.bigquery.Acl.Group.hashCode()"
  - "com.google.cloud.bigquery.Acl.Group.ofAllAuthenticatedUsers()"
  - "com.google.cloud.bigquery.Acl.Group.ofProjectOwners()"
  - "com.google.cloud.bigquery.Acl.Group.ofProjectReaders()"
  - "com.google.cloud.bigquery.Acl.Group.ofProjectWriters()"
  - "com.google.cloud.bigquery.Acl.Group.toString()"
  langs:
  - "java"
  name: "Acl.Group"
  nameWithType: "Acl.Group"
  fullName: "com.google.cloud.bigquery.Acl.Group"
  type: "Class"
  package: "com.google.cloud.bigquery"
  summary: "Class for a BigQuery Group entity. Objects of this class represent a group to granted access to. A Group entity can be created given the group's email or can be a special group: <xref uid=\"com.google.cloud.bigquery.Acl.Group.ofProjectOwners()\" data-throw-if-not-resolved=\"false\">#ofProjectOwners()</xref>, <xref uid=\"com.google.cloud.bigquery.Acl.Group.ofProjectReaders()\" data-throw-if-not-resolved=\"false\">#ofProjectReaders()</xref>, <xref uid=\"com.google.cloud.bigquery.Acl.Group.ofProjectWriters()\" data-throw-if-not-resolved=\"false\">#ofProjectWriters()</xref> or <xref uid=\"com.google.cloud.bigquery.Acl.Group.ofAllAuthenticatedUsers()\" data-throw-if-not-resolved=\"false\">#ofAllAuthenticatedUsers()</xref>."
  syntax:
    content: "public static final class Acl.Group extends Acl.Entity"
  inheritance:
  - "java.lang.Object"
  - "com.google.cloud.bigquery.Acl.Entity"
  inheritedMembers:
  - "com.google.cloud.bigquery.Acl.Entity.getType()"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.Acl.Group.Group(java.lang.String)"
  id: "Group(java.lang.String)"
  parent: "com.google.cloud.bigquery.Acl.Group"
  langs:
  - "java"
  name: "Group(String identifier)"
  nameWithType: "Acl.Group.Group(String identifier)"
  fullName: "com.google.cloud.bigquery.Acl.Group.Group(String identifier)"
  overload: "com.google.cloud.bigquery.Acl.Group.Group*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  summary: "Creates a Group entity given its identifier. Identifier can be either a [ special group identifier][special group identifier] or a group email.\n\n\n[special group identifier]: https://cloud.google.com/bigquery/docs/reference/v2/datasets#access.specialGroup"
  syntax:
    content: "public Group(String identifier)"
    parameters:
    - id: "identifier"
      type: "java.lang.String"
- uid: "com.google.cloud.bigquery.Acl.Group.equals(java.lang.Object)"
  id: "equals(java.lang.Object)"
  parent: "com.google.cloud.bigquery.Acl.Group"
  langs:
  - "java"
  name: "equals(Object obj)"
  nameWithType: "Acl.Group.equals(Object obj)"
  fullName: "com.google.cloud.bigquery.Acl.Group.equals(Object obj)"
  overload: "com.google.cloud.bigquery.Acl.Group.equals*"
  overridden: "java.lang.Object.equals(java.lang.Object)"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public boolean equals(Object obj)"
    parameters:
    - id: "obj"
      type: "java.lang.Object"
    return:
      type: "boolean"
- uid: "com.google.cloud.bigquery.Acl.Group.getIdentifier()"
  id: "getIdentifier()"
  parent: "com.google.cloud.bigquery.Acl.Group"
  langs:
  - "java"
  name: "getIdentifier()"
  nameWithType: "Acl.Group.getIdentifier()"
  fullName: "com.google.cloud.bigquery.Acl.Group.getIdentifier()"
  overload: "com.google.cloud.bigquery.Acl.Group.getIdentifier*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns group's identifier, can be either a [ special group identifier][special group identifier] or a group email.\n\n\n[special group identifier]: https://cloud.google.com/bigquery/docs/reference/v2/datasets#access.specialGroup"
  syntax:
    content: "public String getIdentifier()"
    return:
      type: "java.lang.String"
- uid: "com.google.cloud.bigquery.Acl.Group.hashCode()"
  id: "hashCode()"
  parent: "com.google.cloud.bigquery.Acl.Group"
  langs:
  - "java"
  name: "hashCode()"
  nameWithType: "Acl.Group.hashCode()"
  fullName: "com.google.cloud.bigquery.Acl.Group.hashCode()"
  overload: "com.google.cloud.bigquery.Acl.Group.hashCode*"
  overridden: "java.lang.Object.hashCode()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public int hashCode()"
    return:
      type: "int"
- uid: "com.google.cloud.bigquery.Acl.Group.ofAllAuthenticatedUsers()"
  id: "ofAllAuthenticatedUsers()"
  parent: "com.google.cloud.bigquery.Acl.Group"
  langs:
  - "java"
  name: "ofAllAuthenticatedUsers()"
  nameWithType: "Acl.Group.ofAllAuthenticatedUsers()"
  fullName: "com.google.cloud.bigquery.Acl.Group.ofAllAuthenticatedUsers()"
  overload: "com.google.cloud.bigquery.Acl.Group.ofAllAuthenticatedUsers*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a Group entity representing all BigQuery authenticated users."
  syntax:
    content: "public static Acl.Group ofAllAuthenticatedUsers()"
    return:
      type: "com.google.cloud.bigquery.Acl.Group"
- uid: "com.google.cloud.bigquery.Acl.Group.ofProjectOwners()"
  id: "ofProjectOwners()"
  parent: "com.google.cloud.bigquery.Acl.Group"
  langs:
  - "java"
  name: "ofProjectOwners()"
  nameWithType: "Acl.Group.ofProjectOwners()"
  fullName: "com.google.cloud.bigquery.Acl.Group.ofProjectOwners()"
  overload: "com.google.cloud.bigquery.Acl.Group.ofProjectOwners*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a Group entity representing all project's owners."
  syntax:
    content: "public static Acl.Group ofProjectOwners()"
    return:
      type: "com.google.cloud.bigquery.Acl.Group"
- uid: "com.google.cloud.bigquery.Acl.Group.ofProjectReaders()"
  id: "ofProjectReaders()"
  parent: "com.google.cloud.bigquery.Acl.Group"
  langs:
  - "java"
  name: "ofProjectReaders()"
  nameWithType: "Acl.Group.ofProjectReaders()"
  fullName: "com.google.cloud.bigquery.Acl.Group.ofProjectReaders()"
  overload: "com.google.cloud.bigquery.Acl.Group.ofProjectReaders*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a Group entity representing all project's readers."
  syntax:
    content: "public static Acl.Group ofProjectReaders()"
    return:
      type: "com.google.cloud.bigquery.Acl.Group"
- uid: "com.google.cloud.bigquery.Acl.Group.ofProjectWriters()"
  id: "ofProjectWriters()"
  parent: "com.google.cloud.bigquery.Acl.Group"
  langs:
  - "java"
  name: "ofProjectWriters()"
  nameWithType: "Acl.Group.ofProjectWriters()"
  fullName: "com.google.cloud.bigquery.Acl.Group.ofProjectWriters()"
  overload: "com.google.cloud.bigquery.Acl.Group.ofProjectWriters*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a Group entity representing all project's writers."
  syntax:
    content: "public static Acl.Group ofProjectWriters()"
    return:
      type: "com.google.cloud.bigquery.Acl.Group"
- uid: "com.google.cloud.bigquery.Acl.Group.toString()"
  id: "toString()"
  parent: "com.google.cloud.bigquery.Acl.Group"
  langs:
  - "java"
  name: "toString()"
  nameWithType: "Acl.Group.toString()"
  fullName: "com.google.cloud.bigquery.Acl.Group.toString()"
  overload: "com.google.cloud.bigquery.Acl.Group.toString*"
  overridden: "java.lang.Object.toString()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public String toString()"
    return:
      type: "java.lang.String"
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.Acl.Group.Group*"
  name: "Group"
  nameWithType: "Acl.Group.Group"
  fullName: "com.google.cloud.bigquery.Acl.Group.Group"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Acl.Group.getIdentifier*"
  name: "getIdentifier"
  nameWithType: "Acl.Group.getIdentifier"
  fullName: "com.google.cloud.bigquery.Acl.Group.getIdentifier"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.google.cloud.bigquery.Acl.Group.equals*"
  name: "equals"
  nameWithType: "Acl.Group.equals"
  fullName: "com.google.cloud.bigquery.Acl.Group.equals"
  package: "com.google.cloud.bigquery"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.google.cloud.bigquery.Acl.Group.hashCode*"
  name: "hashCode"
  nameWithType: "Acl.Group.hashCode"
  fullName: "com.google.cloud.bigquery.Acl.Group.hashCode"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Acl.Group.toString*"
  name: "toString"
  nameWithType: "Acl.Group.toString"
  fullName: "com.google.cloud.bigquery.Acl.Group.toString"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Acl.Group.ofProjectOwners*"
  name: "ofProjectOwners"
  nameWithType: "Acl.Group.ofProjectOwners"
  fullName: "com.google.cloud.bigquery.Acl.Group.ofProjectOwners"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Acl.Group.ofProjectReaders*"
  name: "ofProjectReaders"
  nameWithType: "Acl.Group.ofProjectReaders"
  fullName: "com.google.cloud.bigquery.Acl.Group.ofProjectReaders"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Acl.Group.ofProjectWriters*"
  name: "ofProjectWriters"
  nameWithType: "Acl.Group.ofProjectWriters"
  fullName: "com.google.cloud.bigquery.Acl.Group.ofProjectWriters"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Acl.Group.ofAllAuthenticatedUsers*"
  name: "ofAllAuthenticatedUsers"
  nameWithType: "Acl.Group.ofAllAuthenticatedUsers"
  fullName: "com.google.cloud.bigquery.Acl.Group.ofAllAuthenticatedUsers"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Acl.Entity"
  name: "Acl.Entity"
  nameWithType: "Acl.Entity"
  fullName: "com.google.cloud.bigquery.Acl.Entity"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "com.google.cloud.bigquery.Acl.Entity.getType()"
  name: "Acl.Entity.getType()"
  nameWithType: "Acl.Entity.getType()"
  fullName: "com.google.cloud.bigquery.Acl.Entity.getType()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
