### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.TableInfo"
  id: "TableInfo"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.TableInfo.<T>getDefinition()"
  - "com.google.cloud.bigquery.TableInfo.Builder"
  - "com.google.cloud.bigquery.TableInfo.equals(java.lang.Object)"
  - "com.google.cloud.bigquery.TableInfo.getCreationTime()"
  - "com.google.cloud.bigquery.TableInfo.getDescription()"
  - "com.google.cloud.bigquery.TableInfo.getEncryptionConfiguration()"
  - "com.google.cloud.bigquery.TableInfo.getEtag()"
  - "com.google.cloud.bigquery.TableInfo.getExpirationTime()"
  - "com.google.cloud.bigquery.TableInfo.getFriendlyName()"
  - "com.google.cloud.bigquery.TableInfo.getGeneratedId()"
  - "com.google.cloud.bigquery.TableInfo.getLabels()"
  - "com.google.cloud.bigquery.TableInfo.getLastModifiedTime()"
  - "com.google.cloud.bigquery.TableInfo.getNumBytes()"
  - "com.google.cloud.bigquery.TableInfo.getNumLongTermBytes()"
  - "com.google.cloud.bigquery.TableInfo.getNumRows()"
  - "com.google.cloud.bigquery.TableInfo.getRequirePartitionFilter()"
  - "com.google.cloud.bigquery.TableInfo.getSelfLink()"
  - "com.google.cloud.bigquery.TableInfo.getTableId()"
  - "com.google.cloud.bigquery.TableInfo.hashCode()"
  - "com.google.cloud.bigquery.TableInfo.newBuilder(com.google.cloud.bigquery.TableId,com.google.cloud.bigquery.TableDefinition)"
  - "com.google.cloud.bigquery.TableInfo.of(com.google.cloud.bigquery.TableId,com.google.cloud.bigquery.TableDefinition)"
  - "com.google.cloud.bigquery.TableInfo.toBuilder()"
  - "com.google.cloud.bigquery.TableInfo.toString()"
  langs:
  - "java"
  name: "TableInfo"
  nameWithType: "TableInfo"
  fullName: "com.google.cloud.bigquery.TableInfo"
  type: "Class"
  package: "com.google.cloud.bigquery"
  summary: "Google BigQuery table information. Use <xref uid=\"com.google.cloud.bigquery.StandardTableDefinition\" data-throw-if-not-resolved=\"false\">StandardTableDefinition</xref> to create simple BigQuery table. Use <xref uid=\"com.google.cloud.bigquery.ViewDefinition\" data-throw-if-not-resolved=\"false\">ViewDefinition</xref> to create a BigQuery view. Use <xref uid=\"com.google.cloud.bigquery.ExternalTableDefinition\" data-throw-if-not-resolved=\"false\">ExternalTableDefinition</xref> to create a BigQuery a table backed by external data."
  syntax:
    content: "public class TableInfo implements Serializable"
  inheritance:
  - "java.lang.Object"
  implements:
  - "java.io.Serializable"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.TableInfo.<T>getDefinition()"
  id: "<T>getDefinition()"
  parent: "com.google.cloud.bigquery.TableInfo"
  langs:
  - "java"
  name: "<T>getDefinition()"
  nameWithType: "TableInfo.<T>getDefinition()"
  fullName: "com.google.cloud.bigquery.TableInfo.<T>getDefinition()"
  overload: "com.google.cloud.bigquery.TableInfo.getDefinition*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the table definition."
  syntax:
    content: "public T <T>getDefinition()"
    return:
      type: "T"
- uid: "com.google.cloud.bigquery.TableInfo.TableInfo(com.google.cloud.bigquery.TableInfo.BuilderImpl)"
  id: "TableInfo(com.google.cloud.bigquery.TableInfo.BuilderImpl)"
  parent: "com.google.cloud.bigquery.TableInfo"
  langs:
  - "java"
  name: "TableInfo(TableInfo.BuilderImpl builder)"
  nameWithType: "TableInfo.TableInfo(TableInfo.BuilderImpl builder)"
  fullName: "com.google.cloud.bigquery.TableInfo.TableInfo(TableInfo.BuilderImpl builder)"
  overload: "com.google.cloud.bigquery.TableInfo.TableInfo*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: " TableInfo(TableInfo.BuilderImpl builder)"
    parameters:
    - id: "builder"
      type: "com.google.cloud.bigquery.TableInfo.BuilderImpl"
- uid: "com.google.cloud.bigquery.TableInfo.equals(java.lang.Object)"
  id: "equals(java.lang.Object)"
  parent: "com.google.cloud.bigquery.TableInfo"
  langs:
  - "java"
  name: "equals(Object obj)"
  nameWithType: "TableInfo.equals(Object obj)"
  fullName: "com.google.cloud.bigquery.TableInfo.equals(Object obj)"
  overload: "com.google.cloud.bigquery.TableInfo.equals*"
  overridden: "java.lang.Object.equals(java.lang.Object)"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public boolean equals(Object obj)"
    parameters:
    - id: "obj"
      type: "java.lang.Object"
    return:
      type: "boolean"
- uid: "com.google.cloud.bigquery.TableInfo.getCreationTime()"
  id: "getCreationTime()"
  parent: "com.google.cloud.bigquery.TableInfo"
  langs:
  - "java"
  name: "getCreationTime()"
  nameWithType: "TableInfo.getCreationTime()"
  fullName: "com.google.cloud.bigquery.TableInfo.getCreationTime()"
  overload: "com.google.cloud.bigquery.TableInfo.getCreationTime*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the time when this table was created, in milliseconds since the epoch."
  syntax:
    content: "public Long getCreationTime()"
    return:
      type: "java.lang.Long"
- uid: "com.google.cloud.bigquery.TableInfo.getDescription()"
  id: "getDescription()"
  parent: "com.google.cloud.bigquery.TableInfo"
  langs:
  - "java"
  name: "getDescription()"
  nameWithType: "TableInfo.getDescription()"
  fullName: "com.google.cloud.bigquery.TableInfo.getDescription()"
  overload: "com.google.cloud.bigquery.TableInfo.getDescription*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a user-friendly description for the table."
  syntax:
    content: "public String getDescription()"
    return:
      type: "java.lang.String"
- uid: "com.google.cloud.bigquery.TableInfo.getEncryptionConfiguration()"
  id: "getEncryptionConfiguration()"
  parent: "com.google.cloud.bigquery.TableInfo"
  langs:
  - "java"
  name: "getEncryptionConfiguration()"
  nameWithType: "TableInfo.getEncryptionConfiguration()"
  fullName: "com.google.cloud.bigquery.TableInfo.getEncryptionConfiguration()"
  overload: "com.google.cloud.bigquery.TableInfo.getEncryptionConfiguration*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public EncryptionConfiguration getEncryptionConfiguration()"
    return:
      type: "com.google.cloud.bigquery.EncryptionConfiguration"
- uid: "com.google.cloud.bigquery.TableInfo.getEtag()"
  id: "getEtag()"
  parent: "com.google.cloud.bigquery.TableInfo"
  langs:
  - "java"
  name: "getEtag()"
  nameWithType: "TableInfo.getEtag()"
  fullName: "com.google.cloud.bigquery.TableInfo.getEtag()"
  overload: "com.google.cloud.bigquery.TableInfo.getEtag*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the hash of the table resource."
  syntax:
    content: "public String getEtag()"
    return:
      type: "java.lang.String"
- uid: "com.google.cloud.bigquery.TableInfo.getExpirationTime()"
  id: "getExpirationTime()"
  parent: "com.google.cloud.bigquery.TableInfo"
  langs:
  - "java"
  name: "getExpirationTime()"
  nameWithType: "TableInfo.getExpirationTime()"
  fullName: "com.google.cloud.bigquery.TableInfo.getExpirationTime()"
  overload: "com.google.cloud.bigquery.TableInfo.getExpirationTime*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the time when this table expires, in milliseconds since the epoch. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed."
  syntax:
    content: "public Long getExpirationTime()"
    return:
      type: "java.lang.Long"
- uid: "com.google.cloud.bigquery.TableInfo.getFriendlyName()"
  id: "getFriendlyName()"
  parent: "com.google.cloud.bigquery.TableInfo"
  langs:
  - "java"
  name: "getFriendlyName()"
  nameWithType: "TableInfo.getFriendlyName()"
  fullName: "com.google.cloud.bigquery.TableInfo.getFriendlyName()"
  overload: "com.google.cloud.bigquery.TableInfo.getFriendlyName*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a user-friendly name for the table."
  syntax:
    content: "public String getFriendlyName()"
    return:
      type: "java.lang.String"
- uid: "com.google.cloud.bigquery.TableInfo.getGeneratedId()"
  id: "getGeneratedId()"
  parent: "com.google.cloud.bigquery.TableInfo"
  langs:
  - "java"
  name: "getGeneratedId()"
  nameWithType: "TableInfo.getGeneratedId()"
  fullName: "com.google.cloud.bigquery.TableInfo.getGeneratedId()"
  overload: "com.google.cloud.bigquery.TableInfo.getGeneratedId*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the service-generated id for the table."
  syntax:
    content: "public String getGeneratedId()"
    return:
      type: "java.lang.String"
- uid: "com.google.cloud.bigquery.TableInfo.getLabels()"
  id: "getLabels()"
  parent: "com.google.cloud.bigquery.TableInfo"
  langs:
  - "java"
  name: "getLabels()"
  nameWithType: "TableInfo.getLabels()"
  fullName: "com.google.cloud.bigquery.TableInfo.getLabels()"
  overload: "com.google.cloud.bigquery.TableInfo.getLabels*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Return a map for labels applied to the table.\n\nUnstable, because labels are [experimental][].\n\n\n[experimental]: https://cloud.google.com/bigquery/docs/reference/rest/v2/tables"
  syntax:
    content: "public Map<String,String> getLabels()"
    return:
      type: "java.util.Map<java.lang.String,java.lang.String>"
- uid: "com.google.cloud.bigquery.TableInfo.getLastModifiedTime()"
  id: "getLastModifiedTime()"
  parent: "com.google.cloud.bigquery.TableInfo"
  langs:
  - "java"
  name: "getLastModifiedTime()"
  nameWithType: "TableInfo.getLastModifiedTime()"
  fullName: "com.google.cloud.bigquery.TableInfo.getLastModifiedTime()"
  overload: "com.google.cloud.bigquery.TableInfo.getLastModifiedTime*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the time when this table was last modified, in milliseconds since the epoch."
  syntax:
    content: "public Long getLastModifiedTime()"
    return:
      type: "java.lang.Long"
- uid: "com.google.cloud.bigquery.TableInfo.getNumBytes()"
  id: "getNumBytes()"
  parent: "com.google.cloud.bigquery.TableInfo"
  langs:
  - "java"
  name: "getNumBytes()"
  nameWithType: "TableInfo.getNumBytes()"
  fullName: "com.google.cloud.bigquery.TableInfo.getNumBytes()"
  overload: "com.google.cloud.bigquery.TableInfo.getNumBytes*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the size of this table in bytes"
  syntax:
    content: "public Long getNumBytes()"
    return:
      type: "java.lang.Long"
- uid: "com.google.cloud.bigquery.TableInfo.getNumLongTermBytes()"
  id: "getNumLongTermBytes()"
  parent: "com.google.cloud.bigquery.TableInfo"
  langs:
  - "java"
  name: "getNumLongTermBytes()"
  nameWithType: "TableInfo.getNumLongTermBytes()"
  fullName: "com.google.cloud.bigquery.TableInfo.getNumLongTermBytes()"
  overload: "com.google.cloud.bigquery.TableInfo.getNumLongTermBytes*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the number of bytes considered \"long-term storage\" for reduced billing purposes."
  syntax:
    content: "public Long getNumLongTermBytes()"
    return:
      type: "java.lang.Long"
- uid: "com.google.cloud.bigquery.TableInfo.getNumRows()"
  id: "getNumRows()"
  parent: "com.google.cloud.bigquery.TableInfo"
  langs:
  - "java"
  name: "getNumRows()"
  nameWithType: "TableInfo.getNumRows()"
  fullName: "com.google.cloud.bigquery.TableInfo.getNumRows()"
  overload: "com.google.cloud.bigquery.TableInfo.getNumRows*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the number of rows of data in this table"
  syntax:
    content: "public BigInteger getNumRows()"
    return:
      type: "java.math.BigInteger"
- uid: "com.google.cloud.bigquery.TableInfo.getRequirePartitionFilter()"
  id: "getRequirePartitionFilter()"
  parent: "com.google.cloud.bigquery.TableInfo"
  langs:
  - "java"
  name: "getRequirePartitionFilter()"
  nameWithType: "TableInfo.getRequirePartitionFilter()"
  fullName: "com.google.cloud.bigquery.TableInfo.getRequirePartitionFilter()"
  overload: "com.google.cloud.bigquery.TableInfo.getRequirePartitionFilter*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns true if a partition filter (that can be used for partition elimination) is required for queries over this table."
  syntax:
    content: "public Boolean getRequirePartitionFilter()"
    return:
      type: "java.lang.Boolean"
- uid: "com.google.cloud.bigquery.TableInfo.getSelfLink()"
  id: "getSelfLink()"
  parent: "com.google.cloud.bigquery.TableInfo"
  langs:
  - "java"
  name: "getSelfLink()"
  nameWithType: "TableInfo.getSelfLink()"
  fullName: "com.google.cloud.bigquery.TableInfo.getSelfLink()"
  overload: "com.google.cloud.bigquery.TableInfo.getSelfLink*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns an URL that can be used to access the resource again. The returned URL can be used for get or update requests."
  syntax:
    content: "public String getSelfLink()"
    return:
      type: "java.lang.String"
- uid: "com.google.cloud.bigquery.TableInfo.getTableId()"
  id: "getTableId()"
  parent: "com.google.cloud.bigquery.TableInfo"
  langs:
  - "java"
  name: "getTableId()"
  nameWithType: "TableInfo.getTableId()"
  fullName: "com.google.cloud.bigquery.TableInfo.getTableId()"
  overload: "com.google.cloud.bigquery.TableInfo.getTableId*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the table identity."
  syntax:
    content: "public TableId getTableId()"
    return:
      type: "com.google.cloud.bigquery.TableId"
- uid: "com.google.cloud.bigquery.TableInfo.hashCode()"
  id: "hashCode()"
  parent: "com.google.cloud.bigquery.TableInfo"
  langs:
  - "java"
  name: "hashCode()"
  nameWithType: "TableInfo.hashCode()"
  fullName: "com.google.cloud.bigquery.TableInfo.hashCode()"
  overload: "com.google.cloud.bigquery.TableInfo.hashCode*"
  overridden: "java.lang.Object.hashCode()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public int hashCode()"
    return:
      type: "int"
- uid: "com.google.cloud.bigquery.TableInfo.newBuilder(com.google.cloud.bigquery.TableId,com.google.cloud.bigquery.TableDefinition)"
  id: "newBuilder(com.google.cloud.bigquery.TableId,com.google.cloud.bigquery.TableDefinition)"
  parent: "com.google.cloud.bigquery.TableInfo"
  langs:
  - "java"
  name: "newBuilder(TableId tableId, TableDefinition definition)"
  nameWithType: "TableInfo.newBuilder(TableId tableId, TableDefinition definition)"
  fullName: "com.google.cloud.bigquery.TableInfo.newBuilder(TableId tableId, TableDefinition definition)"
  overload: "com.google.cloud.bigquery.TableInfo.newBuilder*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a builder for a `TableInfo` object given table identity and definition. Use <xref uid=\"com.google.cloud.bigquery.StandardTableDefinition\" data-throw-if-not-resolved=\"false\">StandardTableDefinition</xref> to create simple BigQuery table. Use <xref uid=\"com.google.cloud.bigquery.ViewDefinition\" data-throw-if-not-resolved=\"false\">ViewDefinition</xref> to create a BigQuery view. Use <xref uid=\"com.google.cloud.bigquery.ExternalTableDefinition\" data-throw-if-not-resolved=\"false\">ExternalTableDefinition</xref> to create a BigQuery a table backed by external data."
  syntax:
    content: "public static TableInfo.Builder newBuilder(TableId tableId, TableDefinition definition)"
    parameters:
    - id: "tableId"
      type: "com.google.cloud.bigquery.TableId"
    - id: "definition"
      type: "com.google.cloud.bigquery.TableDefinition"
    return:
      type: "com.google.cloud.bigquery.TableInfo.Builder"
- uid: "com.google.cloud.bigquery.TableInfo.of(com.google.cloud.bigquery.TableId,com.google.cloud.bigquery.TableDefinition)"
  id: "of(com.google.cloud.bigquery.TableId,com.google.cloud.bigquery.TableDefinition)"
  parent: "com.google.cloud.bigquery.TableInfo"
  langs:
  - "java"
  name: "of(TableId tableId, TableDefinition definition)"
  nameWithType: "TableInfo.of(TableId tableId, TableDefinition definition)"
  fullName: "com.google.cloud.bigquery.TableInfo.of(TableId tableId, TableDefinition definition)"
  overload: "com.google.cloud.bigquery.TableInfo.of*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a `TableInfo` object given table identity and definition. Use <xref uid=\"com.google.cloud.bigquery.StandardTableDefinition\" data-throw-if-not-resolved=\"false\">StandardTableDefinition</xref> to create simple BigQuery table. Use <xref uid=\"com.google.cloud.bigquery.ViewDefinition\" data-throw-if-not-resolved=\"false\">ViewDefinition</xref> to create a BigQuery view. Use <xref uid=\"com.google.cloud.bigquery.ExternalTableDefinition\" data-throw-if-not-resolved=\"false\">ExternalTableDefinition</xref> to create a BigQuery a table backed by external data."
  syntax:
    content: "public static TableInfo of(TableId tableId, TableDefinition definition)"
    parameters:
    - id: "tableId"
      type: "com.google.cloud.bigquery.TableId"
    - id: "definition"
      type: "com.google.cloud.bigquery.TableDefinition"
    return:
      type: "com.google.cloud.bigquery.TableInfo"
- uid: "com.google.cloud.bigquery.TableInfo.toBuilder()"
  id: "toBuilder()"
  parent: "com.google.cloud.bigquery.TableInfo"
  langs:
  - "java"
  name: "toBuilder()"
  nameWithType: "TableInfo.toBuilder()"
  fullName: "com.google.cloud.bigquery.TableInfo.toBuilder()"
  overload: "com.google.cloud.bigquery.TableInfo.toBuilder*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a builder for the table object."
  syntax:
    content: "public TableInfo.Builder toBuilder()"
    return:
      type: "com.google.cloud.bigquery.TableInfo.Builder"
- uid: "com.google.cloud.bigquery.TableInfo.toString()"
  id: "toString()"
  parent: "com.google.cloud.bigquery.TableInfo"
  langs:
  - "java"
  name: "toString()"
  nameWithType: "TableInfo.toString()"
  fullName: "com.google.cloud.bigquery.TableInfo.toString()"
  overload: "com.google.cloud.bigquery.TableInfo.toString*"
  overridden: "java.lang.Object.toString()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public String toString()"
    return:
      type: "java.lang.String"
references:
- uid: "com.google.cloud.bigquery.TableInfo.BuilderImpl"
  spec.java:
  - uid: "com.google.cloud.bigquery.TableInfo.BuilderImpl"
    name: "BuilderImpl"
    fullName: "com.google.cloud.bigquery.TableInfo.BuilderImpl"
- uid: "com.google.cloud.bigquery.TableInfo.TableInfo*"
  name: "TableInfo"
  nameWithType: "TableInfo.TableInfo"
  fullName: "com.google.cloud.bigquery.TableInfo.TableInfo"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.TableInfo.getEtag*"
  name: "getEtag"
  nameWithType: "TableInfo.getEtag"
  fullName: "com.google.cloud.bigquery.TableInfo.getEtag"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TableInfo.getGeneratedId*"
  name: "getGeneratedId"
  nameWithType: "TableInfo.getGeneratedId"
  fullName: "com.google.cloud.bigquery.TableInfo.getGeneratedId"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TableInfo.getSelfLink*"
  name: "getSelfLink"
  nameWithType: "TableInfo.getSelfLink"
  fullName: "com.google.cloud.bigquery.TableInfo.getSelfLink"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TableId"
  name: "TableId"
  nameWithType: "TableId"
  fullName: "com.google.cloud.bigquery.TableId"
- uid: "com.google.cloud.bigquery.TableInfo.getTableId*"
  name: "getTableId"
  nameWithType: "TableInfo.getTableId"
  fullName: "com.google.cloud.bigquery.TableInfo.getTableId"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TableInfo.getFriendlyName*"
  name: "getFriendlyName"
  nameWithType: "TableInfo.getFriendlyName"
  fullName: "com.google.cloud.bigquery.TableInfo.getFriendlyName"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TableInfo.getDescription*"
  name: "getDescription"
  nameWithType: "TableInfo.getDescription"
  fullName: "com.google.cloud.bigquery.TableInfo.getDescription"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Long"
  spec.java:
  - uid: "java.lang.Long"
    name: "Long"
    fullName: "java.lang.Long"
- uid: "com.google.cloud.bigquery.TableInfo.getCreationTime*"
  name: "getCreationTime"
  nameWithType: "TableInfo.getCreationTime"
  fullName: "com.google.cloud.bigquery.TableInfo.getCreationTime"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TableInfo.getExpirationTime*"
  name: "getExpirationTime"
  nameWithType: "TableInfo.getExpirationTime"
  fullName: "com.google.cloud.bigquery.TableInfo.getExpirationTime"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TableInfo.getLastModifiedTime*"
  name: "getLastModifiedTime"
  nameWithType: "TableInfo.getLastModifiedTime"
  fullName: "com.google.cloud.bigquery.TableInfo.getLastModifiedTime"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.EncryptionConfiguration"
  name: "EncryptionConfiguration"
  nameWithType: "EncryptionConfiguration"
  fullName: "com.google.cloud.bigquery.EncryptionConfiguration"
- uid: "com.google.cloud.bigquery.TableInfo.getEncryptionConfiguration*"
  name: "getEncryptionConfiguration"
  nameWithType: "TableInfo.getEncryptionConfiguration"
  fullName: "com.google.cloud.bigquery.TableInfo.getEncryptionConfiguration"
  package: "com.google.cloud.bigquery"
- uid: "T"
  spec.java:
  - uid: "T"
    name: "T"
    fullName: "T"
- uid: "com.google.cloud.bigquery.TableInfo.getDefinition*"
  name: "<T>getDefinition"
  nameWithType: "TableInfo.<T>getDefinition"
  fullName: "com.google.cloud.bigquery.TableInfo.<T>getDefinition"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TableInfo.getNumBytes*"
  name: "getNumBytes"
  nameWithType: "TableInfo.getNumBytes"
  fullName: "com.google.cloud.bigquery.TableInfo.getNumBytes"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TableInfo.getNumLongTermBytes*"
  name: "getNumLongTermBytes"
  nameWithType: "TableInfo.getNumLongTermBytes"
  fullName: "com.google.cloud.bigquery.TableInfo.getNumLongTermBytes"
  package: "com.google.cloud.bigquery"
- uid: "java.math.BigInteger"
  spec.java:
  - uid: "java.math.BigInteger"
    name: "BigInteger"
    fullName: "java.math.BigInteger"
- uid: "com.google.cloud.bigquery.TableInfo.getNumRows*"
  name: "getNumRows"
  nameWithType: "TableInfo.getNumRows"
  fullName: "com.google.cloud.bigquery.TableInfo.getNumRows"
  package: "com.google.cloud.bigquery"
- uid: "java.util.Map<java.lang.String,java.lang.String>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.TableInfo.getLabels*"
  name: "getLabels"
  nameWithType: "TableInfo.getLabels"
  fullName: "com.google.cloud.bigquery.TableInfo.getLabels"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Boolean"
  spec.java:
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
- uid: "com.google.cloud.bigquery.TableInfo.getRequirePartitionFilter*"
  name: "getRequirePartitionFilter"
  nameWithType: "TableInfo.getRequirePartitionFilter"
  fullName: "com.google.cloud.bigquery.TableInfo.getRequirePartitionFilter"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TableInfo.Builder"
  name: "TableInfo.Builder"
  nameWithType: "TableInfo.Builder"
  fullName: "com.google.cloud.bigquery.TableInfo.Builder"
- uid: "com.google.cloud.bigquery.TableInfo.toBuilder*"
  name: "toBuilder"
  nameWithType: "TableInfo.toBuilder"
  fullName: "com.google.cloud.bigquery.TableInfo.toBuilder"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TableInfo.toString*"
  name: "toString"
  nameWithType: "TableInfo.toString"
  fullName: "com.google.cloud.bigquery.TableInfo.toString"
  package: "com.google.cloud.bigquery"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.google.cloud.bigquery.TableInfo.hashCode*"
  name: "hashCode"
  nameWithType: "TableInfo.hashCode"
  fullName: "com.google.cloud.bigquery.TableInfo.hashCode"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.google.cloud.bigquery.TableInfo.equals*"
  name: "equals"
  nameWithType: "TableInfo.equals"
  fullName: "com.google.cloud.bigquery.TableInfo.equals"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TableDefinition"
  name: "TableDefinition"
  nameWithType: "TableDefinition"
  fullName: "com.google.cloud.bigquery.TableDefinition"
- uid: "com.google.cloud.bigquery.TableInfo.newBuilder*"
  name: "newBuilder"
  nameWithType: "TableInfo.newBuilder"
  fullName: "com.google.cloud.bigquery.TableInfo.newBuilder"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TableInfo.of*"
  name: "of"
  nameWithType: "TableInfo.of"
  fullName: "com.google.cloud.bigquery.TableInfo.of"
  package: "com.google.cloud.bigquery"
- uid: "java.io.Serializable"
  name: "Serializable"
  nameWithType: "Serializable"
  fullName: "java.io.Serializable"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
- uid: "java.lang.String,java.lang.String"
  name: "String,String"
  nameWithType: "String,String"
  fullName: "java.lang.String,java.lang.String"
