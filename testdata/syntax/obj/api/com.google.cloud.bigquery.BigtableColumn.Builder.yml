### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.BigtableColumn.Builder"
  id: "Builder"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.BigtableColumn.Builder.Builder()"
  - "com.google.cloud.bigquery.BigtableColumn.Builder.build()"
  - "com.google.cloud.bigquery.BigtableColumn.Builder.setEncoding(java.lang.String)"
  - "com.google.cloud.bigquery.BigtableColumn.Builder.setFieldName(java.lang.String)"
  - "com.google.cloud.bigquery.BigtableColumn.Builder.setOnlyReadLatest(java.lang.Boolean)"
  - "com.google.cloud.bigquery.BigtableColumn.Builder.setQualifierEncoded(java.lang.String)"
  - "com.google.cloud.bigquery.BigtableColumn.Builder.setType(java.lang.String)"
  langs:
  - "java"
  name: "BigtableColumn.Builder"
  nameWithType: "BigtableColumn.Builder"
  fullName: "com.google.cloud.bigquery.BigtableColumn.Builder"
  type: "Class"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public abstract static class BigtableColumn.Builder"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.BigtableColumn.Builder.Builder()"
  id: "Builder()"
  parent: "com.google.cloud.bigquery.BigtableColumn.Builder"
  langs:
  - "java"
  name: "Builder()"
  nameWithType: "BigtableColumn.Builder.Builder()"
  fullName: "com.google.cloud.bigquery.BigtableColumn.Builder.Builder()"
  overload: "com.google.cloud.bigquery.BigtableColumn.Builder.Builder*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public Builder()"
- uid: "com.google.cloud.bigquery.BigtableColumn.Builder.build()"
  id: "build()"
  parent: "com.google.cloud.bigquery.BigtableColumn.Builder"
  langs:
  - "java"
  name: "build()"
  nameWithType: "BigtableColumn.Builder.build()"
  fullName: "com.google.cloud.bigquery.BigtableColumn.Builder.build()"
  overload: "com.google.cloud.bigquery.BigtableColumn.Builder.build*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public abstract BigtableColumn build()"
    return:
      type: "com.google.cloud.bigquery.BigtableColumn"
- uid: "com.google.cloud.bigquery.BigtableColumn.Builder.setEncoding(java.lang.String)"
  id: "setEncoding(java.lang.String)"
  parent: "com.google.cloud.bigquery.BigtableColumn.Builder"
  langs:
  - "java"
  name: "setEncoding(String encoding)"
  nameWithType: "BigtableColumn.Builder.setEncoding(String encoding)"
  fullName: "com.google.cloud.bigquery.BigtableColumn.Builder.setEncoding(String encoding)"
  overload: "com.google.cloud.bigquery.BigtableColumn.Builder.setEncoding*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions.\n\nEncoding can also be set at the column family level. However, the setting at the column level takes precedence if 'encoding' is set at both levels."
  syntax:
    content: "public abstract BigtableColumn.Builder setEncoding(String encoding)"
    parameters:
    - id: "encoding"
      type: "java.lang.String"
    return:
      type: "com.google.cloud.bigquery.BigtableColumn.Builder"
- uid: "com.google.cloud.bigquery.BigtableColumn.Builder.setFieldName(java.lang.String)"
  id: "setFieldName(java.lang.String)"
  parent: "com.google.cloud.bigquery.BigtableColumn.Builder"
  langs:
  - "java"
  name: "setFieldName(String fieldName)"
  nameWithType: "BigtableColumn.Builder.setFieldName(String fieldName)"
  fullName: "com.google.cloud.bigquery.BigtableColumn.Builder.setFieldName(String fieldName)"
  overload: "com.google.cloud.bigquery.BigtableColumn.Builder.setFieldName*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "If the qualifier is not a valid BigQuery field identifier, a valid identifier must be provided as the column field name and is used as field name in queries."
  syntax:
    content: "public abstract BigtableColumn.Builder setFieldName(String fieldName)"
    parameters:
    - id: "fieldName"
      type: "java.lang.String"
    return:
      type: "com.google.cloud.bigquery.BigtableColumn.Builder"
- uid: "com.google.cloud.bigquery.BigtableColumn.Builder.setOnlyReadLatest(java.lang.Boolean)"
  id: "setOnlyReadLatest(java.lang.Boolean)"
  parent: "com.google.cloud.bigquery.BigtableColumn.Builder"
  langs:
  - "java"
  name: "setOnlyReadLatest(Boolean onlyReadLatest)"
  nameWithType: "BigtableColumn.Builder.setOnlyReadLatest(Boolean onlyReadLatest)"
  fullName: "com.google.cloud.bigquery.BigtableColumn.Builder.setOnlyReadLatest(Boolean onlyReadLatest)"
  overload: "com.google.cloud.bigquery.BigtableColumn.Builder.setOnlyReadLatest*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "If this is set, only the latest version of value in this column are exposed.\n\n'onlyReadLatest' can also be set at the column family level. However, the setting at the column level takes precedence if 'onlyReadLatest' is set at both levels."
  syntax:
    content: "public abstract BigtableColumn.Builder setOnlyReadLatest(Boolean onlyReadLatest)"
    parameters:
    - id: "onlyReadLatest"
      type: "java.lang.Boolean"
    return:
      type: "com.google.cloud.bigquery.BigtableColumn.Builder"
- uid: "com.google.cloud.bigquery.BigtableColumn.Builder.setQualifierEncoded(java.lang.String)"
  id: "setQualifierEncoded(java.lang.String)"
  parent: "com.google.cloud.bigquery.BigtableColumn.Builder"
  langs:
  - "java"
  name: "setQualifierEncoded(String qualifierEncoded)"
  nameWithType: "BigtableColumn.Builder.setQualifierEncoded(String qualifierEncoded)"
  fullName: "com.google.cloud.bigquery.BigtableColumn.Builder.setQualifierEncoded(String qualifierEncoded)"
  overload: "com.google.cloud.bigquery.BigtableColumn.Builder.setQualifierEncoded*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Qualifier of the column.\n\nColumns in the parent column family that has this exact qualifier are exposed as . field. If the qualifier is valid UTF-8 string, it can be specified in the qualifier\\_string field. Otherwise, a base-64 encoded value must be set to qualifier\\_encoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier, a valid identifier must be provided as field\\_name."
  syntax:
    content: "public abstract BigtableColumn.Builder setQualifierEncoded(String qualifierEncoded)"
    parameters:
    - id: "qualifierEncoded"
      type: "java.lang.String"
    return:
      type: "com.google.cloud.bigquery.BigtableColumn.Builder"
- uid: "com.google.cloud.bigquery.BigtableColumn.Builder.setType(java.lang.String)"
  id: "setType(java.lang.String)"
  parent: "com.google.cloud.bigquery.BigtableColumn.Builder"
  langs:
  - "java"
  name: "setType(String type)"
  nameWithType: "BigtableColumn.Builder.setType(String type)"
  fullName: "com.google.cloud.bigquery.BigtableColumn.Builder.setType(String type)"
  overload: "com.google.cloud.bigquery.BigtableColumn.Builder.setType*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "The type to convert the value in cells of this column.\n\nThe values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): BYTES STRING INTEGER FLOAT BOOLEAN Default type is BYTES.\n\n'type' can also be set at the column family level. However, the setting at the column level takes precedence if 'type' is set at both levels."
  syntax:
    content: "public abstract BigtableColumn.Builder setType(String type)"
    parameters:
    - id: "type"
      type: "java.lang.String"
    return:
      type: "com.google.cloud.bigquery.BigtableColumn.Builder"
references:
- uid: "com.google.cloud.bigquery.BigtableColumn.Builder.Builder*"
  name: "Builder"
  nameWithType: "BigtableColumn.Builder.Builder"
  fullName: "com.google.cloud.bigquery.BigtableColumn.Builder.Builder"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.BigtableColumn.Builder.setQualifierEncoded*"
  name: "setQualifierEncoded"
  nameWithType: "BigtableColumn.Builder.setQualifierEncoded"
  fullName: "com.google.cloud.bigquery.BigtableColumn.Builder.setQualifierEncoded"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.BigtableColumn.Builder.setFieldName*"
  name: "setFieldName"
  nameWithType: "BigtableColumn.Builder.setFieldName"
  fullName: "com.google.cloud.bigquery.BigtableColumn.Builder.setFieldName"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Boolean"
  spec.java:
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
- uid: "com.google.cloud.bigquery.BigtableColumn.Builder.setOnlyReadLatest*"
  name: "setOnlyReadLatest"
  nameWithType: "BigtableColumn.Builder.setOnlyReadLatest"
  fullName: "com.google.cloud.bigquery.BigtableColumn.Builder.setOnlyReadLatest"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.BigtableColumn.Builder.setEncoding*"
  name: "setEncoding"
  nameWithType: "BigtableColumn.Builder.setEncoding"
  fullName: "com.google.cloud.bigquery.BigtableColumn.Builder.setEncoding"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.BigtableColumn.Builder.setType*"
  name: "setType"
  nameWithType: "BigtableColumn.Builder.setType"
  fullName: "com.google.cloud.bigquery.BigtableColumn.Builder.setType"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.BigtableColumn"
  name: "BigtableColumn"
  nameWithType: "BigtableColumn"
  fullName: "com.google.cloud.bigquery.BigtableColumn"
- uid: "com.google.cloud.bigquery.BigtableColumn.Builder.build*"
  name: "build"
  nameWithType: "BigtableColumn.Builder.build"
  fullName: "com.google.cloud.bigquery.BigtableColumn.Builder.build"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
