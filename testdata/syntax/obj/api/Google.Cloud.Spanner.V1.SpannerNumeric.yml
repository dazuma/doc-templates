### YamlMime:ManagedReference
items:
- uid: Google.Cloud.Spanner.V1.SpannerNumeric
  commentId: T:Google.Cloud.Spanner.V1.SpannerNumeric
  id: SpannerNumeric
  parent: Google.Cloud.Spanner.V1
  children:
  - Google.Cloud.Spanner.V1.SpannerNumeric.CompareTo(Google.Cloud.Spanner.V1.SpannerNumeric)
  - Google.Cloud.Spanner.V1.SpannerNumeric.Epsilon
  - Google.Cloud.Spanner.V1.SpannerNumeric.FromDecimal(System.Decimal,Google.Cloud.Spanner.V1.LossOfPrecisionHandling)
  - Google.Cloud.Spanner.V1.SpannerNumeric.GetHashCode
  - Google.Cloud.Spanner.V1.SpannerNumeric.MaxValue
  - Google.Cloud.Spanner.V1.SpannerNumeric.MinValue
  - Google.Cloud.Spanner.V1.SpannerNumeric.op_Addition(Google.Cloud.Spanner.V1.SpannerNumeric,Google.Cloud.Spanner.V1.SpannerNumeric)
  - Google.Cloud.Spanner.V1.SpannerNumeric.op_Equality(Google.Cloud.Spanner.V1.SpannerNumeric,Google.Cloud.Spanner.V1.SpannerNumeric)
  - Google.Cloud.Spanner.V1.SpannerNumeric.op_Explicit(Google.Cloud.Spanner.V1.SpannerNumeric)~System.Decimal
  - Google.Cloud.Spanner.V1.SpannerNumeric.op_Explicit(System.Decimal)~Google.Cloud.Spanner.V1.SpannerNumeric
  - Google.Cloud.Spanner.V1.SpannerNumeric.op_Implicit(System.Int32)~Google.Cloud.Spanner.V1.SpannerNumeric
  - Google.Cloud.Spanner.V1.SpannerNumeric.op_Implicit(System.Int64)~Google.Cloud.Spanner.V1.SpannerNumeric
  - Google.Cloud.Spanner.V1.SpannerNumeric.op_Implicit(System.UInt64)~Google.Cloud.Spanner.V1.SpannerNumeric
  - Google.Cloud.Spanner.V1.SpannerNumeric.op_Inequality(Google.Cloud.Spanner.V1.SpannerNumeric,Google.Cloud.Spanner.V1.SpannerNumeric)
  - Google.Cloud.Spanner.V1.SpannerNumeric.op_Subtraction(Google.Cloud.Spanner.V1.SpannerNumeric,Google.Cloud.Spanner.V1.SpannerNumeric)
  - Google.Cloud.Spanner.V1.SpannerNumeric.op_UnaryNegation(Google.Cloud.Spanner.V1.SpannerNumeric)
  - Google.Cloud.Spanner.V1.SpannerNumeric.op_UnaryPlus(Google.Cloud.Spanner.V1.SpannerNumeric)
  - Google.Cloud.Spanner.V1.SpannerNumeric.Parse(System.String)
  - Google.Cloud.Spanner.V1.SpannerNumeric.System#IComparable#CompareTo(System.Object)
  - Google.Cloud.Spanner.V1.SpannerNumeric.ToDecimal(Google.Cloud.Spanner.V1.LossOfPrecisionHandling)
  - Google.Cloud.Spanner.V1.SpannerNumeric.ToString
  - Google.Cloud.Spanner.V1.SpannerNumeric.TryParse(System.String,Google.Cloud.Spanner.V1.SpannerNumeric@)
  - Google.Cloud.Spanner.V1.SpannerNumeric.Zero
  langs:
  - csharp
  - vb
  name: SpannerNumeric
  nameWithType: SpannerNumeric
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric
  type: Struct
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: SpannerNumeric
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
    startLine: 29
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nRepresentation of the Spanner NUMERIC type, which has 38 digits of precision,\nand a fixed scale of 9 decimal places to the right of the decimal point\n"
  example: []
  syntax:
    content: 'public struct SpannerNumeric : IEquatable<SpannerNumeric>, IComparable<SpannerNumeric>, IComparable'
    content.vb: >-
      Public Structure SpannerNumeric
          Implements IEquatable(Of SpannerNumeric), IComparable(Of SpannerNumeric), IComparable
  implements:
  - System.IEquatable{Google.Cloud.Spanner.V1.SpannerNumeric}
  - System.IComparable{Google.Cloud.Spanner.V1.SpannerNumeric}
  - System.IComparable
  inheritedMembers:
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.Zero
  commentId: P:Google.Cloud.Spanner.V1.SpannerNumeric.Zero
  id: Zero
  parent: Google.Cloud.Spanner.V1.SpannerNumeric
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: SpannerNumeric.Zero
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.Zero
  type: Property
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: Zero
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
    startLine: 46
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nZero represented as a <xref href=\"Google.Cloud.Spanner.V1.SpannerNumeric\" data-throw-if-not-resolved=\"false\"></xref>. This is the default value for the type.\n"
  example: []
  syntax:
    content: public static SpannerNumeric Zero { get; }
    parameters: []
    return:
      type: Google.Cloud.Spanner.V1.SpannerNumeric
    content.vb: Public Shared ReadOnly Property Zero As SpannerNumeric
  overload: Google.Cloud.Spanner.V1.SpannerNumeric.Zero*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.MaxValue
  commentId: P:Google.Cloud.Spanner.V1.SpannerNumeric.MaxValue
  id: MaxValue
  parent: Google.Cloud.Spanner.V1.SpannerNumeric
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: SpannerNumeric.MaxValue
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.MaxValue
  type: Property
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: MaxValue
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
    startLine: 51
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nThe maximum valid value for <xref href=\"Google.Cloud.Spanner.V1.SpannerNumeric\" data-throw-if-not-resolved=\"false\"></xref>, equal to 99999999999999999999999999999.999999999.\n"
  example: []
  syntax:
    content: public static SpannerNumeric MaxValue { get; }
    parameters: []
    return:
      type: Google.Cloud.Spanner.V1.SpannerNumeric
    content.vb: Public Shared ReadOnly Property MaxValue As SpannerNumeric
  overload: Google.Cloud.Spanner.V1.SpannerNumeric.MaxValue*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.MinValue
  commentId: P:Google.Cloud.Spanner.V1.SpannerNumeric.MinValue
  id: MinValue
  parent: Google.Cloud.Spanner.V1.SpannerNumeric
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: SpannerNumeric.MinValue
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.MinValue
  type: Property
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: MinValue
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
    startLine: 56
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nThe minimum valid value for <xref href=\"Google.Cloud.Spanner.V1.SpannerNumeric\" data-throw-if-not-resolved=\"false\"></xref>, equal to -99999999999999999999999999999.999999999.\n"
  example: []
  syntax:
    content: public static SpannerNumeric MinValue { get; }
    parameters: []
    return:
      type: Google.Cloud.Spanner.V1.SpannerNumeric
    content.vb: Public Shared ReadOnly Property MinValue As SpannerNumeric
  overload: Google.Cloud.Spanner.V1.SpannerNumeric.MinValue*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.Epsilon
  commentId: P:Google.Cloud.Spanner.V1.SpannerNumeric.Epsilon
  id: Epsilon
  parent: Google.Cloud.Spanner.V1.SpannerNumeric
  langs:
  - csharp
  - vb
  name: Epsilon
  nameWithType: SpannerNumeric.Epsilon
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.Epsilon
  type: Property
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: Epsilon
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
    startLine: 61
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nThe smallest positive value for <xref href=\"Google.Cloud.Spanner.V1.SpannerNumeric\" data-throw-if-not-resolved=\"false\"></xref>, equal to 0.000000001.\n"
  example: []
  syntax:
    content: public static SpannerNumeric Epsilon { get; }
    parameters: []
    return:
      type: Google.Cloud.Spanner.V1.SpannerNumeric
    content.vb: Public Shared ReadOnly Property Epsilon As SpannerNumeric
  overload: Google.Cloud.Spanner.V1.SpannerNumeric.Epsilon*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.CompareTo(Google.Cloud.Spanner.V1.SpannerNumeric)
  commentId: M:Google.Cloud.Spanner.V1.SpannerNumeric.CompareTo(Google.Cloud.Spanner.V1.SpannerNumeric)
  id: CompareTo(Google.Cloud.Spanner.V1.SpannerNumeric)
  parent: Google.Cloud.Spanner.V1.SpannerNumeric
  langs:
  - csharp
  - vb
  name: CompareTo(SpannerNumeric)
  nameWithType: SpannerNumeric.CompareTo(SpannerNumeric)
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.CompareTo(Google.Cloud.Spanner.V1.SpannerNumeric)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: CompareTo
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
    startLine: 84
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCompares this value with <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code>.\n"
  example: []
  syntax:
    content: public int CompareTo(SpannerNumeric other)
    parameters:
    - id: other
      type: Google.Cloud.Spanner.V1.SpannerNumeric
      description: The value to compare with this one
    return:
      type: System.Int32
      description: >-
        A negative integer if this value is less than <code data-dev-comment-type="paramref" class="paramref">other</code>; a positive integer

        if it&apos;s greater than <code data-dev-comment-type="paramref" class="paramref">other</code>; zero if they&apos;re equal.
    content.vb: Public Function CompareTo(other As SpannerNumeric) As Integer
  overload: Google.Cloud.Spanner.V1.SpannerNumeric.CompareTo*
  implements:
  - System.IComparable{Google.Cloud.Spanner.V1.SpannerNumeric}.CompareTo(Google.Cloud.Spanner.V1.SpannerNumeric)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.System#IComparable#CompareTo(System.Object)
  commentId: M:Google.Cloud.Spanner.V1.SpannerNumeric.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: Google.Cloud.Spanner.V1.SpannerNumeric
  langs:
  - csharp
  - vb
  name: IComparable.CompareTo(Object)
  nameWithType: SpannerNumeric.IComparable.CompareTo(Object)
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.System.IComparable.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: System.IComparable.CompareTo
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
    startLine: 96
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nImplementation of <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> to compare two <xref href=\"Google.Cloud.Spanner.V1.SpannerNumeric\" data-throw-if-not-resolved=\"false\"></xref> values.\n"
  remarks: "\nThis uses explicit interface implementation to avoid it being called accidentally. The generic implementation should usually be preferred.\n"
  example: []
  syntax:
    content: int IComparable.CompareTo(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare this value with.
    return:
      type: System.Int32
      description: >
        The result of comparing this value with <code data-dev-comment-type="paramref" class="paramref">obj</code>. <code data-dev-comment-type="paramref" class="paramref">obj</code> is null, this method returns a value greater than 0.
    content.vb: Function System.IComparable.CompareTo(obj As Object) As Integer Implements IComparable.CompareTo
  overload: Google.Cloud.Spanner.V1.SpannerNumeric.System#IComparable#CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code data-dev-comment-type="paramref" class="paramref">obj</code> is non-null but does not refer to an instance of <xref href="Google.Cloud.Spanner.V1.SpannerNumeric" data-throw-if-not-resolved="false"></xref>.
  implements:
  - System.IComparable.CompareTo(System.Object)
  nameWithType.vb: SpannerNumeric.System.IComparable.CompareTo(Object)
  name.vb: System.IComparable.CompareTo(Object)
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.GetHashCode
  commentId: M:Google.Cloud.Spanner.V1.SpannerNumeric.GetHashCode
  id: GetHashCode
  parent: Google.Cloud.Spanner.V1.SpannerNumeric
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: SpannerNumeric.GetHashCode()
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.GetHashCode()
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: GetHashCode
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
    startLine: 125
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nReturns a hash code for this value.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A hash code for this value.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Google.Cloud.Spanner.V1.SpannerNumeric.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.Parse(System.String)
  commentId: M:Google.Cloud.Spanner.V1.SpannerNumeric.Parse(System.String)
  id: Parse(System.String)
  parent: Google.Cloud.Spanner.V1.SpannerNumeric
  langs:
  - csharp
  - vb
  name: Parse(String)
  nameWithType: SpannerNumeric.Parse(String)
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.Parse(System.String)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: Parse
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
    startLine: 145
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nParses a textual representation as a <xref href=\"Google.Cloud.Spanner.V1.SpannerNumeric\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<p>\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">text</code> must be a representation of a decimal value which can be represented by <xref href=\"Google.Cloud.Spanner.V1.SpannerNumeric\" data-throw-if-not-resolved=\"false\"></xref>,\nusing &quot;.&quot; as a decimal place where one is specified, and a leading &quot;-&quot; for negative values. Leading zeroes and insignificant\ntrailing digits are permitted.\n</p>\n"
  example: []
  syntax:
    content: public static SpannerNumeric Parse(string text)
    parameters:
    - id: text
      type: System.String
      description: The text to parse. Must not be null.
    return:
      type: Google.Cloud.Spanner.V1.SpannerNumeric
      description: The parsed value.
    content.vb: Public Shared Function Parse(text As String) As SpannerNumeric
  overload: Google.Cloud.Spanner.V1.SpannerNumeric.Parse*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: The value could not be parsed as a <xref href="Google.Cloud.Spanner.V1.SpannerNumeric" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.TryParse(System.String,Google.Cloud.Spanner.V1.SpannerNumeric@)
  commentId: M:Google.Cloud.Spanner.V1.SpannerNumeric.TryParse(System.String,Google.Cloud.Spanner.V1.SpannerNumeric@)
  id: TryParse(System.String,Google.Cloud.Spanner.V1.SpannerNumeric@)
  parent: Google.Cloud.Spanner.V1.SpannerNumeric
  langs:
  - csharp
  - vb
  name: TryParse(String, out SpannerNumeric)
  nameWithType: SpannerNumeric.TryParse(String, out SpannerNumeric)
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.TryParse(System.String, out Google.Cloud.Spanner.V1.SpannerNumeric)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: TryParse
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
    startLine: 161
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nAttempts to parse a textual representation of a <xref href=\"Google.Cloud.Spanner.V1.SpannerNumeric\" data-throw-if-not-resolved=\"false\"></xref> value.\n"
  remarks: "\nSee <xref href=\"Google.Cloud.Spanner.V1.SpannerNumeric.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> for format details. This method will return <code>true</code> if and only if\n<xref href=\"Google.Cloud.Spanner.V1.SpannerNumeric.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> would return without an exception.\n"
  example: []
  syntax:
    content: public static bool TryParse(string text, out SpannerNumeric value)
    parameters:
    - id: text
      type: System.String
      description: The text to parse. Must not be null.
    - id: value
      type: Google.Cloud.Spanner.V1.SpannerNumeric
      description: The parsed value, or 0 on failure.
    return:
      type: System.Boolean
      description: <code>true</code> if <code data-dev-comment-type="paramref" class="paramref">text</code> was parsed successfully; <code>false</code> otherwise.
    content.vb: Public Shared Function TryParse(text As String, ByRef value As SpannerNumeric) As Boolean
  overload: Google.Cloud.Spanner.V1.SpannerNumeric.TryParse*
  nameWithType.vb: SpannerNumeric.TryParse(String, ByRef SpannerNumeric)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Cloud.Spanner.V1.SpannerNumeric.TryParse(System.String, ByRef Google.Cloud.Spanner.V1.SpannerNumeric)
  name.vb: TryParse(String, ByRef SpannerNumeric)
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.ToString
  commentId: M:Google.Cloud.Spanner.V1.SpannerNumeric.ToString
  id: ToString
  parent: Google.Cloud.Spanner.V1.SpannerNumeric
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SpannerNumeric.ToString()
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.ToString()
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: ToString
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
    startLine: 219
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nReturns a canonical string representation of this value. This always uses &quot;.&quot; as a decimal point,\nand only includes as many decimal places as are required to completely represent the value. If\nthe value is between -1 and 1 exclusive, a &quot;0&quot; character is included before the decimal point.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A canonical string representation of this value.
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Google.Cloud.Spanner.V1.SpannerNumeric.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.FromDecimal(System.Decimal,Google.Cloud.Spanner.V1.LossOfPrecisionHandling)
  commentId: M:Google.Cloud.Spanner.V1.SpannerNumeric.FromDecimal(System.Decimal,Google.Cloud.Spanner.V1.LossOfPrecisionHandling)
  id: FromDecimal(System.Decimal,Google.Cloud.Spanner.V1.LossOfPrecisionHandling)
  parent: Google.Cloud.Spanner.V1.SpannerNumeric
  langs:
  - csharp
  - vb
  name: FromDecimal(Decimal, LossOfPrecisionHandling)
  nameWithType: SpannerNumeric.FromDecimal(Decimal, LossOfPrecisionHandling)
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.FromDecimal(System.Decimal, Google.Cloud.Spanner.V1.LossOfPrecisionHandling)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: FromDecimal
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
    startLine: 296
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nConverts a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value to <xref href=\"Google.Cloud.Spanner.V1.SpannerNumeric\" data-throw-if-not-resolved=\"false\"></xref>, \n"
  remarks: "\nThis conversion may silently lose precision, depending on <code data-dev-comment-type=\"paramref\" class=\"paramref\">lossOfPrecisionHandling</code>.\n"
  example: []
  syntax:
    content: public static SpannerNumeric FromDecimal(decimal value, LossOfPrecisionHandling lossOfPrecisionHandling)
    parameters:
    - id: value
      type: System.Decimal
      description: The value to convert
    - id: lossOfPrecisionHandling
      type: Google.Cloud.Spanner.V1.LossOfPrecisionHandling
      description: How to handle values with signficant digits that would be lost by the conversion.
    return:
      type: Google.Cloud.Spanner.V1.SpannerNumeric
      description: The converted value.
    content.vb: Public Shared Function FromDecimal(value As Decimal, lossOfPrecisionHandling As LossOfPrecisionHandling) As SpannerNumeric
  overload: Google.Cloud.Spanner.V1.SpannerNumeric.FromDecimal*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.op_Explicit(System.Decimal)~Google.Cloud.Spanner.V1.SpannerNumeric
  commentId: M:Google.Cloud.Spanner.V1.SpannerNumeric.op_Explicit(System.Decimal)~Google.Cloud.Spanner.V1.SpannerNumeric
  id: op_Explicit(System.Decimal)~Google.Cloud.Spanner.V1.SpannerNumeric
  parent: Google.Cloud.Spanner.V1.SpannerNumeric
  langs:
  - csharp
  - vb
  name: Explicit(Decimal to SpannerNumeric)
  nameWithType: SpannerNumeric.Explicit(Decimal to SpannerNumeric)
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.Explicit(System.Decimal to Google.Cloud.Spanner.V1.SpannerNumeric)
  type: Operator
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: op_Explicit
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
    startLine: 349
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nExplicit conversion from <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"Google.Cloud.Spanner.V1.SpannerNumeric\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nThis conversion may silently lose precision. Use <xref href=\"Google.Cloud.Spanner.V1.SpannerNumeric.FromDecimal(System.Decimal%2cGoogle.Cloud.Spanner.V1.LossOfPrecisionHandling)\" data-throw-if-not-resolved=\"false\"></xref> passing in <xref href=\"Google.Cloud.Spanner.V1.LossOfPrecisionHandling.Throw\" data-throw-if-not-resolved=\"false\"></xref>\nfor the second argument to avoid any information loss.\n"
  example: []
  syntax:
    content: public static explicit operator SpannerNumeric(decimal value)
    parameters:
    - id: value
      type: System.Decimal
      description: The decimal value to convert.
    return:
      type: Google.Cloud.Spanner.V1.SpannerNumeric
      description: The result of the conversion.
    content.vb: Public Shared Narrowing Operator CType(value As Decimal) As SpannerNumeric
  overload: Google.Cloud.Spanner.V1.SpannerNumeric.op_Explicit*
  nameWithType.vb: SpannerNumeric.Narrowing(Decimal to SpannerNumeric)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Cloud.Spanner.V1.SpannerNumeric.Narrowing(System.Decimal to Google.Cloud.Spanner.V1.SpannerNumeric)
  name.vb: Narrowing(Decimal to SpannerNumeric)
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.op_Implicit(System.Int32)~Google.Cloud.Spanner.V1.SpannerNumeric
  commentId: M:Google.Cloud.Spanner.V1.SpannerNumeric.op_Implicit(System.Int32)~Google.Cloud.Spanner.V1.SpannerNumeric
  id: op_Implicit(System.Int32)~Google.Cloud.Spanner.V1.SpannerNumeric
  parent: Google.Cloud.Spanner.V1.SpannerNumeric
  langs:
  - csharp
  - vb
  name: Implicit(Int32 to SpannerNumeric)
  nameWithType: SpannerNumeric.Implicit(Int32 to SpannerNumeric)
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.Implicit(System.Int32 to Google.Cloud.Spanner.V1.SpannerNumeric)
  type: Operator
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: op_Implicit
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
    startLine: 360
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nImplicit conversion from <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"Google.Cloud.Spanner.V1.SpannerNumeric\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nThis conversion exists to avoid ambiguity between the 64-bit conversions when using an integer literal.\n"
  example: []
  syntax:
    content: public static implicit operator SpannerNumeric(int value)
    parameters:
    - id: value
      type: System.Int32
      description: The integer value to convert.
    return:
      type: Google.Cloud.Spanner.V1.SpannerNumeric
      description: The result of the conversion.
    content.vb: Public Shared Widening Operator CType(value As Integer) As SpannerNumeric
  overload: Google.Cloud.Spanner.V1.SpannerNumeric.op_Implicit*
  nameWithType.vb: SpannerNumeric.Widening(Int32 to SpannerNumeric)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Cloud.Spanner.V1.SpannerNumeric.Widening(System.Int32 to Google.Cloud.Spanner.V1.SpannerNumeric)
  name.vb: Widening(Int32 to SpannerNumeric)
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.op_Implicit(System.Int64)~Google.Cloud.Spanner.V1.SpannerNumeric
  commentId: M:Google.Cloud.Spanner.V1.SpannerNumeric.op_Implicit(System.Int64)~Google.Cloud.Spanner.V1.SpannerNumeric
  id: op_Implicit(System.Int64)~Google.Cloud.Spanner.V1.SpannerNumeric
  parent: Google.Cloud.Spanner.V1.SpannerNumeric
  langs:
  - csharp
  - vb
  name: Implicit(Int64 to SpannerNumeric)
  nameWithType: SpannerNumeric.Implicit(Int64 to SpannerNumeric)
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.Implicit(System.Int64 to Google.Cloud.Spanner.V1.SpannerNumeric)
  type: Operator
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: op_Implicit
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
    startLine: 367
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nImplicit conversion from <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"Google.Cloud.Spanner.V1.SpannerNumeric\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static implicit operator SpannerNumeric(long value)
    parameters:
    - id: value
      type: System.Int64
      description: The integer value to convert.
    return:
      type: Google.Cloud.Spanner.V1.SpannerNumeric
      description: The result of the conversion.
    content.vb: Public Shared Widening Operator CType(value As Long) As SpannerNumeric
  overload: Google.Cloud.Spanner.V1.SpannerNumeric.op_Implicit*
  nameWithType.vb: SpannerNumeric.Widening(Int64 to SpannerNumeric)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Cloud.Spanner.V1.SpannerNumeric.Widening(System.Int64 to Google.Cloud.Spanner.V1.SpannerNumeric)
  name.vb: Widening(Int64 to SpannerNumeric)
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.op_Implicit(System.UInt64)~Google.Cloud.Spanner.V1.SpannerNumeric
  commentId: M:Google.Cloud.Spanner.V1.SpannerNumeric.op_Implicit(System.UInt64)~Google.Cloud.Spanner.V1.SpannerNumeric
  id: op_Implicit(System.UInt64)~Google.Cloud.Spanner.V1.SpannerNumeric
  parent: Google.Cloud.Spanner.V1.SpannerNumeric
  langs:
  - csharp
  - vb
  name: Implicit(UInt64 to SpannerNumeric)
  nameWithType: SpannerNumeric.Implicit(UInt64 to SpannerNumeric)
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.Implicit(System.UInt64 to Google.Cloud.Spanner.V1.SpannerNumeric)
  type: Operator
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: op_Implicit
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
    startLine: 375
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nImplicit conversion from <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"Google.Cloud.Spanner.V1.SpannerNumeric\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static implicit operator SpannerNumeric(ulong value)
    parameters:
    - id: value
      type: System.UInt64
      description: The integer value to convert.
    return:
      type: Google.Cloud.Spanner.V1.SpannerNumeric
      description: The result of the conversion.
    content.vb: Public Shared Widening Operator CType(value As ULong) As SpannerNumeric
  overload: Google.Cloud.Spanner.V1.SpannerNumeric.op_Implicit*
  nameWithType.vb: SpannerNumeric.Widening(UInt64 to SpannerNumeric)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Cloud.Spanner.V1.SpannerNumeric.Widening(System.UInt64 to Google.Cloud.Spanner.V1.SpannerNumeric)
  name.vb: Widening(UInt64 to SpannerNumeric)
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.ToDecimal(Google.Cloud.Spanner.V1.LossOfPrecisionHandling)
  commentId: M:Google.Cloud.Spanner.V1.SpannerNumeric.ToDecimal(Google.Cloud.Spanner.V1.LossOfPrecisionHandling)
  id: ToDecimal(Google.Cloud.Spanner.V1.LossOfPrecisionHandling)
  parent: Google.Cloud.Spanner.V1.SpannerNumeric
  langs:
  - csharp
  - vb
  name: ToDecimal(LossOfPrecisionHandling)
  nameWithType: SpannerNumeric.ToDecimal(LossOfPrecisionHandling)
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.ToDecimal(Google.Cloud.Spanner.V1.LossOfPrecisionHandling)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: ToDecimal
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
    startLine: 390
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nConverts this value to <xref href=\"Google.Cloud.Spanner.V1.SpannerNumeric\" data-throw-if-not-resolved=\"false\"></xref>, \n"
  remarks: "\nThis conversion may silently lose precision, depending on <code data-dev-comment-type=\"paramref\" class=\"paramref\">lossOfPrecisionHandling</code>, but \nwill always throw <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> if value is out of the range of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public decimal ToDecimal(LossOfPrecisionHandling lossOfPrecisionHandling)
    parameters:
    - id: lossOfPrecisionHandling
      type: Google.Cloud.Spanner.V1.LossOfPrecisionHandling
      description: How to handle values with signficant digits that would be lost by the conversion.
    return:
      type: System.Decimal
      description: The converted value.
    content.vb: Public Function ToDecimal(lossOfPrecisionHandling As LossOfPrecisionHandling) As Decimal
  overload: Google.Cloud.Spanner.V1.SpannerNumeric.ToDecimal*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: This value is outside the range of <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.op_Explicit(Google.Cloud.Spanner.V1.SpannerNumeric)~System.Decimal
  commentId: M:Google.Cloud.Spanner.V1.SpannerNumeric.op_Explicit(Google.Cloud.Spanner.V1.SpannerNumeric)~System.Decimal
  id: op_Explicit(Google.Cloud.Spanner.V1.SpannerNumeric)~System.Decimal
  parent: Google.Cloud.Spanner.V1.SpannerNumeric
  langs:
  - csharp
  - vb
  name: Explicit(SpannerNumeric to Decimal)
  nameWithType: SpannerNumeric.Explicit(SpannerNumeric to Decimal)
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.Explicit(Google.Cloud.Spanner.V1.SpannerNumeric to System.Decimal)
  type: Operator
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: op_Explicit
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
    startLine: 414
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nExplicit conversion from <xref href=\"Google.Cloud.Spanner.V1.SpannerNumeric\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nThis conversion may silently lose precision, but will throw <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> if the value is out of\nrange of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>. Use <xref href=\"Google.Cloud.Spanner.V1.SpannerNumeric.ToDecimal(Google.Cloud.Spanner.V1.LossOfPrecisionHandling)\" data-throw-if-not-resolved=\"false\"></xref> passing in <xref href=\"Google.Cloud.Spanner.V1.LossOfPrecisionHandling.Throw\" data-throw-if-not-resolved=\"false\"></xref>\nfor the second argument to avoid any information loss.\n"
  example: []
  syntax:
    content: public static explicit operator decimal (SpannerNumeric value)
    parameters:
    - id: value
      type: Google.Cloud.Spanner.V1.SpannerNumeric
      description: The numeric value to convert.
    return:
      type: System.Decimal
      description: The result of the conversion.
    content.vb: Public Shared Narrowing Operator CType(value As SpannerNumeric) As Decimal
  overload: Google.Cloud.Spanner.V1.SpannerNumeric.op_Explicit*
  nameWithType.vb: SpannerNumeric.Narrowing(SpannerNumeric to Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Cloud.Spanner.V1.SpannerNumeric.Narrowing(Google.Cloud.Spanner.V1.SpannerNumeric to System.Decimal)
  name.vb: Narrowing(SpannerNumeric to Decimal)
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.op_Equality(Google.Cloud.Spanner.V1.SpannerNumeric,Google.Cloud.Spanner.V1.SpannerNumeric)
  commentId: M:Google.Cloud.Spanner.V1.SpannerNumeric.op_Equality(Google.Cloud.Spanner.V1.SpannerNumeric,Google.Cloud.Spanner.V1.SpannerNumeric)
  id: op_Equality(Google.Cloud.Spanner.V1.SpannerNumeric,Google.Cloud.Spanner.V1.SpannerNumeric)
  parent: Google.Cloud.Spanner.V1.SpannerNumeric
  langs:
  - csharp
  - vb
  name: Equality(SpannerNumeric, SpannerNumeric)
  nameWithType: SpannerNumeric.Equality(SpannerNumeric, SpannerNumeric)
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.Equality(Google.Cloud.Spanner.V1.SpannerNumeric, Google.Cloud.Spanner.V1.SpannerNumeric)
  type: Operator
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: op_Equality
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
    startLine: 424
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCompares two values for equality.\n"
  example: []
  syntax:
    content: public static bool operator ==(SpannerNumeric lhs, SpannerNumeric rhs)
    parameters:
    - id: lhs
      type: Google.Cloud.Spanner.V1.SpannerNumeric
      description: The first value to compare.
    - id: rhs
      type: Google.Cloud.Spanner.V1.SpannerNumeric
      description: The second value to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the two arguments are equal; <code>false</code> otherwise.
    content.vb: Public Shared Operator =(lhs As SpannerNumeric, rhs As SpannerNumeric) As Boolean
  overload: Google.Cloud.Spanner.V1.SpannerNumeric.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.op_Inequality(Google.Cloud.Spanner.V1.SpannerNumeric,Google.Cloud.Spanner.V1.SpannerNumeric)
  commentId: M:Google.Cloud.Spanner.V1.SpannerNumeric.op_Inequality(Google.Cloud.Spanner.V1.SpannerNumeric,Google.Cloud.Spanner.V1.SpannerNumeric)
  id: op_Inequality(Google.Cloud.Spanner.V1.SpannerNumeric,Google.Cloud.Spanner.V1.SpannerNumeric)
  parent: Google.Cloud.Spanner.V1.SpannerNumeric
  langs:
  - csharp
  - vb
  name: Inequality(SpannerNumeric, SpannerNumeric)
  nameWithType: SpannerNumeric.Inequality(SpannerNumeric, SpannerNumeric)
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.Inequality(Google.Cloud.Spanner.V1.SpannerNumeric, Google.Cloud.Spanner.V1.SpannerNumeric)
  type: Operator
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: op_Inequality
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
    startLine: 432
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCompares two values for inequality.\n"
  example: []
  syntax:
    content: public static bool operator !=(SpannerNumeric lhs, SpannerNumeric rhs)
    parameters:
    - id: lhs
      type: Google.Cloud.Spanner.V1.SpannerNumeric
      description: The first value to compare.
    - id: rhs
      type: Google.Cloud.Spanner.V1.SpannerNumeric
      description: The second value to compare.
    return:
      type: System.Boolean
      description: <code>false</code> if the two arguments are equal; <code>true</code> otherwise.
    content.vb: Public Shared Operator <>(lhs As SpannerNumeric, rhs As SpannerNumeric) As Boolean
  overload: Google.Cloud.Spanner.V1.SpannerNumeric.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.op_Addition(Google.Cloud.Spanner.V1.SpannerNumeric,Google.Cloud.Spanner.V1.SpannerNumeric)
  commentId: M:Google.Cloud.Spanner.V1.SpannerNumeric.op_Addition(Google.Cloud.Spanner.V1.SpannerNumeric,Google.Cloud.Spanner.V1.SpannerNumeric)
  id: op_Addition(Google.Cloud.Spanner.V1.SpannerNumeric,Google.Cloud.Spanner.V1.SpannerNumeric)
  parent: Google.Cloud.Spanner.V1.SpannerNumeric
  langs:
  - csharp
  - vb
  name: Addition(SpannerNumeric, SpannerNumeric)
  nameWithType: SpannerNumeric.Addition(SpannerNumeric, SpannerNumeric)
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.Addition(Google.Cloud.Spanner.V1.SpannerNumeric, Google.Cloud.Spanner.V1.SpannerNumeric)
  type: Operator
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: op_Addition
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
    startLine: 440
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nReturns the result of adding two <xref href=\"Google.Cloud.Spanner.V1.SpannerNumeric\" data-throw-if-not-resolved=\"false\"></xref> values together.\n"
  example: []
  syntax:
    content: public static SpannerNumeric operator +(SpannerNumeric lhs, SpannerNumeric rhs)
    parameters:
    - id: lhs
      type: Google.Cloud.Spanner.V1.SpannerNumeric
      description: The first value to add.
    - id: rhs
      type: Google.Cloud.Spanner.V1.SpannerNumeric
      description: The second value to add.
    return:
      type: Google.Cloud.Spanner.V1.SpannerNumeric
      description: The result of adding the two values.
    content.vb: Public Shared Operator +(lhs As SpannerNumeric, rhs As SpannerNumeric) As SpannerNumeric
  overload: Google.Cloud.Spanner.V1.SpannerNumeric.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.op_Subtraction(Google.Cloud.Spanner.V1.SpannerNumeric,Google.Cloud.Spanner.V1.SpannerNumeric)
  commentId: M:Google.Cloud.Spanner.V1.SpannerNumeric.op_Subtraction(Google.Cloud.Spanner.V1.SpannerNumeric,Google.Cloud.Spanner.V1.SpannerNumeric)
  id: op_Subtraction(Google.Cloud.Spanner.V1.SpannerNumeric,Google.Cloud.Spanner.V1.SpannerNumeric)
  parent: Google.Cloud.Spanner.V1.SpannerNumeric
  langs:
  - csharp
  - vb
  name: Subtraction(SpannerNumeric, SpannerNumeric)
  nameWithType: SpannerNumeric.Subtraction(SpannerNumeric, SpannerNumeric)
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.Subtraction(Google.Cloud.Spanner.V1.SpannerNumeric, Google.Cloud.Spanner.V1.SpannerNumeric)
  type: Operator
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: op_Subtraction
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
    startLine: 449
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nReturns the result of subtracting one <xref href=\"Google.Cloud.Spanner.V1.SpannerNumeric\" data-throw-if-not-resolved=\"false\"></xref> value from another.\n"
  example: []
  syntax:
    content: public static SpannerNumeric operator -(SpannerNumeric lhs, SpannerNumeric rhs)
    parameters:
    - id: lhs
      type: Google.Cloud.Spanner.V1.SpannerNumeric
      description: The value to subtract from.
    - id: rhs
      type: Google.Cloud.Spanner.V1.SpannerNumeric
      description: The value to subtract.
    return:
      type: Google.Cloud.Spanner.V1.SpannerNumeric
      description: The result of subtracting <code data-dev-comment-type="paramref" class="paramref">rhs</code> from <code data-dev-comment-type="paramref" class="paramref">lhs</code>.
    content.vb: Public Shared Operator -(lhs As SpannerNumeric, rhs As SpannerNumeric) As SpannerNumeric
  overload: Google.Cloud.Spanner.V1.SpannerNumeric.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.op_UnaryPlus(Google.Cloud.Spanner.V1.SpannerNumeric)
  commentId: M:Google.Cloud.Spanner.V1.SpannerNumeric.op_UnaryPlus(Google.Cloud.Spanner.V1.SpannerNumeric)
  id: op_UnaryPlus(Google.Cloud.Spanner.V1.SpannerNumeric)
  parent: Google.Cloud.Spanner.V1.SpannerNumeric
  langs:
  - csharp
  - vb
  name: UnaryPlus(SpannerNumeric)
  nameWithType: SpannerNumeric.UnaryPlus(SpannerNumeric)
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.UnaryPlus(Google.Cloud.Spanner.V1.SpannerNumeric)
  type: Operator
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: op_UnaryPlus
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
    startLine: 457
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nThe unary plus operator, provided mainly for consistency.\n"
  example: []
  syntax:
    content: public static SpannerNumeric operator +(SpannerNumeric value)
    parameters:
    - id: value
      type: Google.Cloud.Spanner.V1.SpannerNumeric
      description: The value to return.
    return:
      type: Google.Cloud.Spanner.V1.SpannerNumeric
      description: The original value.
    content.vb: Public Shared Operator +(value As SpannerNumeric) As SpannerNumeric
  overload: Google.Cloud.Spanner.V1.SpannerNumeric.op_UnaryPlus*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.op_UnaryNegation(Google.Cloud.Spanner.V1.SpannerNumeric)
  commentId: M:Google.Cloud.Spanner.V1.SpannerNumeric.op_UnaryNegation(Google.Cloud.Spanner.V1.SpannerNumeric)
  id: op_UnaryNegation(Google.Cloud.Spanner.V1.SpannerNumeric)
  parent: Google.Cloud.Spanner.V1.SpannerNumeric
  langs:
  - csharp
  - vb
  name: UnaryNegation(SpannerNumeric)
  nameWithType: SpannerNumeric.UnaryNegation(SpannerNumeric)
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.UnaryNegation(Google.Cloud.Spanner.V1.SpannerNumeric)
  type: Operator
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: op_UnaryNegation
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerNumeric.cs
    startLine: 464
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nThe unary negation operator.\n"
  example: []
  syntax:
    content: public static SpannerNumeric operator -(SpannerNumeric value)
    parameters:
    - id: value
      type: Google.Cloud.Spanner.V1.SpannerNumeric
      description: The value to negate.
    return:
      type: Google.Cloud.Spanner.V1.SpannerNumeric
      description: The negation of <code data-dev-comment-type="paramref" class="paramref">value</code>.
    content.vb: Public Shared Operator -(value As SpannerNumeric) As SpannerNumeric
  overload: Google.Cloud.Spanner.V1.SpannerNumeric.op_UnaryNegation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Google.Cloud.Spanner.V1
  commentId: N:Google.Cloud.Spanner.V1
  name: Google.Cloud.Spanner.V1
  nameWithType: Google.Cloud.Spanner.V1
  fullName: Google.Cloud.Spanner.V1
- uid: System.IEquatable{Google.Cloud.Spanner.V1.SpannerNumeric}
  commentId: T:System.IEquatable{Google.Cloud.Spanner.V1.SpannerNumeric}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<SpannerNumeric>
  nameWithType: IEquatable<SpannerNumeric>
  fullName: System.IEquatable<Google.Cloud.Spanner.V1.SpannerNumeric>
  nameWithType.vb: IEquatable(Of SpannerNumeric)
  fullName.vb: System.IEquatable(Of Google.Cloud.Spanner.V1.SpannerNumeric)
  name.vb: IEquatable(Of SpannerNumeric)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Cloud.Spanner.V1.SpannerNumeric
    name: SpannerNumeric
    nameWithType: SpannerNumeric
    fullName: Google.Cloud.Spanner.V1.SpannerNumeric
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Cloud.Spanner.V1.SpannerNumeric
    name: SpannerNumeric
    nameWithType: SpannerNumeric
    fullName: Google.Cloud.Spanner.V1.SpannerNumeric
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{Google.Cloud.Spanner.V1.SpannerNumeric}
  commentId: T:System.IComparable{Google.Cloud.Spanner.V1.SpannerNumeric}
  parent: System
  definition: System.IComparable`1
  name: IComparable<SpannerNumeric>
  nameWithType: IComparable<SpannerNumeric>
  fullName: System.IComparable<Google.Cloud.Spanner.V1.SpannerNumeric>
  nameWithType.vb: IComparable(Of SpannerNumeric)
  fullName.vb: System.IComparable(Of Google.Cloud.Spanner.V1.SpannerNumeric)
  name.vb: IComparable(Of SpannerNumeric)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Cloud.Spanner.V1.SpannerNumeric
    name: SpannerNumeric
    nameWithType: SpannerNumeric
    fullName: Google.Cloud.Spanner.V1.SpannerNumeric
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Cloud.Spanner.V1.SpannerNumeric
    name: SpannerNumeric
    nameWithType: SpannerNumeric
    fullName: Google.Cloud.Spanner.V1.SpannerNumeric
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable
  commentId: T:System.IComparable
  parent: System
  isExternal: true
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Google.Cloud.Spanner.V1.SpannerNumeric
  commentId: T:Google.Cloud.Spanner.V1.SpannerNumeric
  parent: Google.Cloud.Spanner.V1
  name: SpannerNumeric
  nameWithType: SpannerNumeric
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.Zero*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerNumeric.Zero
  name: Zero
  nameWithType: SpannerNumeric.Zero
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.Zero
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.MaxValue*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerNumeric.MaxValue
  name: MaxValue
  nameWithType: SpannerNumeric.MaxValue
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.MaxValue
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.MinValue*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerNumeric.MinValue
  name: MinValue
  nameWithType: SpannerNumeric.MinValue
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.MinValue
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.Epsilon*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerNumeric.Epsilon
  name: Epsilon
  nameWithType: SpannerNumeric.Epsilon
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.Epsilon
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.CompareTo*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerNumeric.CompareTo
  name: CompareTo
  nameWithType: SpannerNumeric.CompareTo
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.CompareTo
- uid: System.IComparable{Google.Cloud.Spanner.V1.SpannerNumeric}.CompareTo(Google.Cloud.Spanner.V1.SpannerNumeric)
  commentId: M:System.IComparable{Google.Cloud.Spanner.V1.SpannerNumeric}.CompareTo(Google.Cloud.Spanner.V1.SpannerNumeric)
  parent: System.IComparable{Google.Cloud.Spanner.V1.SpannerNumeric}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(SpannerNumeric)
  nameWithType: IComparable<SpannerNumeric>.CompareTo(SpannerNumeric)
  fullName: System.IComparable<Google.Cloud.Spanner.V1.SpannerNumeric>.CompareTo(Google.Cloud.Spanner.V1.SpannerNumeric)
  nameWithType.vb: IComparable(Of SpannerNumeric).CompareTo(SpannerNumeric)
  fullName.vb: System.IComparable(Of Google.Cloud.Spanner.V1.SpannerNumeric).CompareTo(Google.Cloud.Spanner.V1.SpannerNumeric)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<SpannerNumeric>.CompareTo
    fullName: System.IComparable<Google.Cloud.Spanner.V1.SpannerNumeric>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Google.Cloud.Spanner.V1.SpannerNumeric
    name: SpannerNumeric
    nameWithType: SpannerNumeric
    fullName: Google.Cloud.Spanner.V1.SpannerNumeric
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of SpannerNumeric).CompareTo
    fullName: System.IComparable(Of Google.Cloud.Spanner.V1.SpannerNumeric).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Google.Cloud.Spanner.V1.SpannerNumeric
    name: SpannerNumeric
    nameWithType: SpannerNumeric
    fullName: Google.Cloud.Spanner.V1.SpannerNumeric
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable.CompareTo(System.Object)
  commentId: M:System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  name: CompareTo(Object)
  nameWithType: IComparable.CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.System#IComparable#CompareTo*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerNumeric.System#IComparable#CompareTo
  name: IComparable.CompareTo
  nameWithType: SpannerNumeric.IComparable.CompareTo
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.System.IComparable.CompareTo
  nameWithType.vb: SpannerNumeric.System.IComparable.CompareTo
  name.vb: System.IComparable.CompareTo
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.GetHashCode*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerNumeric.GetHashCode
  name: GetHashCode
  nameWithType: SpannerNumeric.GetHashCode
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.GetHashCode
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.FormatException
  commentId: T:System.FormatException
  isExternal: true
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.Parse*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerNumeric.Parse
  name: Parse
  nameWithType: SpannerNumeric.Parse
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.Parse
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.Parse(System.String)
  commentId: M:Google.Cloud.Spanner.V1.SpannerNumeric.Parse(System.String)
  isExternal: true
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.TryParse*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerNumeric.TryParse
  name: TryParse
  nameWithType: SpannerNumeric.TryParse
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.TryParse
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.ToString*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerNumeric.ToString
  name: ToString
  nameWithType: SpannerNumeric.ToString
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.ToString
- uid: System.Decimal
  commentId: T:System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.FromDecimal*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerNumeric.FromDecimal
  name: FromDecimal
  nameWithType: SpannerNumeric.FromDecimal
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.FromDecimal
- uid: Google.Cloud.Spanner.V1.LossOfPrecisionHandling
  commentId: T:Google.Cloud.Spanner.V1.LossOfPrecisionHandling
  parent: Google.Cloud.Spanner.V1
  name: LossOfPrecisionHandling
  nameWithType: LossOfPrecisionHandling
  fullName: Google.Cloud.Spanner.V1.LossOfPrecisionHandling
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.FromDecimal(System.Decimal,Google.Cloud.Spanner.V1.LossOfPrecisionHandling)
  commentId: M:Google.Cloud.Spanner.V1.SpannerNumeric.FromDecimal(System.Decimal,Google.Cloud.Spanner.V1.LossOfPrecisionHandling)
  isExternal: true
- uid: Google.Cloud.Spanner.V1.LossOfPrecisionHandling.Throw
  commentId: F:Google.Cloud.Spanner.V1.LossOfPrecisionHandling.Throw
  isExternal: true
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.op_Explicit*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerNumeric.op_Explicit
  name: Explicit
  nameWithType: SpannerNumeric.Explicit
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.Explicit
  nameWithType.vb: SpannerNumeric.Narrowing
  fullName.vb: Google.Cloud.Spanner.V1.SpannerNumeric.Narrowing
  name.vb: Narrowing
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.op_Implicit*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerNumeric.op_Implicit
  name: Implicit
  nameWithType: SpannerNumeric.Implicit
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.Implicit
  nameWithType.vb: SpannerNumeric.Widening
  fullName.vb: Google.Cloud.Spanner.V1.SpannerNumeric.Widening
  name.vb: Widening
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.OverflowException
  commentId: T:System.OverflowException
  isExternal: true
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.ToDecimal*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerNumeric.ToDecimal
  name: ToDecimal
  nameWithType: SpannerNumeric.ToDecimal
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.ToDecimal
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.ToDecimal(Google.Cloud.Spanner.V1.LossOfPrecisionHandling)
  commentId: M:Google.Cloud.Spanner.V1.SpannerNumeric.ToDecimal(Google.Cloud.Spanner.V1.LossOfPrecisionHandling)
  isExternal: true
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.op_Equality*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerNumeric.op_Equality
  name: Equality
  nameWithType: SpannerNumeric.Equality
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.Equality
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.op_Inequality*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerNumeric.op_Inequality
  name: Inequality
  nameWithType: SpannerNumeric.Inequality
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.Inequality
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.op_Addition*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerNumeric.op_Addition
  name: Addition
  nameWithType: SpannerNumeric.Addition
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.Addition
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.op_Subtraction*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerNumeric.op_Subtraction
  name: Subtraction
  nameWithType: SpannerNumeric.Subtraction
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.Subtraction
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.op_UnaryPlus*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerNumeric.op_UnaryPlus
  name: UnaryPlus
  nameWithType: SpannerNumeric.UnaryPlus
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.UnaryPlus
- uid: Google.Cloud.Spanner.V1.SpannerNumeric.op_UnaryNegation*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerNumeric.op_UnaryNegation
  name: UnaryNegation
  nameWithType: SpannerNumeric.UnaryNegation
  fullName: Google.Cloud.Spanner.V1.SpannerNumeric.UnaryNegation
