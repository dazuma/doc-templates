### YamlMime:ManagedReference
items:
- uid: Google.Cloud.Spanner.V1.ReliableStreamReader
  commentId: T:Google.Cloud.Spanner.V1.ReliableStreamReader
  id: ReliableStreamReader
  parent: Google.Cloud.Spanner.V1
  children:
  - Google.Cloud.Spanner.V1.ReliableStreamReader.Close
  - Google.Cloud.Spanner.V1.ReliableStreamReader.Dispose
  - Google.Cloud.Spanner.V1.ReliableStreamReader.Finalize
  - Google.Cloud.Spanner.V1.ReliableStreamReader.GetMetadataAsync(System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.ReliableStreamReader.HasDataAsync(System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.ReliableStreamReader.IsClosed
  - Google.Cloud.Spanner.V1.ReliableStreamReader.NextAsync(System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.ReliableStreamReader.Stats
  - Google.Cloud.Spanner.V1.ReliableStreamReader.StreamClosed
  langs:
  - csharp
  - vb
  name: ReliableStreamReader
  nameWithType: ReliableStreamReader
  fullName: Google.Cloud.Spanner.V1.ReliableStreamReader
  type: Class
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/ReliableStreamReader.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: ReliableStreamReader
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/ReliableStreamReader.cs
    startLine: 30
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nProvides streaming access to a Spanner SQL query that automatically retries, handles\nchunking and recoverable errors.\n"
  example: []
  syntax:
    content: 'public sealed class ReliableStreamReader : IDisposable'
    content.vb: >-
      Public NotInheritable Class ReliableStreamReader
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Google.Cloud.Spanner.V1.ReliableStreamReader.IsClosed
  commentId: P:Google.Cloud.Spanner.V1.ReliableStreamReader.IsClosed
  id: IsClosed
  parent: Google.Cloud.Spanner.V1.ReliableStreamReader
  langs:
  - csharp
  - vb
  name: IsClosed
  nameWithType: ReliableStreamReader.IsClosed
  fullName: Google.Cloud.Spanner.V1.ReliableStreamReader.IsClosed
  type: Property
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/ReliableStreamReader.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: IsClosed
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/ReliableStreamReader.cs
    startLine: 54
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nIndicates whether the reader is closed or not.\n"
  example: []
  syntax:
    content: public bool IsClosed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsClosed As Boolean
  overload: Google.Cloud.Spanner.V1.ReliableStreamReader.IsClosed*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Cloud.Spanner.V1.ReliableStreamReader.Stats
  commentId: P:Google.Cloud.Spanner.V1.ReliableStreamReader.Stats
  id: Stats
  parent: Google.Cloud.Spanner.V1.ReliableStreamReader
  langs:
  - csharp
  - vb
  name: Stats
  nameWithType: ReliableStreamReader.Stats
  fullName: Google.Cloud.Spanner.V1.ReliableStreamReader.Stats
  type: Property
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/ReliableStreamReader.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: Stats
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/ReliableStreamReader.cs
    startLine: 60
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nThe statistics for the results, if present. These are only present on the last RPC\nresponse from the server. They can be observed while that final response is being consumed, or afterwards.\n"
  example: []
  syntax:
    content: public ResultSetStats Stats { get; }
    parameters: []
    return:
      type: Google.Cloud.Spanner.V1.ResultSetStats
    content.vb: Public ReadOnly Property Stats As ResultSetStats
  overload: Google.Cloud.Spanner.V1.ReliableStreamReader.Stats*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Cloud.Spanner.V1.ReliableStreamReader.Dispose
  commentId: M:Google.Cloud.Spanner.V1.ReliableStreamReader.Dispose
  id: Dispose
  parent: Google.Cloud.Spanner.V1.ReliableStreamReader
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ReliableStreamReader.Dispose()
  fullName: Google.Cloud.Spanner.V1.ReliableStreamReader.Dispose()
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/ReliableStreamReader.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: Dispose
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/ReliableStreamReader.cs
    startLine: 63
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Google.Cloud.Spanner.V1.ReliableStreamReader.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Cloud.Spanner.V1.ReliableStreamReader.Close
  commentId: M:Google.Cloud.Spanner.V1.ReliableStreamReader.Close
  id: Close
  parent: Google.Cloud.Spanner.V1.ReliableStreamReader
  langs:
  - csharp
  - vb
  name: Close()
  nameWithType: ReliableStreamReader.Close()
  fullName: Google.Cloud.Spanner.V1.ReliableStreamReader.Close()
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/ReliableStreamReader.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: Close
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/ReliableStreamReader.cs
    startLine: 72
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCloses the stream reader.\n"
  example: []
  syntax:
    content: public void Close()
    content.vb: Public Sub Close
  overload: Google.Cloud.Spanner.V1.ReliableStreamReader.Close*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Cloud.Spanner.V1.ReliableStreamReader.Finalize
  commentId: M:Google.Cloud.Spanner.V1.ReliableStreamReader.Finalize
  id: Finalize
  parent: Google.Cloud.Spanner.V1.ReliableStreamReader
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: ReliableStreamReader.Finalize()
  fullName: Google.Cloud.Spanner.V1.ReliableStreamReader.Finalize()
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/ReliableStreamReader.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: Finalize
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/ReliableStreamReader.cs
    startLine: 83
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  example: []
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: Google.Cloud.Spanner.V1.ReliableStreamReader.Finalize*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Google.Cloud.Spanner.V1.ReliableStreamReader.GetMetadataAsync(System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.ReliableStreamReader.GetMetadataAsync(System.Threading.CancellationToken)
  id: GetMetadataAsync(System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.ReliableStreamReader
  langs:
  - csharp
  - vb
  name: GetMetadataAsync(CancellationToken)
  nameWithType: ReliableStreamReader.GetMetadataAsync(CancellationToken)
  fullName: Google.Cloud.Spanner.V1.ReliableStreamReader.GetMetadataAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/ReliableStreamReader.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: GetMetadataAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/ReliableStreamReader.cs
    startLine: 94
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nAsynchronously retrieves the metadata associated with this stream.\n"
  example: []
  syntax:
    content: public Task<ResultSetMetadata> GetMetadataAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token for the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.ResultSetMetadata}
      description: A task which, when completed, will contain the metadata for the stream.
    content.vb: Public Function GetMetadataAsync(cancellationToken As CancellationToken) As Task(Of ResultSetMetadata)
  overload: Google.Cloud.Spanner.V1.ReliableStreamReader.GetMetadataAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Cloud.Spanner.V1.ReliableStreamReader.StreamClosed
  commentId: E:Google.Cloud.Spanner.V1.ReliableStreamReader.StreamClosed
  id: StreamClosed
  parent: Google.Cloud.Spanner.V1.ReliableStreamReader
  langs:
  - csharp
  - vb
  name: StreamClosed
  nameWithType: ReliableStreamReader.StreamClosed
  fullName: Google.Cloud.Spanner.V1.ReliableStreamReader.StreamClosed
  type: Event
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/ReliableStreamReader.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: StreamClosed
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/ReliableStreamReader.cs
    startLine: 103
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nEvent invoked when the stream is closed.\n"
  example: []
  syntax:
    content: public event EventHandler<StreamClosedEventArgs> StreamClosed
    return:
      type: System.EventHandler{Google.Cloud.Spanner.V1.StreamClosedEventArgs}
    content.vb: Public Event StreamClosed As EventHandler(Of StreamClosedEventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Cloud.Spanner.V1.ReliableStreamReader.HasDataAsync(System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.ReliableStreamReader.HasDataAsync(System.Threading.CancellationToken)
  id: HasDataAsync(System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.ReliableStreamReader
  langs:
  - csharp
  - vb
  name: HasDataAsync(CancellationToken)
  nameWithType: ReliableStreamReader.HasDataAsync(CancellationToken)
  fullName: Google.Cloud.Spanner.V1.ReliableStreamReader.HasDataAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/ReliableStreamReader.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: HasDataAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/ReliableStreamReader.cs
    startLine: 112
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nDetermines whether this stream has any more data or not.\nThis is equivalent to calling <xref href=\"Google.Cloud.Spanner.V1.ReliableStreamReader.NextAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> to see whether the return\nvalue is null, but without consuming the value from the stream.\n"
  example: []
  syntax:
    content: public Task<bool> HasDataAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token for the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A task which, when completed, will indicate whether the stream contains data.
    content.vb: Public Function HasDataAsync(cancellationToken As CancellationToken) As Task(Of Boolean)
  overload: Google.Cloud.Spanner.V1.ReliableStreamReader.HasDataAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Cloud.Spanner.V1.ReliableStreamReader.NextAsync(System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.ReliableStreamReader.NextAsync(System.Threading.CancellationToken)
  id: NextAsync(System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.ReliableStreamReader
  langs:
  - csharp
  - vb
  name: NextAsync(CancellationToken)
  nameWithType: ReliableStreamReader.NextAsync(CancellationToken)
  fullName: Google.Cloud.Spanner.V1.ReliableStreamReader.NextAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/ReliableStreamReader.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: NextAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/ReliableStreamReader.cs
    startLine: 124
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nAsynchronously reads the next value from the stream. A null value indicates the end of the stream.\n"
  example: []
  syntax:
    content: public Task<Value> NextAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token for the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{Google.Protobuf.WellKnownTypes.Value}
      description: A task which, when completed, will provide the next value read from the stream.
    content.vb: Public Function NextAsync(cancellationToken As CancellationToken) As Task(Of Value)
  overload: Google.Cloud.Spanner.V1.ReliableStreamReader.NextAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Google.Cloud.Spanner.V1
  commentId: N:Google.Cloud.Spanner.V1
  name: Google.Cloud.Spanner.V1
  nameWithType: Google.Cloud.Spanner.V1
  fullName: Google.Cloud.Spanner.V1
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Google.Cloud.Spanner.V1.ReliableStreamReader.IsClosed*
  commentId: Overload:Google.Cloud.Spanner.V1.ReliableStreamReader.IsClosed
  name: IsClosed
  nameWithType: ReliableStreamReader.IsClosed
  fullName: Google.Cloud.Spanner.V1.ReliableStreamReader.IsClosed
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Google.Cloud.Spanner.V1.ReliableStreamReader.Stats*
  commentId: Overload:Google.Cloud.Spanner.V1.ReliableStreamReader.Stats
  name: Stats
  nameWithType: ReliableStreamReader.Stats
  fullName: Google.Cloud.Spanner.V1.ReliableStreamReader.Stats
- uid: Google.Cloud.Spanner.V1.ResultSetStats
  commentId: T:Google.Cloud.Spanner.V1.ResultSetStats
  parent: Google.Cloud.Spanner.V1
  name: ResultSetStats
  nameWithType: ResultSetStats
  fullName: Google.Cloud.Spanner.V1.ResultSetStats
- uid: Google.Cloud.Spanner.V1.ReliableStreamReader.Dispose*
  commentId: Overload:Google.Cloud.Spanner.V1.ReliableStreamReader.Dispose
  name: Dispose
  nameWithType: ReliableStreamReader.Dispose
  fullName: Google.Cloud.Spanner.V1.ReliableStreamReader.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Cloud.Spanner.V1.ReliableStreamReader.Close*
  commentId: Overload:Google.Cloud.Spanner.V1.ReliableStreamReader.Close
  name: Close
  nameWithType: ReliableStreamReader.Close
  fullName: Google.Cloud.Spanner.V1.ReliableStreamReader.Close
- uid: Google.Cloud.Spanner.V1.ReliableStreamReader.Finalize*
  commentId: Overload:Google.Cloud.Spanner.V1.ReliableStreamReader.Finalize
  name: Finalize
  nameWithType: ReliableStreamReader.Finalize
  fullName: Google.Cloud.Spanner.V1.ReliableStreamReader.Finalize
- uid: Google.Cloud.Spanner.V1.ReliableStreamReader.GetMetadataAsync*
  commentId: Overload:Google.Cloud.Spanner.V1.ReliableStreamReader.GetMetadataAsync
  name: GetMetadataAsync
  nameWithType: ReliableStreamReader.GetMetadataAsync
  fullName: Google.Cloud.Spanner.V1.ReliableStreamReader.GetMetadataAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.ResultSetMetadata}
  commentId: T:System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.ResultSetMetadata}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ResultSetMetadata>
  nameWithType: Task<ResultSetMetadata>
  fullName: System.Threading.Tasks.Task<Google.Cloud.Spanner.V1.ResultSetMetadata>
  nameWithType.vb: Task(Of ResultSetMetadata)
  fullName.vb: System.Threading.Tasks.Task(Of Google.Cloud.Spanner.V1.ResultSetMetadata)
  name.vb: Task(Of ResultSetMetadata)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Cloud.Spanner.V1.ResultSetMetadata
    name: ResultSetMetadata
    nameWithType: ResultSetMetadata
    fullName: Google.Cloud.Spanner.V1.ResultSetMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Cloud.Spanner.V1.ResultSetMetadata
    name: ResultSetMetadata
    nameWithType: ResultSetMetadata
    fullName: Google.Cloud.Spanner.V1.ResultSetMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.EventHandler{Google.Cloud.Spanner.V1.StreamClosedEventArgs}
  commentId: T:System.EventHandler{Google.Cloud.Spanner.V1.StreamClosedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<StreamClosedEventArgs>
  nameWithType: EventHandler<StreamClosedEventArgs>
  fullName: System.EventHandler<Google.Cloud.Spanner.V1.StreamClosedEventArgs>
  nameWithType.vb: EventHandler(Of StreamClosedEventArgs)
  fullName.vb: System.EventHandler(Of Google.Cloud.Spanner.V1.StreamClosedEventArgs)
  name.vb: EventHandler(Of StreamClosedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Cloud.Spanner.V1.StreamClosedEventArgs
    name: StreamClosedEventArgs
    nameWithType: StreamClosedEventArgs
    fullName: Google.Cloud.Spanner.V1.StreamClosedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Cloud.Spanner.V1.StreamClosedEventArgs
    name: StreamClosedEventArgs
    nameWithType: StreamClosedEventArgs
    fullName: Google.Cloud.Spanner.V1.StreamClosedEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Cloud.Spanner.V1.ReliableStreamReader.NextAsync(System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.ReliableStreamReader.NextAsync(System.Threading.CancellationToken)
  isExternal: true
- uid: Google.Cloud.Spanner.V1.ReliableStreamReader.HasDataAsync*
  commentId: Overload:Google.Cloud.Spanner.V1.ReliableStreamReader.HasDataAsync
  name: HasDataAsync
  nameWithType: ReliableStreamReader.HasDataAsync
  fullName: Google.Cloud.Spanner.V1.ReliableStreamReader.HasDataAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Cloud.Spanner.V1.ReliableStreamReader.NextAsync*
  commentId: Overload:Google.Cloud.Spanner.V1.ReliableStreamReader.NextAsync
  name: NextAsync
  nameWithType: ReliableStreamReader.NextAsync
  fullName: Google.Cloud.Spanner.V1.ReliableStreamReader.NextAsync
- uid: System.Threading.Tasks.Task{Google.Protobuf.WellKnownTypes.Value}
  commentId: T:System.Threading.Tasks.Task{Google.Protobuf.WellKnownTypes.Value}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Value>
  nameWithType: Task<Value>
  fullName: System.Threading.Tasks.Task<Google.Protobuf.WellKnownTypes.Value>
  nameWithType.vb: Task(Of Value)
  fullName.vb: System.Threading.Tasks.Task(Of Google.Protobuf.WellKnownTypes.Value)
  name.vb: Task(Of Value)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Protobuf.WellKnownTypes.Value
    name: Value
    nameWithType: Value
    fullName: Google.Protobuf.WellKnownTypes.Value
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Protobuf.WellKnownTypes.Value
    name: Value
    nameWithType: Value
    fullName: Google.Protobuf.WellKnownTypes.Value
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
