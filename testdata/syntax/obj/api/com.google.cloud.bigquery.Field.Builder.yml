### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.Field.Builder"
  id: "Builder"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.Field.Builder.build()"
  - "com.google.cloud.bigquery.Field.Builder.setDescription(java.lang.String)"
  - "com.google.cloud.bigquery.Field.Builder.setMode(com.google.cloud.bigquery.Field.Mode)"
  - "com.google.cloud.bigquery.Field.Builder.setName(java.lang.String)"
  - "com.google.cloud.bigquery.Field.Builder.setPolicyTags(com.google.cloud.bigquery.PolicyTags)"
  - "com.google.cloud.bigquery.Field.Builder.setType(com.google.cloud.bigquery.LegacySQLTypeName,com.google.cloud.bigquery.Field...)"
  - "com.google.cloud.bigquery.Field.Builder.setType(com.google.cloud.bigquery.LegacySQLTypeName,com.google.cloud.bigquery.FieldList)"
  - "com.google.cloud.bigquery.Field.Builder.setType(com.google.cloud.bigquery.StandardSQLTypeName,com.google.cloud.bigquery.Field...)"
  - "com.google.cloud.bigquery.Field.Builder.setType(com.google.cloud.bigquery.StandardSQLTypeName,com.google.cloud.bigquery.FieldList)"
  langs:
  - "java"
  name: "Field.Builder"
  nameWithType: "Field.Builder"
  fullName: "com.google.cloud.bigquery.Field.Builder"
  type: "Class"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public static final class Field.Builder"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.Field.Builder.Builder()"
  id: "Builder()"
  parent: "com.google.cloud.bigquery.Field.Builder"
  langs:
  - "java"
  name: "Builder()"
  nameWithType: "Field.Builder.Builder()"
  fullName: "com.google.cloud.bigquery.Field.Builder.Builder()"
  overload: "com.google.cloud.bigquery.Field.Builder.Builder*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "private Builder()"
- uid: "com.google.cloud.bigquery.Field.Builder.Builder(com.google.cloud.bigquery.Field)"
  id: "Builder(com.google.cloud.bigquery.Field)"
  parent: "com.google.cloud.bigquery.Field.Builder"
  langs:
  - "java"
  name: "Builder(Field field)"
  nameWithType: "Field.Builder.Builder(Field field)"
  fullName: "com.google.cloud.bigquery.Field.Builder.Builder(Field field)"
  overload: "com.google.cloud.bigquery.Field.Builder.Builder*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "private Builder(Field field)"
    parameters:
    - id: "field"
      type: "com.google.cloud.bigquery.Field"
- uid: "com.google.cloud.bigquery.Field.Builder.build()"
  id: "build()"
  parent: "com.google.cloud.bigquery.Field.Builder"
  langs:
  - "java"
  name: "build()"
  nameWithType: "Field.Builder.build()"
  fullName: "com.google.cloud.bigquery.Field.Builder.build()"
  overload: "com.google.cloud.bigquery.Field.Builder.build*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Creates a `Field` object."
  syntax:
    content: "public Field build()"
    return:
      type: "com.google.cloud.bigquery.Field"
- uid: "com.google.cloud.bigquery.Field.Builder.setDescription(java.lang.String)"
  id: "setDescription(java.lang.String)"
  parent: "com.google.cloud.bigquery.Field.Builder"
  langs:
  - "java"
  name: "setDescription(String description)"
  nameWithType: "Field.Builder.setDescription(String description)"
  fullName: "com.google.cloud.bigquery.Field.Builder.setDescription(String description)"
  overload: "com.google.cloud.bigquery.Field.Builder.setDescription*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the field description. The maximum length is 16K characters."
  syntax:
    content: "public Field.Builder setDescription(String description)"
    parameters:
    - id: "description"
      type: "java.lang.String"
    return:
      type: "com.google.cloud.bigquery.Field.Builder"
- uid: "com.google.cloud.bigquery.Field.Builder.setMode(com.google.cloud.bigquery.Field.Mode)"
  id: "setMode(com.google.cloud.bigquery.Field.Mode)"
  parent: "com.google.cloud.bigquery.Field.Builder"
  langs:
  - "java"
  name: "setMode(Field.Mode mode)"
  nameWithType: "Field.Builder.setMode(Field.Mode mode)"
  fullName: "com.google.cloud.bigquery.Field.Builder.setMode(Field.Mode mode)"
  overload: "com.google.cloud.bigquery.Field.Builder.setMode*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the mode of the field. When not specified <xref uid=\"\" data-throw-if-not-resolved=\"false\">Mode#NULLABLE</xref> is used."
  syntax:
    content: "public Field.Builder setMode(Field.Mode mode)"
    parameters:
    - id: "mode"
      type: "com.google.cloud.bigquery.Field.Mode"
    return:
      type: "com.google.cloud.bigquery.Field.Builder"
- uid: "com.google.cloud.bigquery.Field.Builder.setName(java.lang.String)"
  id: "setName(java.lang.String)"
  parent: "com.google.cloud.bigquery.Field.Builder"
  langs:
  - "java"
  name: "setName(String name)"
  nameWithType: "Field.Builder.setName(String name)"
  fullName: "com.google.cloud.bigquery.Field.Builder.setName(String name)"
  overload: "com.google.cloud.bigquery.Field.Builder.setName*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (\\_), and must start with a letter or underscore. The maximum length is 128 characters."
  syntax:
    content: "public Field.Builder setName(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
    return:
      type: "com.google.cloud.bigquery.Field.Builder"
- uid: "com.google.cloud.bigquery.Field.Builder.setPolicyTags(com.google.cloud.bigquery.PolicyTags)"
  id: "setPolicyTags(com.google.cloud.bigquery.PolicyTags)"
  parent: "com.google.cloud.bigquery.Field.Builder"
  langs:
  - "java"
  name: "setPolicyTags(PolicyTags policyTags)"
  nameWithType: "Field.Builder.setPolicyTags(PolicyTags policyTags)"
  fullName: "com.google.cloud.bigquery.Field.Builder.setPolicyTags(PolicyTags policyTags)"
  overload: "com.google.cloud.bigquery.Field.Builder.setPolicyTags*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the policy tags for the field."
  syntax:
    content: "public Field.Builder setPolicyTags(PolicyTags policyTags)"
    parameters:
    - id: "policyTags"
      type: "com.google.cloud.bigquery.PolicyTags"
    return:
      type: "com.google.cloud.bigquery.Field.Builder"
- uid: "com.google.cloud.bigquery.Field.Builder.setType(com.google.cloud.bigquery.LegacySQLTypeName,com.google.cloud.bigquery.Field...)"
  id: "setType(com.google.cloud.bigquery.LegacySQLTypeName,com.google.cloud.bigquery.Field...)"
  parent: "com.google.cloud.bigquery.Field.Builder"
  langs:
  - "java"
  name: "setType(LegacySQLTypeName type, Field[] subFields)"
  nameWithType: "Field.Builder.setType(LegacySQLTypeName type, Field[] subFields)"
  fullName: "com.google.cloud.bigquery.Field.Builder.setType(LegacySQLTypeName type, Field[] subFields)"
  overload: "com.google.cloud.bigquery.Field.Builder.setType*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the type of the field."
  syntax:
    content: "public Field.Builder setType(LegacySQLTypeName type, Field[] subFields)"
    parameters:
    - id: "type"
      type: "com.google.cloud.bigquery.LegacySQLTypeName"
      description: "BigQuery data type"
    - id: "subFields"
      type: "com.google.cloud.bigquery.Field[]"
      description: "nested schema fields in case if <code>type</code> is <xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.RECORD\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#RECORD</xref>, empty otherwise"
    return:
      type: "com.google.cloud.bigquery.Field.Builder"
- uid: "com.google.cloud.bigquery.Field.Builder.setType(com.google.cloud.bigquery.LegacySQLTypeName,com.google.cloud.bigquery.FieldList)"
  id: "setType(com.google.cloud.bigquery.LegacySQLTypeName,com.google.cloud.bigquery.FieldList)"
  parent: "com.google.cloud.bigquery.Field.Builder"
  langs:
  - "java"
  name: "setType(LegacySQLTypeName type, FieldList subFields)"
  nameWithType: "Field.Builder.setType(LegacySQLTypeName type, FieldList subFields)"
  fullName: "com.google.cloud.bigquery.Field.Builder.setType(LegacySQLTypeName type, FieldList subFields)"
  overload: "com.google.cloud.bigquery.Field.Builder.setType*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the type of the field."
  syntax:
    content: "public Field.Builder setType(LegacySQLTypeName type, FieldList subFields)"
    parameters:
    - id: "type"
      type: "com.google.cloud.bigquery.LegacySQLTypeName"
      description: "BigQuery data type"
    - id: "subFields"
      type: "com.google.cloud.bigquery.FieldList"
      description: "nested schema fields, in case if <code>type</code> is <xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.RECORD\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#RECORD</xref>, <code>null</code> otherwise."
    return:
      type: "com.google.cloud.bigquery.Field.Builder"
- uid: "com.google.cloud.bigquery.Field.Builder.setType(com.google.cloud.bigquery.StandardSQLTypeName,com.google.cloud.bigquery.Field...)"
  id: "setType(com.google.cloud.bigquery.StandardSQLTypeName,com.google.cloud.bigquery.Field...)"
  parent: "com.google.cloud.bigquery.Field.Builder"
  langs:
  - "java"
  name: "setType(StandardSQLTypeName type, Field[] subFields)"
  nameWithType: "Field.Builder.setType(StandardSQLTypeName type, Field[] subFields)"
  fullName: "com.google.cloud.bigquery.Field.Builder.setType(StandardSQLTypeName type, Field[] subFields)"
  overload: "com.google.cloud.bigquery.Field.Builder.setType*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the type of the field."
  syntax:
    content: "public Field.Builder setType(StandardSQLTypeName type, Field[] subFields)"
    parameters:
    - id: "type"
      type: "com.google.cloud.bigquery.StandardSQLTypeName"
      description: "BigQuery data type"
    - id: "subFields"
      type: "com.google.cloud.bigquery.Field[]"
      description: "nested schema fields in case if <code>type</code> is <xref uid=\"com.google.cloud.bigquery.StandardSQLTypeName.STRUCT\" data-throw-if-not-resolved=\"false\">StandardSQLTypeName#STRUCT</xref>, empty otherwise"
    return:
      type: "com.google.cloud.bigquery.Field.Builder"
- uid: "com.google.cloud.bigquery.Field.Builder.setType(com.google.cloud.bigquery.StandardSQLTypeName,com.google.cloud.bigquery.FieldList)"
  id: "setType(com.google.cloud.bigquery.StandardSQLTypeName,com.google.cloud.bigquery.FieldList)"
  parent: "com.google.cloud.bigquery.Field.Builder"
  langs:
  - "java"
  name: "setType(StandardSQLTypeName type, FieldList subFields)"
  nameWithType: "Field.Builder.setType(StandardSQLTypeName type, FieldList subFields)"
  fullName: "com.google.cloud.bigquery.Field.Builder.setType(StandardSQLTypeName type, FieldList subFields)"
  overload: "com.google.cloud.bigquery.Field.Builder.setType*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the type of the field."
  syntax:
    content: "public Field.Builder setType(StandardSQLTypeName type, FieldList subFields)"
    parameters:
    - id: "type"
      type: "com.google.cloud.bigquery.StandardSQLTypeName"
      description: "BigQuery data type"
    - id: "subFields"
      type: "com.google.cloud.bigquery.FieldList"
      description: "nested schema fields in case if <code>type</code> is <xref uid=\"com.google.cloud.bigquery.StandardSQLTypeName.STRUCT\" data-throw-if-not-resolved=\"false\">StandardSQLTypeName#STRUCT</xref>, empty otherwise"
    return:
      type: "com.google.cloud.bigquery.Field.Builder"
references:
- uid: "com.google.cloud.bigquery.Field.Builder.Builder*"
  name: "Builder"
  nameWithType: "Field.Builder.Builder"
  fullName: "com.google.cloud.bigquery.Field.Builder.Builder"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Field"
  name: "Field"
  nameWithType: "Field"
  fullName: "com.google.cloud.bigquery.Field"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.Field.Builder.setName*"
  name: "setName"
  nameWithType: "Field.Builder.setName"
  fullName: "com.google.cloud.bigquery.Field.Builder.setName"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.LegacySQLTypeName"
  name: "LegacySQLTypeName"
  nameWithType: "LegacySQLTypeName"
  fullName: "com.google.cloud.bigquery.LegacySQLTypeName"
- uid: "com.google.cloud.bigquery.Field[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.Field"
    name: "Field"
    fullName: "com.google.cloud.bigquery.Field"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.cloud.bigquery.Field.Builder.setType*"
  name: "setType"
  nameWithType: "Field.Builder.setType"
  fullName: "com.google.cloud.bigquery.Field.Builder.setType"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.StandardSQLTypeName"
  name: "StandardSQLTypeName"
  nameWithType: "StandardSQLTypeName"
  fullName: "com.google.cloud.bigquery.StandardSQLTypeName"
- uid: "com.google.cloud.bigquery.FieldList"
  name: "FieldList"
  nameWithType: "FieldList"
  fullName: "com.google.cloud.bigquery.FieldList"
- uid: "com.google.cloud.bigquery.Field.Mode"
  name: "Field.Mode"
  nameWithType: "Field.Mode"
  fullName: "com.google.cloud.bigquery.Field.Mode"
- uid: "com.google.cloud.bigquery.Field.Builder.setMode*"
  name: "setMode"
  nameWithType: "Field.Builder.setMode"
  fullName: "com.google.cloud.bigquery.Field.Builder.setMode"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Field.Builder.setDescription*"
  name: "setDescription"
  nameWithType: "Field.Builder.setDescription"
  fullName: "com.google.cloud.bigquery.Field.Builder.setDescription"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.PolicyTags"
  name: "PolicyTags"
  nameWithType: "PolicyTags"
  fullName: "com.google.cloud.bigquery.PolicyTags"
- uid: "com.google.cloud.bigquery.Field.Builder.setPolicyTags*"
  name: "setPolicyTags"
  nameWithType: "Field.Builder.setPolicyTags"
  fullName: "com.google.cloud.bigquery.Field.Builder.setPolicyTags"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Field.Builder.build*"
  name: "build"
  nameWithType: "Field.Builder.build"
  fullName: "com.google.cloud.bigquery.Field.Builder.build"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
