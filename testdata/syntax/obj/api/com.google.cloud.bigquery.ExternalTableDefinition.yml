### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.ExternalTableDefinition"
  id: "ExternalTableDefinition"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.ExternalTableDefinition.<F>getFormatOptions()"
  - "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
  - "com.google.cloud.bigquery.ExternalTableDefinition.ExternalTableDefinition()"
  - "com.google.cloud.bigquery.ExternalTableDefinition.getAutodetect()"
  - "com.google.cloud.bigquery.ExternalTableDefinition.getCompression()"
  - "com.google.cloud.bigquery.ExternalTableDefinition.getConnectionId()"
  - "com.google.cloud.bigquery.ExternalTableDefinition.getHivePartitioningOptions()"
  - "com.google.cloud.bigquery.ExternalTableDefinition.getIgnoreUnknownValues()"
  - "com.google.cloud.bigquery.ExternalTableDefinition.getMaxBadRecords()"
  - "com.google.cloud.bigquery.ExternalTableDefinition.getSourceUris()"
  - "com.google.cloud.bigquery.ExternalTableDefinition.getSourceUrisImmut()"
  - "com.google.cloud.bigquery.ExternalTableDefinition.ignoreUnknownValues()"
  - "com.google.cloud.bigquery.ExternalTableDefinition.newBuilder(java.lang.String,com.google.cloud.bigquery.FormatOptions)"
  - "com.google.cloud.bigquery.ExternalTableDefinition.newBuilder(java.lang.String,com.google.cloud.bigquery.Schema,com.google.cloud.bigquery.FormatOptions)"
  - "com.google.cloud.bigquery.ExternalTableDefinition.newBuilder(java.util.List<java.lang.String>,com.google.cloud.bigquery.Schema,com.google.cloud.bigquery.FormatOptions)"
  - "com.google.cloud.bigquery.ExternalTableDefinition.of(java.lang.String,com.google.cloud.bigquery.FormatOptions)"
  - "com.google.cloud.bigquery.ExternalTableDefinition.of(java.lang.String,com.google.cloud.bigquery.Schema,com.google.cloud.bigquery.FormatOptions)"
  - "com.google.cloud.bigquery.ExternalTableDefinition.of(java.util.List<java.lang.String>,com.google.cloud.bigquery.Schema,com.google.cloud.bigquery.FormatOptions)"
  - "com.google.cloud.bigquery.ExternalTableDefinition.toBuilder()"
  langs:
  - "java"
  name: "ExternalTableDefinition"
  nameWithType: "ExternalTableDefinition"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition"
  type: "Class"
  package: "com.google.cloud.bigquery"
  summary: "Google BigQuery external table definition. BigQuery's external tables are tables whose data reside outside of BigQuery but can be queried as normal BigQuery tables. External tables are experimental and might be subject to change or removed."
  syntax:
    content: "public abstract class ExternalTableDefinition extends TableDefinition"
  inheritance:
  - "java.lang.Object"
  - "com.google.cloud.bigquery.TableDefinition"
  inheritedMembers:
  - "com.google.cloud.bigquery.TableDefinition.getSchema()"
  - "com.google.cloud.bigquery.TableDefinition.getType()"
  - "com.google.cloud.bigquery.TableDefinition.toBuilder()"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.<F>getFormatOptions()"
  id: "<F>getFormatOptions()"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition"
  langs:
  - "java"
  name: "<F>getFormatOptions()"
  nameWithType: "ExternalTableDefinition.<F>getFormatOptions()"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.<F>getFormatOptions()"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.getFormatOptions*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the source format, and possibly some parsing options, of the external data. Supported formats are `CSV` and `NEWLINE_DELIMITED_JSON`."
  syntax:
    content: "public F <F>getFormatOptions()"
    return:
      type: "F"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.ExternalTableDefinition()"
  id: "ExternalTableDefinition()"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition"
  langs:
  - "java"
  name: "ExternalTableDefinition()"
  nameWithType: "ExternalTableDefinition.ExternalTableDefinition()"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.ExternalTableDefinition()"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.ExternalTableDefinition*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public ExternalTableDefinition()"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.getAutodetect()"
  id: "getAutodetect()"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition"
  langs:
  - "java"
  name: "getAutodetect()"
  nameWithType: "ExternalTableDefinition.getAutodetect()"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.getAutodetect()"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.getAutodetect*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "\\[Experimental\\] Returns whether automatic detection of schema and format options should be performed."
  syntax:
    content: "public abstract Boolean getAutodetect()"
    return:
      type: "java.lang.Boolean"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.getCompression()"
  id: "getCompression()"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition"
  langs:
  - "java"
  name: "getCompression()"
  nameWithType: "ExternalTableDefinition.getCompression()"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.getCompression()"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.getCompression*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the compression type of the data source."
  syntax:
    content: "public abstract String getCompression()"
    return:
      type: "java.lang.String"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.getConnectionId()"
  id: "getConnectionId()"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition"
  langs:
  - "java"
  name: "getConnectionId()"
  nameWithType: "ExternalTableDefinition.getConnectionId()"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.getConnectionId()"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.getConnectionId*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the connection ID used to connect to external data source."
  syntax:
    content: "public abstract String getConnectionId()"
    return:
      type: "java.lang.String"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.getHivePartitioningOptions()"
  id: "getHivePartitioningOptions()"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition"
  langs:
  - "java"
  name: "getHivePartitioningOptions()"
  nameWithType: "ExternalTableDefinition.getHivePartitioningOptions()"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.getHivePartitioningOptions()"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.getHivePartitioningOptions*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "\\[Experimental\\] Returns the HivePartitioningOptions when the data layout follows Hive partitioning convention"
  syntax:
    content: "public HivePartitioningOptions getHivePartitioningOptions()"
    return:
      type: "com.google.cloud.bigquery.HivePartitioningOptions"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.getIgnoreUnknownValues()"
  id: "getIgnoreUnknownValues()"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition"
  langs:
  - "java"
  name: "getIgnoreUnknownValues()"
  nameWithType: "ExternalTableDefinition.getIgnoreUnknownValues()"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.getIgnoreUnknownValues()"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.getIgnoreUnknownValues*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public abstract Boolean getIgnoreUnknownValues()"
    return:
      type: "java.lang.Boolean"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.getMaxBadRecords()"
  id: "getMaxBadRecords()"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition"
  langs:
  - "java"
  name: "getMaxBadRecords()"
  nameWithType: "ExternalTableDefinition.getMaxBadRecords()"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.getMaxBadRecords()"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.getMaxBadRecords*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result."
  syntax:
    content: "public abstract Integer getMaxBadRecords()"
    return:
      type: "java.lang.Integer"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.getSourceUris()"
  id: "getSourceUris()"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition"
  langs:
  - "java"
  name: "getSourceUris()"
  nameWithType: "ExternalTableDefinition.getSourceUris()"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.getSourceUris()"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.getSourceUris*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the fully-qualified URIs that point to your data in Google Cloud Storage. Each URI can contain one '\\*' wildcard character that must come after the bucket's name. Size limits related to load jobs apply to external data sources, plus an additional limit of 10 GB maximum size across all URIs."
  syntax:
    content: "public List<String> getSourceUris()"
    return:
      type: "java.util.List<java.lang.String>"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.getSourceUrisImmut()"
  id: "getSourceUrisImmut()"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition"
  langs:
  - "java"
  name: "getSourceUrisImmut()"
  nameWithType: "ExternalTableDefinition.getSourceUrisImmut()"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.getSourceUrisImmut()"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.getSourceUrisImmut*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public abstract ImmutableList<String> getSourceUrisImmut()"
    return:
      type: "com.google.common.collect.ImmutableList<java.lang.String>"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.ignoreUnknownValues()"
  id: "ignoreUnknownValues()"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition"
  langs:
  - "java"
  name: "ignoreUnknownValues()"
  nameWithType: "ExternalTableDefinition.ignoreUnknownValues()"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.ignoreUnknownValues()"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.ignoreUnknownValues*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns whether BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The value of <xref uid=\"com.google.cloud.bigquery.ExternalTableDefinition.&lt;F&gt;getFormatOptions()\" data-throw-if-not-resolved=\"false\">#getFormatOptions()</xref> determines what BigQuery treats as an extra value."
  syntax:
    content: "public Boolean ignoreUnknownValues()"
    return:
      type: "java.lang.Boolean"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.newBuilder(java.lang.String,com.google.cloud.bigquery.FormatOptions)"
  id: "newBuilder(java.lang.String,com.google.cloud.bigquery.FormatOptions)"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition"
  langs:
  - "java"
  name: "newBuilder(String sourceUri, FormatOptions format)"
  nameWithType: "ExternalTableDefinition.newBuilder(String sourceUri, FormatOptions format)"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.newBuilder(String sourceUri, FormatOptions format)"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.newBuilder*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Creates a builder for an ExternalTableDefinition object."
  syntax:
    content: "public static ExternalTableDefinition.Builder newBuilder(String sourceUri, FormatOptions format)"
    parameters:
    - id: "sourceUri"
      type: "java.lang.String"
      description: "the fully-qualified URIs that point to your data in Google Cloud. For Google\n     Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and\n     valid HTTPS URL for a Google Cloud Bigtable table. Size limits related to load jobs apply\n     to external data sources, plus an additional limit of 10 GB maximum size across all URIs."
    - id: "format"
      type: "com.google.cloud.bigquery.FormatOptions"
      description: "the source format of the external data"
    return:
      type: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
      description: "a builder for an ExternalTableDefinition object given source URIs and format"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.newBuilder(java.lang.String,com.google.cloud.bigquery.Schema,com.google.cloud.bigquery.FormatOptions)"
  id: "newBuilder(java.lang.String,com.google.cloud.bigquery.Schema,com.google.cloud.bigquery.FormatOptions)"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition"
  langs:
  - "java"
  name: "newBuilder(String sourceUri, Schema schema, FormatOptions format)"
  nameWithType: "ExternalTableDefinition.newBuilder(String sourceUri, Schema schema, FormatOptions format)"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.newBuilder(String sourceUri, Schema schema, FormatOptions format)"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.newBuilder*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Creates a builder for an ExternalTableDefinition object."
  syntax:
    content: "public static ExternalTableDefinition.Builder newBuilder(String sourceUri, Schema schema, FormatOptions format)"
    parameters:
    - id: "sourceUri"
      type: "java.lang.String"
      description: "a fully-qualified URI that points to your data in Google Cloud Storage. The\n     URI can contain one '*' wildcard character that must come after the bucket's name. Size\n     limits related to load jobs apply to external data sources."
    - id: "schema"
      type: "com.google.cloud.bigquery.Schema"
      description: "the schema for the external data"
    - id: "format"
      type: "com.google.cloud.bigquery.FormatOptions"
      description: "the source format of the external data"
    return:
      type: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
      description: "a builder for an ExternalTableDefinition object given source URI, schema and format"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.newBuilder(java.util.List<java.lang.String>,com.google.cloud.bigquery.Schema,com.google.cloud.bigquery.FormatOptions)"
  id: "newBuilder(java.util.List<java.lang.String>,com.google.cloud.bigquery.Schema,com.google.cloud.bigquery.FormatOptions)"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition"
  langs:
  - "java"
  name: "newBuilder(List<String> sourceUris, Schema schema, FormatOptions format)"
  nameWithType: "ExternalTableDefinition.newBuilder(List<String> sourceUris, Schema schema, FormatOptions format)"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.newBuilder(List<String> sourceUris, Schema schema, FormatOptions format)"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.newBuilder*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Creates a builder for an ExternalTableDefinition object."
  syntax:
    content: "public static ExternalTableDefinition.Builder newBuilder(List<String> sourceUris, Schema schema, FormatOptions format)"
    parameters:
    - id: "sourceUris"
      type: "java.util.List<java.lang.String>"
      description: "the fully-qualified URIs that point to your data in Google Cloud Storage.\n     Each URI can contain one '*' wildcard character that must come after the bucket's name.\n     Size limits related to load jobs apply to external data sources, plus an additional limit\n     of 10 GB maximum size across all URIs."
    - id: "schema"
      type: "com.google.cloud.bigquery.Schema"
      description: "the schema for the external data"
    - id: "format"
      type: "com.google.cloud.bigquery.FormatOptions"
      description: "the source format of the external data"
    return:
      type: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
      description: "a builder for an ExternalTableDefinition object given source URIs, schema and format"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.of(java.lang.String,com.google.cloud.bigquery.FormatOptions)"
  id: "of(java.lang.String,com.google.cloud.bigquery.FormatOptions)"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition"
  langs:
  - "java"
  name: "of(String sourceUri, FormatOptions format)"
  nameWithType: "ExternalTableDefinition.of(String sourceUri, FormatOptions format)"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.of(String sourceUri, FormatOptions format)"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.of*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Creates a builder for an ExternalTableDefinition object."
  syntax:
    content: "public static ExternalTableDefinition of(String sourceUri, FormatOptions format)"
    parameters:
    - id: "sourceUri"
      type: "java.lang.String"
      description: "the fully-qualified URIs that point to your data in Google Cloud. For Google\n     Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and\n     valid HTTPS URL for a Google Cloud Bigtable table. Size limits related to load jobs apply\n     to external data sources, plus an additional limit of 10 GB maximum size across all URIs."
    - id: "format"
      type: "com.google.cloud.bigquery.FormatOptions"
      description: "the source format of the external data"
    return:
      type: "com.google.cloud.bigquery.ExternalTableDefinition"
      description: "a builder for an ExternalTableDefinition object given source URIs and format"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.of(java.lang.String,com.google.cloud.bigquery.Schema,com.google.cloud.bigquery.FormatOptions)"
  id: "of(java.lang.String,com.google.cloud.bigquery.Schema,com.google.cloud.bigquery.FormatOptions)"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition"
  langs:
  - "java"
  name: "of(String sourceUri, Schema schema, FormatOptions format)"
  nameWithType: "ExternalTableDefinition.of(String sourceUri, Schema schema, FormatOptions format)"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.of(String sourceUri, Schema schema, FormatOptions format)"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.of*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Creates an ExternalTableDefinition object."
  syntax:
    content: "public static ExternalTableDefinition of(String sourceUri, Schema schema, FormatOptions format)"
    parameters:
    - id: "sourceUri"
      type: "java.lang.String"
      description: "a fully-qualified URI that points to your data in Google Cloud Storage. The\n     URI can contain one '*' wildcard character that must come after the bucket's name. Size\n     limits related to load jobs apply to external data sources."
    - id: "schema"
      type: "com.google.cloud.bigquery.Schema"
      description: "the schema for the external data"
    - id: "format"
      type: "com.google.cloud.bigquery.FormatOptions"
      description: "the source format of the external data"
    return:
      type: "com.google.cloud.bigquery.ExternalTableDefinition"
      description: "an ExternalTableDefinition object given source URIs, schema and format"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.of(java.util.List<java.lang.String>,com.google.cloud.bigquery.Schema,com.google.cloud.bigquery.FormatOptions)"
  id: "of(java.util.List<java.lang.String>,com.google.cloud.bigquery.Schema,com.google.cloud.bigquery.FormatOptions)"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition"
  langs:
  - "java"
  name: "of(List<String> sourceUris, Schema schema, FormatOptions format)"
  nameWithType: "ExternalTableDefinition.of(List<String> sourceUris, Schema schema, FormatOptions format)"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.of(List<String> sourceUris, Schema schema, FormatOptions format)"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.of*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Creates an ExternalTableDefinition object."
  syntax:
    content: "public static ExternalTableDefinition of(List<String> sourceUris, Schema schema, FormatOptions format)"
    parameters:
    - id: "sourceUris"
      type: "java.util.List<java.lang.String>"
      description: "the fully-qualified URIs that point to your data in Google Cloud Storage.\n     Each URI can contain one '*' wildcard character that must come after the bucket's name.\n     Size limits related to load jobs apply to external data sources, plus an additional limit\n     of 10 GB maximum size across all URIs."
    - id: "schema"
      type: "com.google.cloud.bigquery.Schema"
      description: "the schema for the external data"
    - id: "format"
      type: "com.google.cloud.bigquery.FormatOptions"
      description: "the source format of the external data"
    return:
      type: "com.google.cloud.bigquery.ExternalTableDefinition"
      description: "an ExternalTableDefinition object given source URIs, schema and format"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.toBuilder()"
  id: "toBuilder()"
  parent: "com.google.cloud.bigquery.ExternalTableDefinition"
  langs:
  - "java"
  name: "toBuilder()"
  nameWithType: "ExternalTableDefinition.toBuilder()"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.toBuilder()"
  overload: "com.google.cloud.bigquery.ExternalTableDefinition.toBuilder*"
  overridden: "com.google.cloud.bigquery.TableDefinition.toBuilder()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a builder for the `ExternalTableDefinition` object."
  syntax:
    content: "public abstract ExternalTableDefinition.Builder toBuilder()"
    return:
      type: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
references:
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.ExternalTableDefinition*"
  name: "ExternalTableDefinition"
  nameWithType: "ExternalTableDefinition.ExternalTableDefinition"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.ExternalTableDefinition"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.getCompression*"
  name: "getCompression"
  nameWithType: "ExternalTableDefinition.getCompression"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.getCompression"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.getConnectionId*"
  name: "getConnectionId"
  nameWithType: "ExternalTableDefinition.getConnectionId"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.getConnectionId"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Boolean"
  spec.java:
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.ignoreUnknownValues*"
  name: "ignoreUnknownValues"
  nameWithType: "ExternalTableDefinition.ignoreUnknownValues"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.ignoreUnknownValues"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.getIgnoreUnknownValues*"
  name: "getIgnoreUnknownValues"
  nameWithType: "ExternalTableDefinition.getIgnoreUnknownValues"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.getIgnoreUnknownValues"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Integer"
  spec.java:
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.getMaxBadRecords*"
  name: "getMaxBadRecords"
  nameWithType: "ExternalTableDefinition.getMaxBadRecords"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.getMaxBadRecords"
  package: "com.google.cloud.bigquery"
- uid: "java.util.List<java.lang.String>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.getSourceUris*"
  name: "getSourceUris"
  nameWithType: "ExternalTableDefinition.getSourceUris"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.getSourceUris"
  package: "com.google.cloud.bigquery"
- uid: "com.google.common.collect.ImmutableList<java.lang.String>"
  spec.java:
  - uid: "com.google.common.collect.ImmutableList"
    name: "ImmutableList"
    fullName: "com.google.common.collect.ImmutableList"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.getSourceUrisImmut*"
  name: "getSourceUrisImmut"
  nameWithType: "ExternalTableDefinition.getSourceUrisImmut"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.getSourceUrisImmut"
  package: "com.google.cloud.bigquery"
- uid: "F"
  spec.java:
  - uid: "F"
    name: "F"
    fullName: "F"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.getFormatOptions*"
  name: "<F>getFormatOptions"
  nameWithType: "ExternalTableDefinition.<F>getFormatOptions"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.<F>getFormatOptions"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.getAutodetect*"
  name: "getAutodetect"
  nameWithType: "ExternalTableDefinition.getAutodetect"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.getAutodetect"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.HivePartitioningOptions"
  name: "HivePartitioningOptions"
  nameWithType: "HivePartitioningOptions"
  fullName: "com.google.cloud.bigquery.HivePartitioningOptions"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.getHivePartitioningOptions*"
  name: "getHivePartitioningOptions"
  nameWithType: "ExternalTableDefinition.getHivePartitioningOptions"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.getHivePartitioningOptions"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
  name: "ExternalTableDefinition.Builder"
  nameWithType: "ExternalTableDefinition.Builder"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.Builder"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.toBuilder*"
  name: "toBuilder"
  nameWithType: "ExternalTableDefinition.toBuilder"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.toBuilder"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Schema"
  name: "Schema"
  nameWithType: "Schema"
  fullName: "com.google.cloud.bigquery.Schema"
- uid: "com.google.cloud.bigquery.FormatOptions"
  name: "FormatOptions"
  nameWithType: "FormatOptions"
  fullName: "com.google.cloud.bigquery.FormatOptions"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.newBuilder*"
  name: "newBuilder"
  nameWithType: "ExternalTableDefinition.newBuilder"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.newBuilder"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.ExternalTableDefinition.of*"
  name: "of"
  nameWithType: "ExternalTableDefinition.of"
  fullName: "com.google.cloud.bigquery.ExternalTableDefinition.of"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TableDefinition"
  name: "TableDefinition"
  nameWithType: "TableDefinition"
  fullName: "com.google.cloud.bigquery.TableDefinition"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "com.google.cloud.bigquery.TableDefinition.toBuilder()"
  name: "TableDefinition.toBuilder()"
  nameWithType: "TableDefinition.toBuilder()"
  fullName: "com.google.cloud.bigquery.TableDefinition.toBuilder()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "com.google.cloud.bigquery.TableDefinition.getType()"
  name: "TableDefinition.getType()"
  nameWithType: "TableDefinition.getType()"
  fullName: "com.google.cloud.bigquery.TableDefinition.getType()"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.TableDefinition.getSchema()"
  name: "TableDefinition.getSchema()"
  nameWithType: "TableDefinition.getSchema()"
  fullName: "com.google.cloud.bigquery.TableDefinition.getSchema()"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "com.google.common.collect.ImmutableList"
  name: "ImmutableList"
  nameWithType: "ImmutableList"
  fullName: "com.google.common.collect.ImmutableList"
