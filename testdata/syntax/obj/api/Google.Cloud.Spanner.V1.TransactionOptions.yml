### YamlMime:ManagedReference
items:
- uid: Google.Cloud.Spanner.V1.TransactionOptions
  commentId: T:Google.Cloud.Spanner.V1.TransactionOptions
  id: TransactionOptions
  parent: Google.Cloud.Spanner.V1
  children:
  - Google.Cloud.Spanner.V1.TransactionOptions.#ctor
  - Google.Cloud.Spanner.V1.TransactionOptions.#ctor(Google.Cloud.Spanner.V1.TransactionOptions)
  - Google.Cloud.Spanner.V1.TransactionOptions.ModeCase
  - Google.Cloud.Spanner.V1.TransactionOptions.PartitionedDml
  - Google.Cloud.Spanner.V1.TransactionOptions.ReadOnly
  - Google.Cloud.Spanner.V1.TransactionOptions.ReadWrite
  langs:
  - csharp
  - vb
  name: TransactionOptions
  nameWithType: TransactionOptions
  fullName: Google.Cloud.Spanner.V1.TransactionOptions
  type: Class
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Transaction.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: TransactionOptions
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Transaction.cs
    startLine: 346
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\n# Transactions\n\nEach session can have at most one active transaction at a time (note that\nstandalone reads and queries use a transaction internally and do count\ntowards the one transaction limit). After the active transaction is\ncompleted, the session can immediately be re-used for the next transaction.\nIt is not necessary to create a new session for each transaction.\n\n# Transaction Modes\n\nCloud Spanner supports three transaction modes:\n\n1. Locking read-write. This type of transaction is the only way\nto write data into Cloud Spanner. These transactions rely on\npessimistic locking and, if necessary, two-phase commit.\nLocking read-write transactions may abort, requiring the\napplication to retry.\n\n2. Snapshot read-only. This transaction type provides guaranteed\nconsistency across several reads, but does not allow\nwrites. Snapshot read-only transactions can be configured to\nread at timestamps in the past. Snapshot read-only\ntransactions do not need to be committed.\n\n3. Partitioned DML. This type of transaction is used to execute\na single Partitioned DML statement. Partitioned DML partitions\nthe key space and runs the DML statement over each partition\nin parallel using separate, internal transactions that commit\nindependently. Partitioned DML transactions do not need to be\ncommitted.\n\nFor transactions that only read, snapshot read-only transactions\nprovide simpler semantics and are almost always faster. In\nparticular, read-only transactions do not take locks, so they do\nnot conflict with read-write transactions. As a consequence of not\ntaking locks, they also do not abort, so retry loops are not needed.\n\nTransactions may only read/write data in a single database. They\nmay, however, read/write data in different tables within that\ndatabase.\n\n## Locking Read-Write Transactions\n\nLocking transactions may be used to atomically read-modify-write\ndata anywhere in a database. This type of transaction is externally\nconsistent.\n\nClients should attempt to minimize the amount of time a transaction\nis active. Faster transactions commit with higher probability\nand cause less contention. Cloud Spanner attempts to keep read locks\nactive as long as the transaction continues to do reads, and the\ntransaction has not been terminated by\n[Commit][google.spanner.v1.Spanner.Commit] or\n[Rollback][google.spanner.v1.Spanner.Rollback].  Long periods of\ninactivity at the client may cause Cloud Spanner to release a\ntransaction&apos;s locks and abort it.\n\nConceptually, a read-write transaction consists of zero or more\nreads or SQL statements followed by\n[Commit][google.spanner.v1.Spanner.Commit]. At any time before\n[Commit][google.spanner.v1.Spanner.Commit], the client can send a\n[Rollback][google.spanner.v1.Spanner.Rollback] request to abort the\ntransaction.\n\n### Semantics\n\nCloud Spanner can commit the transaction if all read locks it acquired\nare still valid at commit time, and it is able to acquire write\nlocks for all writes. Cloud Spanner can abort the transaction for any\nreason. If a commit attempt returns `ABORTED`, Cloud Spanner guarantees\nthat the transaction has not modified any user data in Cloud Spanner.\n\nUnless the transaction commits, Cloud Spanner makes no guarantees about\nhow long the transaction&apos;s locks were held for. It is an error to\nuse Cloud Spanner locks for any sort of mutual exclusion other than\nbetween Cloud Spanner transactions themselves.\n\n### Retrying Aborted Transactions\n\nWhen a transaction aborts, the application can choose to retry the\nwhole transaction again. To maximize the chances of successfully\ncommitting the retry, the client should execute the retry in the\nsame session as the original attempt. The original session&apos;s lock\npriority increases with each consecutive abort, meaning that each\nattempt has a slightly better chance of success than the previous.\n\nUnder some circumstances (e.g., many transactions attempting to\nmodify the same row(s)), a transaction can abort many times in a\nshort period before successfully committing. Thus, it is not a good\nidea to cap the number of retries a transaction can attempt;\ninstead, it is better to limit the total amount of wall time spent\nretrying.\n\n### Idle Transactions\n\nA transaction is considered idle if it has no outstanding reads or\nSQL queries and has not started a read or SQL query within the last 10\nseconds. Idle transactions can be aborted by Cloud Spanner so that they\ndon&apos;t hold on to locks indefinitely. In that case, the commit will\nfail with error `ABORTED`.\n\nIf this behavior is undesirable, periodically executing a simple\nSQL query in the transaction (e.g., `SELECT 1`) prevents the\ntransaction from becoming idle.\n\n## Snapshot Read-Only Transactions\n\nSnapshot read-only transactions provides a simpler method than\nlocking read-write transactions for doing several consistent\nreads. However, this type of transaction does not support writes.\n\nSnapshot transactions do not take locks. Instead, they work by\nchoosing a Cloud Spanner timestamp, then executing all reads at that\ntimestamp. Since they do not acquire locks, they do not block\nconcurrent read-write transactions.\n\nUnlike locking read-write transactions, snapshot read-only\ntransactions never abort. They can fail if the chosen read\ntimestamp is garbage collected; however, the default garbage\ncollection policy is generous enough that most applications do not\nneed to worry about this in practice.\n\nSnapshot read-only transactions do not need to call\n[Commit][google.spanner.v1.Spanner.Commit] or\n[Rollback][google.spanner.v1.Spanner.Rollback] (and in fact are not\npermitted to do so).\n\nTo execute a snapshot transaction, the client specifies a timestamp\nbound, which tells Cloud Spanner how to choose a read timestamp.\n\nThe types of timestamp bound are:\n\n- Strong (the default).\n- Bounded staleness.\n- Exact staleness.\n\nIf the Cloud Spanner database to be read is geographically distributed,\nstale read-only transactions can execute more quickly than strong\nor read-write transaction, because they are able to execute far\nfrom the leader replica.\n\nEach type of timestamp bound is discussed in detail below.\n\n### Strong\n\nStrong reads are guaranteed to see the effects of all transactions\nthat have committed before the start of the read. Furthermore, all\nrows yielded by a single read are consistent with each other -- if\nany part of the read observes a transaction, all parts of the read\nsee the transaction.\n\nStrong reads are not repeatable: two consecutive strong read-only\ntransactions might return inconsistent results if there are\nconcurrent writes. If consistency across reads is required, the\nreads should be executed within a transaction or at an exact read\ntimestamp.\n\nSee [TransactionOptions.ReadOnly.strong][google.spanner.v1.TransactionOptions.ReadOnly.strong].\n\n### Exact Staleness\n\nThese timestamp bounds execute reads at a user-specified\ntimestamp. Reads at a timestamp are guaranteed to see a consistent\nprefix of the global transaction history: they observe\nmodifications done by all transactions with a commit timestamp &lt;=\nthe read timestamp, and observe none of the modifications done by\ntransactions with a larger commit timestamp. They will block until\nall conflicting transactions that may be assigned commit timestamps\n&lt;= the read timestamp have finished.\n\nThe timestamp can either be expressed as an absolute Cloud Spanner commit\ntimestamp or a staleness relative to the current time.\n\nThese modes do not require a &quot;negotiation phase&quot; to pick a\ntimestamp. As a result, they execute slightly faster than the\nequivalent boundedly stale concurrency modes. On the other hand,\nboundedly stale reads usually return fresher results.\n\nSee [TransactionOptions.ReadOnly.read_timestamp][google.spanner.v1.TransactionOptions.ReadOnly.read_timestamp] and\n[TransactionOptions.ReadOnly.exact_staleness][google.spanner.v1.TransactionOptions.ReadOnly.exact_staleness].\n\n### Bounded Staleness\n\nBounded staleness modes allow Cloud Spanner to pick the read timestamp,\nsubject to a user-provided staleness bound. Cloud Spanner chooses the\nnewest timestamp within the staleness bound that allows execution\nof the reads at the closest available replica without blocking.\n\nAll rows yielded are consistent with each other -- if any part of\nthe read observes a transaction, all parts of the read see the\ntransaction. Boundedly stale reads are not repeatable: two stale\nreads, even if they use the same staleness bound, can execute at\ndifferent timestamps and thus return inconsistent results.\n\nBoundedly stale reads execute in two phases: the first phase\nnegotiates a timestamp among all replicas needed to serve the\nread. In the second phase, reads are executed at the negotiated\ntimestamp.\n\nAs a result of the two phase execution, bounded staleness reads are\nusually a little slower than comparable exact staleness\nreads. However, they are typically able to return fresher\nresults, and are more likely to execute at the closest replica.\n\nBecause the timestamp negotiation requires up-front knowledge of\nwhich rows will be read, it can only be used with single-use\nread-only transactions.\n\nSee [TransactionOptions.ReadOnly.max_staleness][google.spanner.v1.TransactionOptions.ReadOnly.max_staleness] and\n[TransactionOptions.ReadOnly.min_read_timestamp][google.spanner.v1.TransactionOptions.ReadOnly.min_read_timestamp].\n\n### Old Read Timestamps and Garbage Collection\n\nCloud Spanner continuously garbage collects deleted and overwritten data\nin the background to reclaim storage space. This process is known\nas &quot;version GC&quot;. By default, version GC reclaims versions after they\nare one hour old. Because of this, Cloud Spanner cannot perform reads\nat read timestamps more than one hour in the past. This\nrestriction also applies to in-progress reads and/or SQL queries whose\ntimestamp become too old while executing. Reads and SQL queries with\ntoo-old read timestamps fail with the error `FAILED_PRECONDITION`.\n\n## Partitioned DML Transactions\n\nPartitioned DML transactions are used to execute DML statements with a\ndifferent execution strategy that provides different, and often better,\nscalability properties for large, table-wide operations than DML in a\nReadWrite transaction. Smaller scoped statements, such as an OLTP workload,\nshould prefer using ReadWrite transactions.\n\nPartitioned DML partitions the keyspace and runs the DML statement on each\npartition in separate, internal transactions. These transactions commit\nautomatically when complete, and run independently from one another.\n\nTo reduce lock contention, this execution strategy only acquires read locks\non rows that match the WHERE clause of the statement. Additionally, the\nsmaller per-partition transactions hold locks for less time.\n\nThat said, Partitioned DML is not a drop-in replacement for standard DML used\nin ReadWrite transactions.\n\n- The DML statement must be fully-partitionable. Specifically, the statement\nmust be expressible as the union of many statements which each access only\na single row of the table.\n\n- The statement is not applied atomically to all rows of the table. Rather,\nthe statement is applied atomically to partitions of the table, in\nindependent transactions. Secondary index rows are updated atomically\nwith the base table rows.\n\n- Partitioned DML does not guarantee exactly-once execution semantics\nagainst a partition. The statement will be applied at least once to each\npartition. It is strongly recommended that the DML statement should be\nidempotent to avoid unexpected results. For instance, it is potentially\ndangerous to run a statement such as\n`UPDATE table SET column = column + 1` as it could be run multiple times\nagainst some rows.\n\n- The partitions are committed automatically - there is no support for\nCommit or Rollback. If the call returns an error, or if the client issuing\nthe ExecuteSql call dies, it is possible that some rows had the statement\nexecuted on them successfully. It is also possible that statement was\nnever executed against other rows.\n\n- Partitioned DML transactions may only contain the execution of a single\nDML statement via ExecuteSql or ExecuteStreamingSql.\n\n- If any error is encountered during the execution of the partitioned DML\noperation (for instance, a UNIQUE INDEX violation, division by zero, or a\nvalue that cannot be stored due to schema constraints), then the\noperation is stopped at that point and an error is returned. It is\npossible that at this point, some partitions have been committed (or even\ncommitted multiple times), and other partitions have not been run at all.\n\nGiven the above, Partitioned DML is good fit for large, database-wide,\noperations that are idempotent, such as deleting old rows from a very large\ntable.\n"
  example: []
  syntax:
    content: 'public sealed class TransactionOptions : IMessage<TransactionOptions>, IEquatable<TransactionOptions>, IDeepCloneable<TransactionOptions>, IBufferMessage, IMessage'
    content.vb: >-
      Public NotInheritable Class TransactionOptions
          Implements IMessage(Of TransactionOptions), IEquatable(Of TransactionOptions), IDeepCloneable(Of TransactionOptions), IBufferMessage, IMessage
  inheritance:
  - System.Object
  implements:
  - Google.Protobuf.IMessage{Google.Cloud.Spanner.V1.TransactionOptions}
  - System.IEquatable{Google.Cloud.Spanner.V1.TransactionOptions}
  - Google.Protobuf.IDeepCloneable{Google.Cloud.Spanner.V1.TransactionOptions}
  - Google.Protobuf.IBufferMessage
  - Google.Protobuf.IMessage
  inheritedMembers:
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Google.Cloud.Spanner.V1.TransactionOptions.#ctor
  commentId: M:Google.Cloud.Spanner.V1.TransactionOptions.#ctor
  id: '#ctor'
  parent: Google.Cloud.Spanner.V1.TransactionOptions
  langs:
  - csharp
  - vb
  name: TransactionOptions()
  nameWithType: TransactionOptions.TransactionOptions()
  fullName: Google.Cloud.Spanner.V1.TransactionOptions.TransactionOptions()
  type: Constructor
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Transaction.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: .ctor
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Transaction.cs
    startLine: 366
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  syntax:
    content: public TransactionOptions()
    content.vb: Public Sub New
  overload: Google.Cloud.Spanner.V1.TransactionOptions.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Cloud.Spanner.V1.TransactionOptions.#ctor(Google.Cloud.Spanner.V1.TransactionOptions)
  commentId: M:Google.Cloud.Spanner.V1.TransactionOptions.#ctor(Google.Cloud.Spanner.V1.TransactionOptions)
  id: '#ctor(Google.Cloud.Spanner.V1.TransactionOptions)'
  parent: Google.Cloud.Spanner.V1.TransactionOptions
  langs:
  - csharp
  - vb
  name: TransactionOptions(TransactionOptions)
  nameWithType: TransactionOptions.TransactionOptions(TransactionOptions)
  fullName: Google.Cloud.Spanner.V1.TransactionOptions.TransactionOptions(Google.Cloud.Spanner.V1.TransactionOptions)
  type: Constructor
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Transaction.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: .ctor
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Transaction.cs
    startLine: 373
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  syntax:
    content: public TransactionOptions(TransactionOptions other)
    parameters:
    - id: other
      type: Google.Cloud.Spanner.V1.TransactionOptions
    content.vb: Public Sub New(other As TransactionOptions)
  overload: Google.Cloud.Spanner.V1.TransactionOptions.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Cloud.Spanner.V1.TransactionOptions.ReadWrite
  commentId: P:Google.Cloud.Spanner.V1.TransactionOptions.ReadWrite
  id: ReadWrite
  parent: Google.Cloud.Spanner.V1.TransactionOptions
  langs:
  - csharp
  - vb
  name: ReadWrite
  nameWithType: TransactionOptions.ReadWrite
  fullName: Google.Cloud.Spanner.V1.TransactionOptions.ReadWrite
  type: Property
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Transaction.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: ReadWrite
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Transaction.cs
    startLine: 404
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nTransaction may write.\n\nAuthorization to begin a read-write transaction requires\n`spanner.databases.beginOrRollbackReadWriteTransaction` permission\non the `session` resource.\n"
  example: []
  syntax:
    content: public TransactionOptions.Types.ReadWrite ReadWrite { get; set; }
    parameters: []
    return:
      type: Google.Cloud.Spanner.V1.TransactionOptions.Types.ReadWrite
    content.vb: Public Property ReadWrite As TransactionOptions.Types.ReadWrite
  overload: Google.Cloud.Spanner.V1.TransactionOptions.ReadWrite*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Google.Cloud.Spanner.V1.TransactionOptions.PartitionedDml
  commentId: P:Google.Cloud.Spanner.V1.TransactionOptions.PartitionedDml
  id: PartitionedDml
  parent: Google.Cloud.Spanner.V1.TransactionOptions
  langs:
  - csharp
  - vb
  name: PartitionedDml
  nameWithType: TransactionOptions.PartitionedDml
  fullName: Google.Cloud.Spanner.V1.TransactionOptions.PartitionedDml
  type: Property
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Transaction.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: PartitionedDml
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Transaction.cs
    startLine: 422
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nPartitioned DML transaction.\n\nAuthorization to begin a Partitioned DML transaction requires\n`spanner.databases.beginPartitionedDmlTransaction` permission\non the `session` resource.\n"
  example: []
  syntax:
    content: public TransactionOptions.Types.PartitionedDml PartitionedDml { get; set; }
    parameters: []
    return:
      type: Google.Cloud.Spanner.V1.TransactionOptions.Types.PartitionedDml
    content.vb: Public Property PartitionedDml As TransactionOptions.Types.PartitionedDml
  overload: Google.Cloud.Spanner.V1.TransactionOptions.PartitionedDml*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Google.Cloud.Spanner.V1.TransactionOptions.ReadOnly
  commentId: P:Google.Cloud.Spanner.V1.TransactionOptions.ReadOnly
  id: ReadOnly
  parent: Google.Cloud.Spanner.V1.TransactionOptions
  langs:
  - csharp
  - vb
  name: ReadOnly
  nameWithType: TransactionOptions.ReadOnly
  fullName: Google.Cloud.Spanner.V1.TransactionOptions.ReadOnly
  type: Property
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Transaction.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: ReadOnly
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Transaction.cs
    startLine: 440
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nTransaction will not write.\n\nAuthorization to begin a read-only transaction requires\n`spanner.databases.beginReadOnlyTransaction` permission\non the `session` resource.\n"
  example: []
  syntax:
    content: public TransactionOptions.Types.ReadOnly ReadOnly { get; set; }
    parameters: []
    return:
      type: Google.Cloud.Spanner.V1.TransactionOptions.Types.ReadOnly
    content.vb: Public Property ReadOnly As TransactionOptions.Types.ReadOnly
  overload: Google.Cloud.Spanner.V1.TransactionOptions.ReadOnly*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Google.Cloud.Spanner.V1.TransactionOptions.ModeCase
  commentId: P:Google.Cloud.Spanner.V1.TransactionOptions.ModeCase
  id: ModeCase
  parent: Google.Cloud.Spanner.V1.TransactionOptions
  langs:
  - csharp
  - vb
  name: ModeCase
  nameWithType: TransactionOptions.ModeCase
  fullName: Google.Cloud.Spanner.V1.TransactionOptions.ModeCase
  type: Property
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Transaction.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: ModeCase
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Transaction.cs
    startLine: 458
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  syntax:
    content: public TransactionOptions.ModeOneofCase ModeCase { get; }
    parameters: []
    return:
      type: Google.Cloud.Spanner.V1.TransactionOptions.ModeOneofCase
    content.vb: Public ReadOnly Property ModeCase As TransactionOptions.ModeOneofCase
  overload: Google.Cloud.Spanner.V1.TransactionOptions.ModeCase*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Google.Cloud.Spanner.V1
  commentId: N:Google.Cloud.Spanner.V1
  name: Google.Cloud.Spanner.V1
  nameWithType: Google.Cloud.Spanner.V1
  fullName: Google.Cloud.Spanner.V1
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Google.Protobuf.IMessage{Google.Cloud.Spanner.V1.TransactionOptions}
  commentId: T:Google.Protobuf.IMessage{Google.Cloud.Spanner.V1.TransactionOptions}
  parent: Google.Protobuf
  definition: Google.Protobuf.IMessage`1
  name: IMessage<TransactionOptions>
  nameWithType: IMessage<TransactionOptions>
  fullName: Google.Protobuf.IMessage<Google.Cloud.Spanner.V1.TransactionOptions>
  nameWithType.vb: IMessage(Of TransactionOptions)
  fullName.vb: Google.Protobuf.IMessage(Of Google.Cloud.Spanner.V1.TransactionOptions)
  name.vb: IMessage(Of TransactionOptions)
  spec.csharp:
  - uid: Google.Protobuf.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Google.Protobuf.IMessage
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Cloud.Spanner.V1.TransactionOptions
    name: TransactionOptions
    nameWithType: TransactionOptions
    fullName: Google.Cloud.Spanner.V1.TransactionOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Google.Protobuf.IMessage
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Cloud.Spanner.V1.TransactionOptions
    name: TransactionOptions
    nameWithType: TransactionOptions
    fullName: Google.Cloud.Spanner.V1.TransactionOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{Google.Cloud.Spanner.V1.TransactionOptions}
  commentId: T:System.IEquatable{Google.Cloud.Spanner.V1.TransactionOptions}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<TransactionOptions>
  nameWithType: IEquatable<TransactionOptions>
  fullName: System.IEquatable<Google.Cloud.Spanner.V1.TransactionOptions>
  nameWithType.vb: IEquatable(Of TransactionOptions)
  fullName.vb: System.IEquatable(Of Google.Cloud.Spanner.V1.TransactionOptions)
  name.vb: IEquatable(Of TransactionOptions)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Cloud.Spanner.V1.TransactionOptions
    name: TransactionOptions
    nameWithType: TransactionOptions
    fullName: Google.Cloud.Spanner.V1.TransactionOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Cloud.Spanner.V1.TransactionOptions
    name: TransactionOptions
    nameWithType: TransactionOptions
    fullName: Google.Cloud.Spanner.V1.TransactionOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.IDeepCloneable{Google.Cloud.Spanner.V1.TransactionOptions}
  commentId: T:Google.Protobuf.IDeepCloneable{Google.Cloud.Spanner.V1.TransactionOptions}
  parent: Google.Protobuf
  definition: Google.Protobuf.IDeepCloneable`1
  name: IDeepCloneable<TransactionOptions>
  nameWithType: IDeepCloneable<TransactionOptions>
  fullName: Google.Protobuf.IDeepCloneable<Google.Cloud.Spanner.V1.TransactionOptions>
  nameWithType.vb: IDeepCloneable(Of TransactionOptions)
  fullName.vb: Google.Protobuf.IDeepCloneable(Of Google.Cloud.Spanner.V1.TransactionOptions)
  name.vb: IDeepCloneable(Of TransactionOptions)
  spec.csharp:
  - uid: Google.Protobuf.IDeepCloneable`1
    name: IDeepCloneable
    nameWithType: IDeepCloneable
    fullName: Google.Protobuf.IDeepCloneable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Cloud.Spanner.V1.TransactionOptions
    name: TransactionOptions
    nameWithType: TransactionOptions
    fullName: Google.Cloud.Spanner.V1.TransactionOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.IDeepCloneable`1
    name: IDeepCloneable
    nameWithType: IDeepCloneable
    fullName: Google.Protobuf.IDeepCloneable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Cloud.Spanner.V1.TransactionOptions
    name: TransactionOptions
    nameWithType: TransactionOptions
    fullName: Google.Cloud.Spanner.V1.TransactionOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.IBufferMessage
  commentId: T:Google.Protobuf.IBufferMessage
  parent: Google.Protobuf
  isExternal: true
  name: IBufferMessage
  nameWithType: IBufferMessage
  fullName: Google.Protobuf.IBufferMessage
- uid: Google.Protobuf.IMessage
  commentId: T:Google.Protobuf.IMessage
  parent: Google.Protobuf
  isExternal: true
  name: IMessage
  nameWithType: IMessage
  fullName: Google.Protobuf.IMessage
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Google.Protobuf.IMessage`1
  commentId: T:Google.Protobuf.IMessage`1
  isExternal: true
  name: IMessage<T>
  nameWithType: IMessage<T>
  fullName: Google.Protobuf.IMessage<T>
  nameWithType.vb: IMessage(Of T)
  fullName.vb: Google.Protobuf.IMessage(Of T)
  name.vb: IMessage(Of T)
  spec.csharp:
  - uid: Google.Protobuf.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Google.Protobuf.IMessage
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Google.Protobuf.IMessage
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf
  commentId: N:Google.Protobuf
  isExternal: true
  name: Google.Protobuf
  nameWithType: Google.Protobuf
  fullName: Google.Protobuf
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.IDeepCloneable`1
  commentId: T:Google.Protobuf.IDeepCloneable`1
  isExternal: true
  name: IDeepCloneable<T>
  nameWithType: IDeepCloneable<T>
  fullName: Google.Protobuf.IDeepCloneable<T>
  nameWithType.vb: IDeepCloneable(Of T)
  fullName.vb: Google.Protobuf.IDeepCloneable(Of T)
  name.vb: IDeepCloneable(Of T)
  spec.csharp:
  - uid: Google.Protobuf.IDeepCloneable`1
    name: IDeepCloneable
    nameWithType: IDeepCloneable
    fullName: Google.Protobuf.IDeepCloneable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.IDeepCloneable`1
    name: IDeepCloneable
    nameWithType: IDeepCloneable
    fullName: Google.Protobuf.IDeepCloneable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Cloud.Spanner.V1.TransactionOptions.#ctor*
  commentId: Overload:Google.Cloud.Spanner.V1.TransactionOptions.#ctor
  name: TransactionOptions
  nameWithType: TransactionOptions.TransactionOptions
  fullName: Google.Cloud.Spanner.V1.TransactionOptions.TransactionOptions
- uid: Google.Cloud.Spanner.V1.TransactionOptions
  commentId: T:Google.Cloud.Spanner.V1.TransactionOptions
  parent: Google.Cloud.Spanner.V1
  name: TransactionOptions
  nameWithType: TransactionOptions
  fullName: Google.Cloud.Spanner.V1.TransactionOptions
- uid: Google.Cloud.Spanner.V1.TransactionOptions.ReadWrite*
  commentId: Overload:Google.Cloud.Spanner.V1.TransactionOptions.ReadWrite
  name: ReadWrite
  nameWithType: TransactionOptions.ReadWrite
  fullName: Google.Cloud.Spanner.V1.TransactionOptions.ReadWrite
- uid: Google.Cloud.Spanner.V1.TransactionOptions.Types.ReadWrite
  commentId: T:Google.Cloud.Spanner.V1.TransactionOptions.Types.ReadWrite
  parent: Google.Cloud.Spanner.V1
  name: TransactionOptions.Types.ReadWrite
  nameWithType: TransactionOptions.Types.ReadWrite
  fullName: Google.Cloud.Spanner.V1.TransactionOptions.Types.ReadWrite
- uid: Google.Cloud.Spanner.V1.TransactionOptions.PartitionedDml*
  commentId: Overload:Google.Cloud.Spanner.V1.TransactionOptions.PartitionedDml
  name: PartitionedDml
  nameWithType: TransactionOptions.PartitionedDml
  fullName: Google.Cloud.Spanner.V1.TransactionOptions.PartitionedDml
- uid: Google.Cloud.Spanner.V1.TransactionOptions.Types.PartitionedDml
  commentId: T:Google.Cloud.Spanner.V1.TransactionOptions.Types.PartitionedDml
  parent: Google.Cloud.Spanner.V1
  name: TransactionOptions.Types.PartitionedDml
  nameWithType: TransactionOptions.Types.PartitionedDml
  fullName: Google.Cloud.Spanner.V1.TransactionOptions.Types.PartitionedDml
- uid: Google.Cloud.Spanner.V1.TransactionOptions.ReadOnly*
  commentId: Overload:Google.Cloud.Spanner.V1.TransactionOptions.ReadOnly
  name: ReadOnly
  nameWithType: TransactionOptions.ReadOnly
  fullName: Google.Cloud.Spanner.V1.TransactionOptions.ReadOnly
- uid: Google.Cloud.Spanner.V1.TransactionOptions.Types.ReadOnly
  commentId: T:Google.Cloud.Spanner.V1.TransactionOptions.Types.ReadOnly
  parent: Google.Cloud.Spanner.V1
  name: TransactionOptions.Types.ReadOnly
  nameWithType: TransactionOptions.Types.ReadOnly
  fullName: Google.Cloud.Spanner.V1.TransactionOptions.Types.ReadOnly
- uid: Google.Cloud.Spanner.V1.TransactionOptions.ModeCase*
  commentId: Overload:Google.Cloud.Spanner.V1.TransactionOptions.ModeCase
  name: ModeCase
  nameWithType: TransactionOptions.ModeCase
  fullName: Google.Cloud.Spanner.V1.TransactionOptions.ModeCase
- uid: Google.Cloud.Spanner.V1.TransactionOptions.ModeOneofCase
  commentId: T:Google.Cloud.Spanner.V1.TransactionOptions.ModeOneofCase
  parent: Google.Cloud.Spanner.V1
  name: TransactionOptions.ModeOneofCase
  nameWithType: TransactionOptions.ModeOneofCase
  fullName: Google.Cloud.Spanner.V1.TransactionOptions.ModeOneofCase
