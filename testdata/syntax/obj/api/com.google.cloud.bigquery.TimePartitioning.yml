### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.TimePartitioning"
  id: "TimePartitioning"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.TimePartitioning.Builder"
  - "com.google.cloud.bigquery.TimePartitioning.Type"
  - "com.google.cloud.bigquery.TimePartitioning.getExpirationMs()"
  - "com.google.cloud.bigquery.TimePartitioning.getField()"
  - "com.google.cloud.bigquery.TimePartitioning.getRequirePartitionFilter()"
  - "com.google.cloud.bigquery.TimePartitioning.getType()"
  - "com.google.cloud.bigquery.TimePartitioning.newBuilder(com.google.cloud.bigquery.TimePartitioning.Type)"
  - "com.google.cloud.bigquery.TimePartitioning.of(com.google.cloud.bigquery.TimePartitioning.Type)"
  - "com.google.cloud.bigquery.TimePartitioning.of(com.google.cloud.bigquery.TimePartitioning.Type,long)"
  - "com.google.cloud.bigquery.TimePartitioning.toBuilder()"
  langs:
  - "java"
  name: "TimePartitioning"
  nameWithType: "TimePartitioning"
  fullName: "com.google.cloud.bigquery.TimePartitioning"
  type: "Class"
  package: "com.google.cloud.bigquery"
  summary: "Objects of this class allow to configure table partitioning based on time. By dividing a large table into smaller partitions, you can improve query performance and reduce the number of bytes billed by restricting the amount of data scanned."
  syntax:
    content: "public abstract class TimePartitioning implements Serializable"
  inheritance:
  - "java.lang.Object"
  implements:
  - "java.io.Serializable"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.TimePartitioning.TimePartitioning()"
  id: "TimePartitioning()"
  parent: "com.google.cloud.bigquery.TimePartitioning"
  langs:
  - "java"
  name: "TimePartitioning()"
  nameWithType: "TimePartitioning.TimePartitioning()"
  fullName: "com.google.cloud.bigquery.TimePartitioning.TimePartitioning()"
  overload: "com.google.cloud.bigquery.TimePartitioning.TimePartitioning*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: " TimePartitioning()"
- uid: "com.google.cloud.bigquery.TimePartitioning.getExpirationMs()"
  id: "getExpirationMs()"
  parent: "com.google.cloud.bigquery.TimePartitioning"
  langs:
  - "java"
  name: "getExpirationMs()"
  nameWithType: "TimePartitioning.getExpirationMs()"
  fullName: "com.google.cloud.bigquery.TimePartitioning.getExpirationMs()"
  overload: "com.google.cloud.bigquery.TimePartitioning.getExpirationMs*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the number of milliseconds for which to keep the storage for a partition. When expired, the storage for the partition is reclaimed. If null, the partion does not expire."
  syntax:
    content: "public abstract Long getExpirationMs()"
    return:
      type: "java.lang.Long"
- uid: "com.google.cloud.bigquery.TimePartitioning.getField()"
  id: "getField()"
  parent: "com.google.cloud.bigquery.TimePartitioning"
  langs:
  - "java"
  name: "getField()"
  nameWithType: "TimePartitioning.getField()"
  fullName: "com.google.cloud.bigquery.TimePartitioning.getField()"
  overload: "com.google.cloud.bigquery.TimePartitioning.getField*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "If not set, the table is partitioned by pseudo column '\\_PARTITIONTIME'; if set, the table is partitioned by this field."
  syntax:
    content: "public abstract String getField()"
    return:
      type: "java.lang.String"
- uid: "com.google.cloud.bigquery.TimePartitioning.getRequirePartitionFilter()"
  id: "getRequirePartitionFilter()"
  parent: "com.google.cloud.bigquery.TimePartitioning"
  langs:
  - "java"
  name: "getRequirePartitionFilter()"
  nameWithType: "TimePartitioning.getRequirePartitionFilter()"
  fullName: "com.google.cloud.bigquery.TimePartitioning.getRequirePartitionFilter()"
  overload: "com.google.cloud.bigquery.TimePartitioning.getRequirePartitionFilter*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "If set to true, queries over this table require a partition filter (that can be used for partition elimination) to be specified."
  syntax:
    content: "public abstract Boolean getRequirePartitionFilter()"
    return:
      type: "java.lang.Boolean"
- uid: "com.google.cloud.bigquery.TimePartitioning.getType()"
  id: "getType()"
  parent: "com.google.cloud.bigquery.TimePartitioning"
  langs:
  - "java"
  name: "getType()"
  nameWithType: "TimePartitioning.getType()"
  fullName: "com.google.cloud.bigquery.TimePartitioning.getType()"
  overload: "com.google.cloud.bigquery.TimePartitioning.getType*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the time partitioning type."
  syntax:
    content: "public abstract TimePartitioning.Type getType()"
    return:
      type: "com.google.cloud.bigquery.TimePartitioning.Type"
- uid: "com.google.cloud.bigquery.TimePartitioning.newBuilder(com.google.cloud.bigquery.TimePartitioning.Type)"
  id: "newBuilder(com.google.cloud.bigquery.TimePartitioning.Type)"
  parent: "com.google.cloud.bigquery.TimePartitioning"
  langs:
  - "java"
  name: "newBuilder(TimePartitioning.Type type)"
  nameWithType: "TimePartitioning.newBuilder(TimePartitioning.Type type)"
  fullName: "com.google.cloud.bigquery.TimePartitioning.newBuilder(TimePartitioning.Type type)"
  overload: "com.google.cloud.bigquery.TimePartitioning.newBuilder*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a `TimePartitioning` object given the time partitioning type."
  syntax:
    content: "public static TimePartitioning.Builder newBuilder(TimePartitioning.Type type)"
    parameters:
    - id: "type"
      type: "com.google.cloud.bigquery.TimePartitioning.Type"
    return:
      type: "com.google.cloud.bigquery.TimePartitioning.Builder"
- uid: "com.google.cloud.bigquery.TimePartitioning.of(com.google.cloud.bigquery.TimePartitioning.Type)"
  id: "of(com.google.cloud.bigquery.TimePartitioning.Type)"
  parent: "com.google.cloud.bigquery.TimePartitioning"
  langs:
  - "java"
  name: "of(TimePartitioning.Type type)"
  nameWithType: "TimePartitioning.of(TimePartitioning.Type type)"
  fullName: "com.google.cloud.bigquery.TimePartitioning.of(TimePartitioning.Type type)"
  overload: "com.google.cloud.bigquery.TimePartitioning.of*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a `TimePartitioning` object given the time partitioning type. The partitions will not expire."
  syntax:
    content: "public static TimePartitioning of(TimePartitioning.Type type)"
    parameters:
    - id: "type"
      type: "com.google.cloud.bigquery.TimePartitioning.Type"
    return:
      type: "com.google.cloud.bigquery.TimePartitioning"
- uid: "com.google.cloud.bigquery.TimePartitioning.of(com.google.cloud.bigquery.TimePartitioning.Type,long)"
  id: "of(com.google.cloud.bigquery.TimePartitioning.Type,long)"
  parent: "com.google.cloud.bigquery.TimePartitioning"
  langs:
  - "java"
  name: "of(TimePartitioning.Type type, long expirationMs)"
  nameWithType: "TimePartitioning.of(TimePartitioning.Type type, long expirationMs)"
  fullName: "com.google.cloud.bigquery.TimePartitioning.of(TimePartitioning.Type type, long expirationMs)"
  overload: "com.google.cloud.bigquery.TimePartitioning.of*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a `TimePartitioning` object given the time partitioning type and the partition's expiration in milliseconds."
  syntax:
    content: "public static TimePartitioning of(TimePartitioning.Type type, long expirationMs)"
    parameters:
    - id: "type"
      type: "com.google.cloud.bigquery.TimePartitioning.Type"
      description: "the time partitioning type."
    - id: "expirationMs"
      type: "long"
      description: "the number of milliseconds for which to keep the storage for a partition"
    return:
      type: "com.google.cloud.bigquery.TimePartitioning"
- uid: "com.google.cloud.bigquery.TimePartitioning.toBuilder()"
  id: "toBuilder()"
  parent: "com.google.cloud.bigquery.TimePartitioning"
  langs:
  - "java"
  name: "toBuilder()"
  nameWithType: "TimePartitioning.toBuilder()"
  fullName: "com.google.cloud.bigquery.TimePartitioning.toBuilder()"
  overload: "com.google.cloud.bigquery.TimePartitioning.toBuilder*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public abstract TimePartitioning.Builder toBuilder()"
    return:
      type: "com.google.cloud.bigquery.TimePartitioning.Builder"
references:
- uid: "com.google.cloud.bigquery.TimePartitioning.TimePartitioning*"
  name: "TimePartitioning"
  nameWithType: "TimePartitioning.TimePartitioning"
  fullName: "com.google.cloud.bigquery.TimePartitioning.TimePartitioning"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TimePartitioning.Type"
  name: "TimePartitioning.Type"
  nameWithType: "TimePartitioning.Type"
  fullName: "com.google.cloud.bigquery.TimePartitioning.Type"
- uid: "com.google.cloud.bigquery.TimePartitioning.getType*"
  name: "getType"
  nameWithType: "TimePartitioning.getType"
  fullName: "com.google.cloud.bigquery.TimePartitioning.getType"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Long"
  spec.java:
  - uid: "java.lang.Long"
    name: "Long"
    fullName: "java.lang.Long"
- uid: "com.google.cloud.bigquery.TimePartitioning.getExpirationMs*"
  name: "getExpirationMs"
  nameWithType: "TimePartitioning.getExpirationMs"
  fullName: "com.google.cloud.bigquery.TimePartitioning.getExpirationMs"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.TimePartitioning.getField*"
  name: "getField"
  nameWithType: "TimePartitioning.getField"
  fullName: "com.google.cloud.bigquery.TimePartitioning.getField"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Boolean"
  spec.java:
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
- uid: "com.google.cloud.bigquery.TimePartitioning.getRequirePartitionFilter*"
  name: "getRequirePartitionFilter"
  nameWithType: "TimePartitioning.getRequirePartitionFilter"
  fullName: "com.google.cloud.bigquery.TimePartitioning.getRequirePartitionFilter"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TimePartitioning.Builder"
  name: "TimePartitioning.Builder"
  nameWithType: "TimePartitioning.Builder"
  fullName: "com.google.cloud.bigquery.TimePartitioning.Builder"
- uid: "com.google.cloud.bigquery.TimePartitioning.toBuilder*"
  name: "toBuilder"
  nameWithType: "TimePartitioning.toBuilder"
  fullName: "com.google.cloud.bigquery.TimePartitioning.toBuilder"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TimePartitioning.newBuilder*"
  name: "newBuilder"
  nameWithType: "TimePartitioning.newBuilder"
  fullName: "com.google.cloud.bigquery.TimePartitioning.newBuilder"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TimePartitioning.of*"
  name: "of"
  nameWithType: "TimePartitioning.of"
  fullName: "com.google.cloud.bigquery.TimePartitioning.of"
  package: "com.google.cloud.bigquery"
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "java.io.Serializable"
  name: "Serializable"
  nameWithType: "Serializable"
  fullName: "java.io.Serializable"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
