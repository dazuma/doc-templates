### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.StandardTableDefinition"
  id: "StandardTableDefinition"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.StandardTableDefinition.Builder"
  - "com.google.cloud.bigquery.StandardTableDefinition.StandardTableDefinition()"
  - "com.google.cloud.bigquery.StandardTableDefinition.StreamingBuffer"
  - "com.google.cloud.bigquery.StandardTableDefinition.getClustering()"
  - "com.google.cloud.bigquery.StandardTableDefinition.getLocation()"
  - "com.google.cloud.bigquery.StandardTableDefinition.getNumBytes()"
  - "com.google.cloud.bigquery.StandardTableDefinition.getNumLongTermBytes()"
  - "com.google.cloud.bigquery.StandardTableDefinition.getNumRows()"
  - "com.google.cloud.bigquery.StandardTableDefinition.getRangePartitioning()"
  - "com.google.cloud.bigquery.StandardTableDefinition.getStreamingBuffer()"
  - "com.google.cloud.bigquery.StandardTableDefinition.getTimePartitioning()"
  - "com.google.cloud.bigquery.StandardTableDefinition.newBuilder()"
  - "com.google.cloud.bigquery.StandardTableDefinition.of(com.google.cloud.bigquery.Schema)"
  - "com.google.cloud.bigquery.StandardTableDefinition.toBuilder()"
  langs:
  - "java"
  name: "StandardTableDefinition"
  nameWithType: "StandardTableDefinition"
  fullName: "com.google.cloud.bigquery.StandardTableDefinition"
  type: "Class"
  package: "com.google.cloud.bigquery"
  summary: "A Google BigQuery default table definition. This definition is used for standard, two-dimensional tables with individual records organized in rows, and a data type assigned to each column (also called a field). Individual fields within a record may contain nested and repeated children fields. Every table is described by a schema that describes field names, types, and other information."
  syntax:
    content: "public abstract class StandardTableDefinition extends TableDefinition"
  inheritance:
  - "java.lang.Object"
  - "com.google.cloud.bigquery.TableDefinition"
  inheritedMembers:
  - "com.google.cloud.bigquery.TableDefinition.getSchema()"
  - "com.google.cloud.bigquery.TableDefinition.getType()"
  - "com.google.cloud.bigquery.TableDefinition.toBuilder()"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.StandardTableDefinition.StandardTableDefinition()"
  id: "StandardTableDefinition()"
  parent: "com.google.cloud.bigquery.StandardTableDefinition"
  langs:
  - "java"
  name: "StandardTableDefinition()"
  nameWithType: "StandardTableDefinition.StandardTableDefinition()"
  fullName: "com.google.cloud.bigquery.StandardTableDefinition.StandardTableDefinition()"
  overload: "com.google.cloud.bigquery.StandardTableDefinition.StandardTableDefinition*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public StandardTableDefinition()"
- uid: "com.google.cloud.bigquery.StandardTableDefinition.getClustering()"
  id: "getClustering()"
  parent: "com.google.cloud.bigquery.StandardTableDefinition"
  langs:
  - "java"
  name: "getClustering()"
  nameWithType: "StandardTableDefinition.getClustering()"
  fullName: "com.google.cloud.bigquery.StandardTableDefinition.getClustering()"
  overload: "com.google.cloud.bigquery.StandardTableDefinition.getClustering*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the clustering configuration for this table. If `null`, the table is not clustered."
  syntax:
    content: "public abstract Clustering getClustering()"
    return:
      type: "com.google.cloud.bigquery.Clustering"
- uid: "com.google.cloud.bigquery.StandardTableDefinition.getLocation()"
  id: "getLocation()"
  parent: "com.google.cloud.bigquery.StandardTableDefinition"
  langs:
  - "java"
  name: "getLocation()"
  nameWithType: "StandardTableDefinition.getLocation()"
  fullName: "com.google.cloud.bigquery.StandardTableDefinition.getLocation()"
  overload: "com.google.cloud.bigquery.StandardTableDefinition.getLocation*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the geographic location where the table should reside. This value is inherited from the dataset."
  syntax:
    content: "public abstract String getLocation()"
    return:
      type: "java.lang.String"
- uid: "com.google.cloud.bigquery.StandardTableDefinition.getNumBytes()"
  id: "getNumBytes()"
  parent: "com.google.cloud.bigquery.StandardTableDefinition"
  langs:
  - "java"
  name: "getNumBytes()"
  nameWithType: "StandardTableDefinition.getNumBytes()"
  fullName: "com.google.cloud.bigquery.StandardTableDefinition.getNumBytes()"
  overload: "com.google.cloud.bigquery.StandardTableDefinition.getNumBytes*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the size of this table in bytes, excluding any data in the streaming buffer."
  syntax:
    content: "public abstract Long getNumBytes()"
    return:
      type: "java.lang.Long"
- uid: "com.google.cloud.bigquery.StandardTableDefinition.getNumLongTermBytes()"
  id: "getNumLongTermBytes()"
  parent: "com.google.cloud.bigquery.StandardTableDefinition"
  langs:
  - "java"
  name: "getNumLongTermBytes()"
  nameWithType: "StandardTableDefinition.getNumLongTermBytes()"
  fullName: "com.google.cloud.bigquery.StandardTableDefinition.getNumLongTermBytes()"
  overload: "com.google.cloud.bigquery.StandardTableDefinition.getNumLongTermBytes*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the number of bytes considered \"long-term storage\" for reduced billing purposes."
  syntax:
    content: "public abstract Long getNumLongTermBytes()"
    return:
      type: "java.lang.Long"
- uid: "com.google.cloud.bigquery.StandardTableDefinition.getNumRows()"
  id: "getNumRows()"
  parent: "com.google.cloud.bigquery.StandardTableDefinition"
  langs:
  - "java"
  name: "getNumRows()"
  nameWithType: "StandardTableDefinition.getNumRows()"
  fullName: "com.google.cloud.bigquery.StandardTableDefinition.getNumRows()"
  overload: "com.google.cloud.bigquery.StandardTableDefinition.getNumRows*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the number of rows in this table, excluding any data in the streaming buffer."
  syntax:
    content: "public abstract Long getNumRows()"
    return:
      type: "java.lang.Long"
- uid: "com.google.cloud.bigquery.StandardTableDefinition.getRangePartitioning()"
  id: "getRangePartitioning()"
  parent: "com.google.cloud.bigquery.StandardTableDefinition"
  langs:
  - "java"
  name: "getRangePartitioning()"
  nameWithType: "StandardTableDefinition.getRangePartitioning()"
  fullName: "com.google.cloud.bigquery.StandardTableDefinition.getRangePartitioning()"
  overload: "com.google.cloud.bigquery.StandardTableDefinition.getRangePartitioning*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the range partitioning configuration for this table. If `null`, the table is not range-partitioned."
  syntax:
    content: "public abstract RangePartitioning getRangePartitioning()"
    return:
      type: "com.google.cloud.bigquery.RangePartitioning"
- uid: "com.google.cloud.bigquery.StandardTableDefinition.getStreamingBuffer()"
  id: "getStreamingBuffer()"
  parent: "com.google.cloud.bigquery.StandardTableDefinition"
  langs:
  - "java"
  name: "getStreamingBuffer()"
  nameWithType: "StandardTableDefinition.getStreamingBuffer()"
  fullName: "com.google.cloud.bigquery.StandardTableDefinition.getStreamingBuffer()"
  overload: "com.google.cloud.bigquery.StandardTableDefinition.getStreamingBuffer*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns information on the table's streaming buffer if any exists. Returns `null` if no streaming buffer exists."
  syntax:
    content: "public abstract StandardTableDefinition.StreamingBuffer getStreamingBuffer()"
    return:
      type: "com.google.cloud.bigquery.StandardTableDefinition.StreamingBuffer"
- uid: "com.google.cloud.bigquery.StandardTableDefinition.getTimePartitioning()"
  id: "getTimePartitioning()"
  parent: "com.google.cloud.bigquery.StandardTableDefinition"
  langs:
  - "java"
  name: "getTimePartitioning()"
  nameWithType: "StandardTableDefinition.getTimePartitioning()"
  fullName: "com.google.cloud.bigquery.StandardTableDefinition.getTimePartitioning()"
  overload: "com.google.cloud.bigquery.StandardTableDefinition.getTimePartitioning*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the time partitioning configuration for this table. If `null`, the table is not time-partitioned."
  syntax:
    content: "public abstract TimePartitioning getTimePartitioning()"
    return:
      type: "com.google.cloud.bigquery.TimePartitioning"
- uid: "com.google.cloud.bigquery.StandardTableDefinition.newBuilder()"
  id: "newBuilder()"
  parent: "com.google.cloud.bigquery.StandardTableDefinition"
  langs:
  - "java"
  name: "newBuilder()"
  nameWithType: "StandardTableDefinition.newBuilder()"
  fullName: "com.google.cloud.bigquery.StandardTableDefinition.newBuilder()"
  overload: "com.google.cloud.bigquery.StandardTableDefinition.newBuilder*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a builder for a BigQuery standard table definition."
  syntax:
    content: "public static StandardTableDefinition.Builder newBuilder()"
    return:
      type: "com.google.cloud.bigquery.StandardTableDefinition.Builder"
- uid: "com.google.cloud.bigquery.StandardTableDefinition.of(com.google.cloud.bigquery.Schema)"
  id: "of(com.google.cloud.bigquery.Schema)"
  parent: "com.google.cloud.bigquery.StandardTableDefinition"
  langs:
  - "java"
  name: "of(Schema schema)"
  nameWithType: "StandardTableDefinition.of(Schema schema)"
  fullName: "com.google.cloud.bigquery.StandardTableDefinition.of(Schema schema)"
  overload: "com.google.cloud.bigquery.StandardTableDefinition.of*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Creates a BigQuery standard table definition given its schema."
  syntax:
    content: "public static StandardTableDefinition of(Schema schema)"
    parameters:
    - id: "schema"
      type: "com.google.cloud.bigquery.Schema"
      description: "the schema of the table"
    return:
      type: "com.google.cloud.bigquery.StandardTableDefinition"
- uid: "com.google.cloud.bigquery.StandardTableDefinition.toBuilder()"
  id: "toBuilder()"
  parent: "com.google.cloud.bigquery.StandardTableDefinition"
  langs:
  - "java"
  name: "toBuilder()"
  nameWithType: "StandardTableDefinition.toBuilder()"
  fullName: "com.google.cloud.bigquery.StandardTableDefinition.toBuilder()"
  overload: "com.google.cloud.bigquery.StandardTableDefinition.toBuilder*"
  overridden: "com.google.cloud.bigquery.TableDefinition.toBuilder()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a builder for the `StandardTableDefinition` object."
  syntax:
    content: "public abstract StandardTableDefinition.Builder toBuilder()"
    return:
      type: "com.google.cloud.bigquery.StandardTableDefinition.Builder"
references:
- uid: "com.google.cloud.bigquery.StandardTableDefinition.StandardTableDefinition*"
  name: "StandardTableDefinition"
  nameWithType: "StandardTableDefinition.StandardTableDefinition"
  fullName: "com.google.cloud.bigquery.StandardTableDefinition.StandardTableDefinition"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Long"
  spec.java:
  - uid: "java.lang.Long"
    name: "Long"
    fullName: "java.lang.Long"
- uid: "com.google.cloud.bigquery.StandardTableDefinition.getNumBytes*"
  name: "getNumBytes"
  nameWithType: "StandardTableDefinition.getNumBytes"
  fullName: "com.google.cloud.bigquery.StandardTableDefinition.getNumBytes"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.StandardTableDefinition.getNumLongTermBytes*"
  name: "getNumLongTermBytes"
  nameWithType: "StandardTableDefinition.getNumLongTermBytes"
  fullName: "com.google.cloud.bigquery.StandardTableDefinition.getNumLongTermBytes"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.StandardTableDefinition.getNumRows*"
  name: "getNumRows"
  nameWithType: "StandardTableDefinition.getNumRows"
  fullName: "com.google.cloud.bigquery.StandardTableDefinition.getNumRows"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.StandardTableDefinition.getLocation*"
  name: "getLocation"
  nameWithType: "StandardTableDefinition.getLocation"
  fullName: "com.google.cloud.bigquery.StandardTableDefinition.getLocation"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.StandardTableDefinition.StreamingBuffer"
  name: "StandardTableDefinition.StreamingBuffer"
  nameWithType: "StandardTableDefinition.StreamingBuffer"
  fullName: "com.google.cloud.bigquery.StandardTableDefinition.StreamingBuffer"
- uid: "com.google.cloud.bigquery.StandardTableDefinition.getStreamingBuffer*"
  name: "getStreamingBuffer"
  nameWithType: "StandardTableDefinition.getStreamingBuffer"
  fullName: "com.google.cloud.bigquery.StandardTableDefinition.getStreamingBuffer"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TimePartitioning"
  name: "TimePartitioning"
  nameWithType: "TimePartitioning"
  fullName: "com.google.cloud.bigquery.TimePartitioning"
- uid: "com.google.cloud.bigquery.StandardTableDefinition.getTimePartitioning*"
  name: "getTimePartitioning"
  nameWithType: "StandardTableDefinition.getTimePartitioning"
  fullName: "com.google.cloud.bigquery.StandardTableDefinition.getTimePartitioning"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.RangePartitioning"
  name: "RangePartitioning"
  nameWithType: "RangePartitioning"
  fullName: "com.google.cloud.bigquery.RangePartitioning"
- uid: "com.google.cloud.bigquery.StandardTableDefinition.getRangePartitioning*"
  name: "getRangePartitioning"
  nameWithType: "StandardTableDefinition.getRangePartitioning"
  fullName: "com.google.cloud.bigquery.StandardTableDefinition.getRangePartitioning"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Clustering"
  name: "Clustering"
  nameWithType: "Clustering"
  fullName: "com.google.cloud.bigquery.Clustering"
- uid: "com.google.cloud.bigquery.StandardTableDefinition.getClustering*"
  name: "getClustering"
  nameWithType: "StandardTableDefinition.getClustering"
  fullName: "com.google.cloud.bigquery.StandardTableDefinition.getClustering"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.StandardTableDefinition.Builder"
  name: "StandardTableDefinition.Builder"
  nameWithType: "StandardTableDefinition.Builder"
  fullName: "com.google.cloud.bigquery.StandardTableDefinition.Builder"
- uid: "com.google.cloud.bigquery.StandardTableDefinition.newBuilder*"
  name: "newBuilder"
  nameWithType: "StandardTableDefinition.newBuilder"
  fullName: "com.google.cloud.bigquery.StandardTableDefinition.newBuilder"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Schema"
  name: "Schema"
  nameWithType: "Schema"
  fullName: "com.google.cloud.bigquery.Schema"
- uid: "com.google.cloud.bigquery.StandardTableDefinition.of*"
  name: "of"
  nameWithType: "StandardTableDefinition.of"
  fullName: "com.google.cloud.bigquery.StandardTableDefinition.of"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.StandardTableDefinition.toBuilder*"
  name: "toBuilder"
  nameWithType: "StandardTableDefinition.toBuilder"
  fullName: "com.google.cloud.bigquery.StandardTableDefinition.toBuilder"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TableDefinition"
  name: "TableDefinition"
  nameWithType: "TableDefinition"
  fullName: "com.google.cloud.bigquery.TableDefinition"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "com.google.cloud.bigquery.TableDefinition.toBuilder()"
  name: "TableDefinition.toBuilder()"
  nameWithType: "TableDefinition.toBuilder()"
  fullName: "com.google.cloud.bigquery.TableDefinition.toBuilder()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "com.google.cloud.bigquery.TableDefinition.getType()"
  name: "TableDefinition.getType()"
  nameWithType: "TableDefinition.getType()"
  fullName: "com.google.cloud.bigquery.TableDefinition.getType()"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.TableDefinition.getSchema()"
  name: "TableDefinition.getSchema()"
  nameWithType: "TableDefinition.getSchema()"
  fullName: "com.google.cloud.bigquery.TableDefinition.getSchema()"
