### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.Model"
  id: "Model"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.Model.Builder"
  - "com.google.cloud.bigquery.Model.delete()"
  - "com.google.cloud.bigquery.Model.equals(java.lang.Object)"
  - "com.google.cloud.bigquery.Model.exists()"
  - "com.google.cloud.bigquery.Model.getBigQuery()"
  - "com.google.cloud.bigquery.Model.hashCode()"
  - "com.google.cloud.bigquery.Model.reload(com.google.cloud.bigquery.BigQuery.ModelOption...)"
  - "com.google.cloud.bigquery.Model.toBuilder()"
  - "com.google.cloud.bigquery.Model.update(com.google.cloud.bigquery.BigQuery.ModelOption...)"
  langs:
  - "java"
  name: "Model"
  nameWithType: "Model"
  fullName: "com.google.cloud.bigquery.Model"
  type: "Class"
  package: "com.google.cloud.bigquery"
  summary: "A Google BigQuery ML Model.\n\nObjects of this class are immutable. Operations that modify the table like <xref uid=\"com.google.cloud.bigquery.Model.update*\" data-throw-if-not-resolved=\"false\">#update</xref> return a new object. To get a `Model` object with the most recent information use <xref uid=\"com.google.cloud.bigquery.Model.reload*\" data-throw-if-not-resolved=\"false\">#reload</xref>."
  syntax:
    content: "public class Model extends ModelInfo"
  inheritance:
  - "java.lang.Object"
  - "com.google.cloud.bigquery.ModelInfo"
  inheritedMembers:
  - "com.google.cloud.bigquery.ModelInfo.equals(java.lang.Object)"
  - "com.google.cloud.bigquery.ModelInfo.getCreationTime()"
  - "com.google.cloud.bigquery.ModelInfo.getDescription()"
  - "com.google.cloud.bigquery.ModelInfo.getEncryptionConfiguration()"
  - "com.google.cloud.bigquery.ModelInfo.getEtag()"
  - "com.google.cloud.bigquery.ModelInfo.getExpirationTime()"
  - "com.google.cloud.bigquery.ModelInfo.getFeatureColumns()"
  - "com.google.cloud.bigquery.ModelInfo.getFriendlyName()"
  - "com.google.cloud.bigquery.ModelInfo.getLabelColumns()"
  - "com.google.cloud.bigquery.ModelInfo.getLabels()"
  - "com.google.cloud.bigquery.ModelInfo.getLastModifiedTime()"
  - "com.google.cloud.bigquery.ModelInfo.getLocation()"
  - "com.google.cloud.bigquery.ModelInfo.getModelId()"
  - "com.google.cloud.bigquery.ModelInfo.getModelType()"
  - "com.google.cloud.bigquery.ModelInfo.getTrainingRuns()"
  - "com.google.cloud.bigquery.ModelInfo.hashCode()"
  - "com.google.cloud.bigquery.ModelInfo.newBuilder(com.google.cloud.bigquery.ModelId)"
  - "com.google.cloud.bigquery.ModelInfo.of(com.google.cloud.bigquery.ModelId)"
  - "com.google.cloud.bigquery.ModelInfo.toBuilder()"
  - "com.google.cloud.bigquery.ModelInfo.toString()"
  - "java.lang.Object.clone()"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.Model.Model(com.google.cloud.bigquery.BigQuery,com.google.cloud.bigquery.ModelInfo.BuilderImpl)"
  id: "Model(com.google.cloud.bigquery.BigQuery,com.google.cloud.bigquery.ModelInfo.BuilderImpl)"
  parent: "com.google.cloud.bigquery.Model"
  langs:
  - "java"
  name: "Model(BigQuery bigquery, ModelInfo.BuilderImpl infoBuilder)"
  nameWithType: "Model.Model(BigQuery bigquery, ModelInfo.BuilderImpl infoBuilder)"
  fullName: "com.google.cloud.bigquery.Model.Model(BigQuery bigquery, ModelInfo.BuilderImpl infoBuilder)"
  overload: "com.google.cloud.bigquery.Model.Model*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: " Model(BigQuery bigquery, ModelInfo.BuilderImpl infoBuilder)"
    parameters:
    - id: "bigquery"
      type: "com.google.cloud.bigquery.BigQuery"
    - id: "infoBuilder"
      type: "com.google.cloud.bigquery.ModelInfo.BuilderImpl"
- uid: "com.google.cloud.bigquery.Model.delete()"
  id: "delete()"
  parent: "com.google.cloud.bigquery.Model"
  langs:
  - "java"
  name: "delete()"
  nameWithType: "Model.delete()"
  fullName: "com.google.cloud.bigquery.Model.delete()"
  overload: "com.google.cloud.bigquery.Model.delete*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Deletes this model."
  syntax:
    content: "public boolean delete()"
    return:
      type: "boolean"
      description: "<code>true</code> if model was deleted, <code>false</code> if it was not found"
- uid: "com.google.cloud.bigquery.Model.equals(java.lang.Object)"
  id: "equals(java.lang.Object)"
  parent: "com.google.cloud.bigquery.Model"
  langs:
  - "java"
  name: "equals(Object obj)"
  nameWithType: "Model.equals(Object obj)"
  fullName: "com.google.cloud.bigquery.Model.equals(Object obj)"
  overload: "com.google.cloud.bigquery.Model.equals*"
  overridden: "com.google.cloud.bigquery.ModelInfo.equals(java.lang.Object)"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public final boolean equals(Object obj)"
    parameters:
    - id: "obj"
      type: "java.lang.Object"
    return:
      type: "boolean"
- uid: "com.google.cloud.bigquery.Model.exists()"
  id: "exists()"
  parent: "com.google.cloud.bigquery.Model"
  langs:
  - "java"
  name: "exists()"
  nameWithType: "Model.exists()"
  fullName: "com.google.cloud.bigquery.Model.exists()"
  overload: "com.google.cloud.bigquery.Model.exists*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Check if this model exists."
  syntax:
    content: "public boolean exists()"
    return:
      type: "boolean"
      description: "<code>true</code> if this table exists, <code>false</code> otherwise"
- uid: "com.google.cloud.bigquery.Model.getBigQuery()"
  id: "getBigQuery()"
  parent: "com.google.cloud.bigquery.Model"
  langs:
  - "java"
  name: "getBigQuery()"
  nameWithType: "Model.getBigQuery()"
  fullName: "com.google.cloud.bigquery.Model.getBigQuery()"
  overload: "com.google.cloud.bigquery.Model.getBigQuery*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Return's the model's `BigQuery` object used to issue requests. \\*"
  syntax:
    content: "public BigQuery getBigQuery()"
    return:
      type: "com.google.cloud.bigquery.BigQuery"
- uid: "com.google.cloud.bigquery.Model.hashCode()"
  id: "hashCode()"
  parent: "com.google.cloud.bigquery.Model"
  langs:
  - "java"
  name: "hashCode()"
  nameWithType: "Model.hashCode()"
  fullName: "com.google.cloud.bigquery.Model.hashCode()"
  overload: "com.google.cloud.bigquery.Model.hashCode*"
  overridden: "com.google.cloud.bigquery.ModelInfo.hashCode()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public final int hashCode()"
    return:
      type: "int"
- uid: "com.google.cloud.bigquery.Model.reload(com.google.cloud.bigquery.BigQuery.ModelOption...)"
  id: "reload(com.google.cloud.bigquery.BigQuery.ModelOption...)"
  parent: "com.google.cloud.bigquery.Model"
  langs:
  - "java"
  name: "reload(BigQuery.ModelOption[] options)"
  nameWithType: "Model.reload(BigQuery.ModelOption[] options)"
  fullName: "com.google.cloud.bigquery.Model.reload(BigQuery.ModelOption[] options)"
  overload: "com.google.cloud.bigquery.Model.reload*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Fetches current model's state from the service. Returns `null` if the model does not exist. A new `Model` is returned."
  syntax:
    content: "public Model reload(BigQuery.ModelOption[] options)"
    parameters:
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.ModelOption[]"
      description: "model options"
    return:
      type: "com.google.cloud.bigquery.Model"
      description: "a <code>Model</code> object with latest information or <code>null</code> if not found"
- uid: "com.google.cloud.bigquery.Model.toBuilder()"
  id: "toBuilder()"
  parent: "com.google.cloud.bigquery.Model"
  langs:
  - "java"
  name: "toBuilder()"
  nameWithType: "Model.toBuilder()"
  fullName: "com.google.cloud.bigquery.Model.toBuilder()"
  overload: "com.google.cloud.bigquery.Model.toBuilder*"
  overridden: "com.google.cloud.bigquery.ModelInfo.toBuilder()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public Model.Builder toBuilder()"
    return:
      type: "com.google.cloud.bigquery.Model.Builder"
- uid: "com.google.cloud.bigquery.Model.update(com.google.cloud.bigquery.BigQuery.ModelOption...)"
  id: "update(com.google.cloud.bigquery.BigQuery.ModelOption...)"
  parent: "com.google.cloud.bigquery.Model"
  langs:
  - "java"
  name: "update(BigQuery.ModelOption[] options)"
  nameWithType: "Model.update(BigQuery.ModelOption[] options)"
  fullName: "com.google.cloud.bigquery.Model.update(BigQuery.ModelOption[] options)"
  overload: "com.google.cloud.bigquery.Model.update*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Updates the model's information with this model's information. Dataset and model identifiers cannot be updated. A new `Model` object is returned."
  syntax:
    content: "public Model update(BigQuery.ModelOption[] options)"
    parameters:
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.ModelOption[]"
      description: "dataset options"
    return:
      type: "com.google.cloud.bigquery.Model"
      description: "a <code>Model</code> object with updated information"
references:
- uid: "com.google.cloud.bigquery.BigQuery"
  name: "BigQuery"
  nameWithType: "BigQuery"
  fullName: "com.google.cloud.bigquery.BigQuery"
- uid: "com.google.cloud.bigquery.ModelInfo.BuilderImpl"
  spec.java:
  - uid: "com.google.cloud.bigquery.ModelInfo.BuilderImpl"
    name: "BuilderImpl"
    fullName: "com.google.cloud.bigquery.ModelInfo.BuilderImpl"
- uid: "com.google.cloud.bigquery.Model.Model*"
  name: "Model"
  nameWithType: "Model.Model"
  fullName: "com.google.cloud.bigquery.Model.Model"
  package: "com.google.cloud.bigquery"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.google.cloud.bigquery.Model.exists*"
  name: "exists"
  nameWithType: "Model.exists"
  fullName: "com.google.cloud.bigquery.Model.exists"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.BigQuery.ModelOption[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.BigQuery.ModelOption"
    name: "ModelOption"
    fullName: "com.google.cloud.bigquery.BigQuery.ModelOption"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.cloud.bigquery.Model.reload*"
  name: "reload"
  nameWithType: "Model.reload"
  fullName: "com.google.cloud.bigquery.Model.reload"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Model.update*"
  name: "update"
  nameWithType: "Model.update"
  fullName: "com.google.cloud.bigquery.Model.update"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Model.delete*"
  name: "delete"
  nameWithType: "Model.delete"
  fullName: "com.google.cloud.bigquery.Model.delete"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Model.getBigQuery*"
  name: "getBigQuery"
  nameWithType: "Model.getBigQuery"
  fullName: "com.google.cloud.bigquery.Model.getBigQuery"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Model.Builder"
  name: "Model.Builder"
  nameWithType: "Model.Builder"
  fullName: "com.google.cloud.bigquery.Model.Builder"
- uid: "com.google.cloud.bigquery.Model.toBuilder*"
  name: "toBuilder"
  nameWithType: "Model.toBuilder"
  fullName: "com.google.cloud.bigquery.Model.toBuilder"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "com.google.cloud.bigquery.Model.equals*"
  name: "equals"
  nameWithType: "Model.equals"
  fullName: "com.google.cloud.bigquery.Model.equals"
  package: "com.google.cloud.bigquery"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.google.cloud.bigquery.Model.hashCode*"
  name: "hashCode"
  nameWithType: "Model.hashCode"
  fullName: "com.google.cloud.bigquery.Model.hashCode"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.ModelInfo"
  name: "ModelInfo"
  nameWithType: "ModelInfo"
  fullName: "com.google.cloud.bigquery.ModelInfo"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "com.google.cloud.bigquery.ModelInfo.getModelId()"
  name: "ModelInfo.getModelId()"
  nameWithType: "ModelInfo.getModelId()"
  fullName: "com.google.cloud.bigquery.ModelInfo.getModelId()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "com.google.cloud.bigquery.ModelInfo.getFriendlyName()"
  name: "ModelInfo.getFriendlyName()"
  nameWithType: "ModelInfo.getFriendlyName()"
  fullName: "com.google.cloud.bigquery.ModelInfo.getFriendlyName()"
- uid: "com.google.cloud.bigquery.ModelInfo.hashCode()"
  name: "ModelInfo.hashCode()"
  nameWithType: "ModelInfo.hashCode()"
  fullName: "com.google.cloud.bigquery.ModelInfo.hashCode()"
- uid: "com.google.cloud.bigquery.ModelInfo.equals(java.lang.Object)"
  name: "ModelInfo.equals(Object)"
  nameWithType: "ModelInfo.equals(Object)"
  fullName: "com.google.cloud.bigquery.ModelInfo.equals(java.lang.Object)"
- uid: "com.google.cloud.bigquery.ModelInfo.getFeatureColumns()"
  name: "ModelInfo.getFeatureColumns()"
  nameWithType: "ModelInfo.getFeatureColumns()"
  fullName: "com.google.cloud.bigquery.ModelInfo.getFeatureColumns()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.ModelInfo.getModelType()"
  name: "ModelInfo.getModelType()"
  nameWithType: "ModelInfo.getModelType()"
  fullName: "com.google.cloud.bigquery.ModelInfo.getModelType()"
- uid: "com.google.cloud.bigquery.ModelInfo.getEtag()"
  name: "ModelInfo.getEtag()"
  nameWithType: "ModelInfo.getEtag()"
  fullName: "com.google.cloud.bigquery.ModelInfo.getEtag()"
- uid: "com.google.cloud.bigquery.ModelInfo.toBuilder()"
  name: "ModelInfo.toBuilder()"
  nameWithType: "ModelInfo.toBuilder()"
  fullName: "com.google.cloud.bigquery.ModelInfo.toBuilder()"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "com.google.cloud.bigquery.ModelInfo.getEncryptionConfiguration()"
  name: "ModelInfo.getEncryptionConfiguration()"
  nameWithType: "ModelInfo.getEncryptionConfiguration()"
  fullName: "com.google.cloud.bigquery.ModelInfo.getEncryptionConfiguration()"
- uid: "com.google.cloud.bigquery.ModelInfo.newBuilder(com.google.cloud.bigquery.ModelId)"
  name: "ModelInfo.newBuilder(ModelId)"
  nameWithType: "ModelInfo.newBuilder(ModelId)"
  fullName: "com.google.cloud.bigquery.ModelInfo.newBuilder(com.google.cloud.bigquery.ModelId)"
- uid: "com.google.cloud.bigquery.ModelInfo.getLabels()"
  name: "ModelInfo.getLabels()"
  nameWithType: "ModelInfo.getLabels()"
  fullName: "com.google.cloud.bigquery.ModelInfo.getLabels()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "com.google.cloud.bigquery.ModelInfo.of(com.google.cloud.bigquery.ModelId)"
  name: "ModelInfo.of(ModelId)"
  nameWithType: "ModelInfo.of(ModelId)"
  fullName: "com.google.cloud.bigquery.ModelInfo.of(com.google.cloud.bigquery.ModelId)"
- uid: "com.google.cloud.bigquery.ModelInfo.getCreationTime()"
  name: "ModelInfo.getCreationTime()"
  nameWithType: "ModelInfo.getCreationTime()"
  fullName: "com.google.cloud.bigquery.ModelInfo.getCreationTime()"
- uid: "com.google.cloud.bigquery.ModelInfo.toString()"
  name: "ModelInfo.toString()"
  nameWithType: "ModelInfo.toString()"
  fullName: "com.google.cloud.bigquery.ModelInfo.toString()"
- uid: "com.google.cloud.bigquery.ModelInfo.getTrainingRuns()"
  name: "ModelInfo.getTrainingRuns()"
  nameWithType: "ModelInfo.getTrainingRuns()"
  fullName: "com.google.cloud.bigquery.ModelInfo.getTrainingRuns()"
- uid: "com.google.cloud.bigquery.ModelInfo.getLocation()"
  name: "ModelInfo.getLocation()"
  nameWithType: "ModelInfo.getLocation()"
  fullName: "com.google.cloud.bigquery.ModelInfo.getLocation()"
- uid: "com.google.cloud.bigquery.ModelInfo.getExpirationTime()"
  name: "ModelInfo.getExpirationTime()"
  nameWithType: "ModelInfo.getExpirationTime()"
  fullName: "com.google.cloud.bigquery.ModelInfo.getExpirationTime()"
- uid: "com.google.cloud.bigquery.ModelInfo.getLabelColumns()"
  name: "ModelInfo.getLabelColumns()"
  nameWithType: "ModelInfo.getLabelColumns()"
  fullName: "com.google.cloud.bigquery.ModelInfo.getLabelColumns()"
- uid: "com.google.cloud.bigquery.ModelInfo.getDescription()"
  name: "ModelInfo.getDescription()"
  nameWithType: "ModelInfo.getDescription()"
  fullName: "com.google.cloud.bigquery.ModelInfo.getDescription()"
- uid: "com.google.cloud.bigquery.ModelInfo.getLastModifiedTime()"
  name: "ModelInfo.getLastModifiedTime()"
  nameWithType: "ModelInfo.getLastModifiedTime()"
  fullName: "com.google.cloud.bigquery.ModelInfo.getLastModifiedTime()"
