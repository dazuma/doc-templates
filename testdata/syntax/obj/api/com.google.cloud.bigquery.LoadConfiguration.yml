### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.LoadConfiguration"
  id: "LoadConfiguration"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.LoadConfiguration.Builder"
  - "com.google.cloud.bigquery.LoadConfiguration.getAutodetect()"
  - "com.google.cloud.bigquery.LoadConfiguration.getClustering()"
  - "com.google.cloud.bigquery.LoadConfiguration.getCreateDisposition()"
  - "com.google.cloud.bigquery.LoadConfiguration.getCsvOptions()"
  - "com.google.cloud.bigquery.LoadConfiguration.getDatastoreBackupOptions()"
  - "com.google.cloud.bigquery.LoadConfiguration.getDestinationEncryptionConfiguration()"
  - "com.google.cloud.bigquery.LoadConfiguration.getDestinationTable()"
  - "com.google.cloud.bigquery.LoadConfiguration.getFormat()"
  - "com.google.cloud.bigquery.LoadConfiguration.getMaxBadRecords()"
  - "com.google.cloud.bigquery.LoadConfiguration.getNullMarker()"
  - "com.google.cloud.bigquery.LoadConfiguration.getSchema()"
  - "com.google.cloud.bigquery.LoadConfiguration.getSchemaUpdateOptions()"
  - "com.google.cloud.bigquery.LoadConfiguration.getTimePartitioning()"
  - "com.google.cloud.bigquery.LoadConfiguration.getUseAvroLogicalTypes()"
  - "com.google.cloud.bigquery.LoadConfiguration.getWriteDisposition()"
  - "com.google.cloud.bigquery.LoadConfiguration.ignoreUnknownValues()"
  - "com.google.cloud.bigquery.LoadConfiguration.toBuilder()"
  langs:
  - "java"
  name: "LoadConfiguration"
  nameWithType: "LoadConfiguration"
  fullName: "com.google.cloud.bigquery.LoadConfiguration"
  type: "Interface"
  package: "com.google.cloud.bigquery"
  summary: "Common interface for a load configuration. A load configuration (<xref uid=\"com.google.cloud.bigquery.WriteChannelConfiguration\" data-throw-if-not-resolved=\"false\">WriteChannelConfiguration</xref>) can be used to load data into a table with a <xref uid=\"\" data-throw-if-not-resolved=\"false\">com.google.cloud.WriteChannel</xref> (<xref uid=\"com.google.cloud.bigquery.BigQuery.writer(com.google.cloud.bigquery.WriteChannelConfiguration)\" data-throw-if-not-resolved=\"false\">BigQuery#writer(WriteChannelConfiguration)</xref>). A load configuration (<xref uid=\"com.google.cloud.bigquery.LoadJobConfiguration\" data-throw-if-not-resolved=\"false\">LoadJobConfiguration</xref>) can also be used to create a load job (<xref uid=\"com.google.cloud.bigquery.JobInfo.of(com.google.cloud.bigquery.JobConfiguration)\" data-throw-if-not-resolved=\"false\">JobInfo#of(JobConfiguration)</xref>)."
  syntax:
    content: "public interface LoadConfiguration"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getAutodetect()"
  id: "getAutodetect()"
  parent: "com.google.cloud.bigquery.LoadConfiguration"
  langs:
  - "java"
  name: "getAutodetect()"
  nameWithType: "LoadConfiguration.getAutodetect()"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getAutodetect()"
  overload: "com.google.cloud.bigquery.LoadConfiguration.getAutodetect*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "\\[Experimental\\] Returns whether automatic inference of the options and schema for CSV and JSON sources is set."
  syntax:
    content: "public abstract Boolean getAutodetect()"
    return:
      type: "java.lang.Boolean"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getClustering()"
  id: "getClustering()"
  parent: "com.google.cloud.bigquery.LoadConfiguration"
  langs:
  - "java"
  name: "getClustering()"
  nameWithType: "LoadConfiguration.getClustering()"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getClustering()"
  overload: "com.google.cloud.bigquery.LoadConfiguration.getClustering*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the clustering specification for the definition table."
  syntax:
    content: "public abstract Clustering getClustering()"
    return:
      type: "com.google.cloud.bigquery.Clustering"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getCreateDisposition()"
  id: "getCreateDisposition()"
  parent: "com.google.cloud.bigquery.LoadConfiguration"
  langs:
  - "java"
  name: "getCreateDisposition()"
  nameWithType: "LoadConfiguration.getCreateDisposition()"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getCreateDisposition()"
  overload: "com.google.cloud.bigquery.LoadConfiguration.getCreateDisposition*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns whether the job is allowed to create new tables."
  syntax:
    content: "public abstract JobInfo.CreateDisposition getCreateDisposition()"
    return:
      type: "com.google.cloud.bigquery.JobInfo.CreateDisposition"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getCsvOptions()"
  id: "getCsvOptions()"
  parent: "com.google.cloud.bigquery.LoadConfiguration"
  langs:
  - "java"
  name: "getCsvOptions()"
  nameWithType: "LoadConfiguration.getCsvOptions()"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getCsvOptions()"
  overload: "com.google.cloud.bigquery.LoadConfiguration.getCsvOptions*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns additional properties used to parse CSV data (used when <xref uid=\"com.google.cloud.bigquery.LoadConfiguration.getFormat()\" data-throw-if-not-resolved=\"false\">#getFormat()</xref> is set to CSV). Returns `null` if not set."
  syntax:
    content: "public abstract CsvOptions getCsvOptions()"
    return:
      type: "com.google.cloud.bigquery.CsvOptions"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getDatastoreBackupOptions()"
  id: "getDatastoreBackupOptions()"
  parent: "com.google.cloud.bigquery.LoadConfiguration"
  langs:
  - "java"
  name: "getDatastoreBackupOptions()"
  nameWithType: "LoadConfiguration.getDatastoreBackupOptions()"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getDatastoreBackupOptions()"
  overload: "com.google.cloud.bigquery.LoadConfiguration.getDatastoreBackupOptions*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns additional options used to load from a Cloud datastore backup."
  syntax:
    content: "public abstract DatastoreBackupOptions getDatastoreBackupOptions()"
    return:
      type: "com.google.cloud.bigquery.DatastoreBackupOptions"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getDestinationEncryptionConfiguration()"
  id: "getDestinationEncryptionConfiguration()"
  parent: "com.google.cloud.bigquery.LoadConfiguration"
  langs:
  - "java"
  name: "getDestinationEncryptionConfiguration()"
  nameWithType: "LoadConfiguration.getDestinationEncryptionConfiguration()"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getDestinationEncryptionConfiguration()"
  overload: "com.google.cloud.bigquery.LoadConfiguration.getDestinationEncryptionConfiguration*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public abstract EncryptionConfiguration getDestinationEncryptionConfiguration()"
    return:
      type: "com.google.cloud.bigquery.EncryptionConfiguration"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getDestinationTable()"
  id: "getDestinationTable()"
  parent: "com.google.cloud.bigquery.LoadConfiguration"
  langs:
  - "java"
  name: "getDestinationTable()"
  nameWithType: "LoadConfiguration.getDestinationTable()"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getDestinationTable()"
  overload: "com.google.cloud.bigquery.LoadConfiguration.getDestinationTable*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the destination table to load the data into."
  syntax:
    content: "public abstract TableId getDestinationTable()"
    return:
      type: "com.google.cloud.bigquery.TableId"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getFormat()"
  id: "getFormat()"
  parent: "com.google.cloud.bigquery.LoadConfiguration"
  langs:
  - "java"
  name: "getFormat()"
  nameWithType: "LoadConfiguration.getFormat()"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getFormat()"
  overload: "com.google.cloud.bigquery.LoadConfiguration.getFormat*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the format of the data files."
  syntax:
    content: "public abstract String getFormat()"
    return:
      type: "java.lang.String"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getMaxBadRecords()"
  id: "getMaxBadRecords()"
  parent: "com.google.cloud.bigquery.LoadConfiguration"
  langs:
  - "java"
  name: "getMaxBadRecords()"
  nameWithType: "LoadConfiguration.getMaxBadRecords()"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getMaxBadRecords()"
  overload: "com.google.cloud.bigquery.LoadConfiguration.getMaxBadRecords*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value, an invalid error is returned in the job result. By default no bad record is ignored."
  syntax:
    content: "public abstract Integer getMaxBadRecords()"
    return:
      type: "java.lang.Integer"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getNullMarker()"
  id: "getNullMarker()"
  parent: "com.google.cloud.bigquery.LoadConfiguration"
  langs:
  - "java"
  name: "getNullMarker()"
  nameWithType: "LoadConfiguration.getNullMarker()"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getNullMarker()"
  overload: "com.google.cloud.bigquery.LoadConfiguration.getNullMarker*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the string that represents a null value in a CSV file."
  syntax:
    content: "public abstract String getNullMarker()"
    return:
      type: "java.lang.String"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getSchema()"
  id: "getSchema()"
  parent: "com.google.cloud.bigquery.LoadConfiguration"
  langs:
  - "java"
  name: "getSchema()"
  nameWithType: "LoadConfiguration.getSchema()"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getSchema()"
  overload: "com.google.cloud.bigquery.LoadConfiguration.getSchema*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the schema for the destination table, if set. Returns `null` otherwise."
  syntax:
    content: "public abstract Schema getSchema()"
    return:
      type: "com.google.cloud.bigquery.Schema"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getSchemaUpdateOptions()"
  id: "getSchemaUpdateOptions()"
  parent: "com.google.cloud.bigquery.LoadConfiguration"
  langs:
  - "java"
  name: "getSchemaUpdateOptions()"
  nameWithType: "LoadConfiguration.getSchemaUpdateOptions()"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getSchemaUpdateOptions()"
  overload: "com.google.cloud.bigquery.LoadConfiguration.getSchemaUpdateOptions*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "\\[Experimental\\] Returns options allowing the schema of the destination table to be updated as a side effect of the load job. Schema update options are supported in two cases: when writeDisposition is WRITE\\_APPEND; when writeDisposition is WRITE\\_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE\\_TRUNCATE will always overwrite the schema."
  syntax:
    content: "public abstract List<JobInfo.SchemaUpdateOption> getSchemaUpdateOptions()"
    return:
      type: "java.util.List<com.google.cloud.bigquery.JobInfo.SchemaUpdateOption>"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getTimePartitioning()"
  id: "getTimePartitioning()"
  parent: "com.google.cloud.bigquery.LoadConfiguration"
  langs:
  - "java"
  name: "getTimePartitioning()"
  nameWithType: "LoadConfiguration.getTimePartitioning()"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getTimePartitioning()"
  overload: "com.google.cloud.bigquery.LoadConfiguration.getTimePartitioning*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the time partitioning specification defined for the destination table."
  syntax:
    content: "public abstract TimePartitioning getTimePartitioning()"
    return:
      type: "com.google.cloud.bigquery.TimePartitioning"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getUseAvroLogicalTypes()"
  id: "getUseAvroLogicalTypes()"
  parent: "com.google.cloud.bigquery.LoadConfiguration"
  langs:
  - "java"
  name: "getUseAvroLogicalTypes()"
  nameWithType: "LoadConfiguration.getUseAvroLogicalTypes()"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getUseAvroLogicalTypes()"
  overload: "com.google.cloud.bigquery.LoadConfiguration.getUseAvroLogicalTypes*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns True/False. Indicates whether the logical type is interpreted."
  syntax:
    content: "public abstract Boolean getUseAvroLogicalTypes()"
    return:
      type: "java.lang.Boolean"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getWriteDisposition()"
  id: "getWriteDisposition()"
  parent: "com.google.cloud.bigquery.LoadConfiguration"
  langs:
  - "java"
  name: "getWriteDisposition()"
  nameWithType: "LoadConfiguration.getWriteDisposition()"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getWriteDisposition()"
  overload: "com.google.cloud.bigquery.LoadConfiguration.getWriteDisposition*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the action that should occur if the destination table already exists."
  syntax:
    content: "public abstract JobInfo.WriteDisposition getWriteDisposition()"
    return:
      type: "com.google.cloud.bigquery.JobInfo.WriteDisposition"
- uid: "com.google.cloud.bigquery.LoadConfiguration.ignoreUnknownValues()"
  id: "ignoreUnknownValues()"
  parent: "com.google.cloud.bigquery.LoadConfiguration"
  langs:
  - "java"
  name: "ignoreUnknownValues()"
  nameWithType: "LoadConfiguration.ignoreUnknownValues()"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.ignoreUnknownValues()"
  overload: "com.google.cloud.bigquery.LoadConfiguration.ignoreUnknownValues*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns whether BigQuery should allow extra values that are not represented in the table schema. If `true`, the extra values are ignored. If `true`, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. By default unknown values are not allowed."
  syntax:
    content: "public abstract Boolean ignoreUnknownValues()"
    return:
      type: "java.lang.Boolean"
- uid: "com.google.cloud.bigquery.LoadConfiguration.toBuilder()"
  id: "toBuilder()"
  parent: "com.google.cloud.bigquery.LoadConfiguration"
  langs:
  - "java"
  name: "toBuilder()"
  nameWithType: "LoadConfiguration.toBuilder()"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.toBuilder()"
  overload: "com.google.cloud.bigquery.LoadConfiguration.toBuilder*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a builder for the load configuration object."
  syntax:
    content: "public abstract LoadConfiguration.Builder toBuilder()"
    return:
      type: "com.google.cloud.bigquery.LoadConfiguration.Builder"
references:
- uid: "com.google.cloud.bigquery.TableId"
  name: "TableId"
  nameWithType: "TableId"
  fullName: "com.google.cloud.bigquery.TableId"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getDestinationTable*"
  name: "getDestinationTable"
  nameWithType: "LoadConfiguration.getDestinationTable"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getDestinationTable"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.EncryptionConfiguration"
  name: "EncryptionConfiguration"
  nameWithType: "EncryptionConfiguration"
  fullName: "com.google.cloud.bigquery.EncryptionConfiguration"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getDestinationEncryptionConfiguration*"
  name: "getDestinationEncryptionConfiguration"
  nameWithType: "LoadConfiguration.getDestinationEncryptionConfiguration"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getDestinationEncryptionConfiguration"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.JobInfo.CreateDisposition"
  name: "JobInfo.CreateDisposition"
  nameWithType: "JobInfo.CreateDisposition"
  fullName: "com.google.cloud.bigquery.JobInfo.CreateDisposition"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getCreateDisposition*"
  name: "getCreateDisposition"
  nameWithType: "LoadConfiguration.getCreateDisposition"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getCreateDisposition"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.JobInfo.WriteDisposition"
  name: "JobInfo.WriteDisposition"
  nameWithType: "JobInfo.WriteDisposition"
  fullName: "com.google.cloud.bigquery.JobInfo.WriteDisposition"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getWriteDisposition*"
  name: "getWriteDisposition"
  nameWithType: "LoadConfiguration.getWriteDisposition"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getWriteDisposition"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getNullMarker*"
  name: "getNullMarker"
  nameWithType: "LoadConfiguration.getNullMarker"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getNullMarker"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.CsvOptions"
  name: "CsvOptions"
  nameWithType: "CsvOptions"
  fullName: "com.google.cloud.bigquery.CsvOptions"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getCsvOptions*"
  name: "getCsvOptions"
  nameWithType: "LoadConfiguration.getCsvOptions"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getCsvOptions"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Integer"
  spec.java:
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getMaxBadRecords*"
  name: "getMaxBadRecords"
  nameWithType: "LoadConfiguration.getMaxBadRecords"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getMaxBadRecords"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Schema"
  name: "Schema"
  nameWithType: "Schema"
  fullName: "com.google.cloud.bigquery.Schema"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getSchema*"
  name: "getSchema"
  nameWithType: "LoadConfiguration.getSchema"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getSchema"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getFormat*"
  name: "getFormat"
  nameWithType: "LoadConfiguration.getFormat"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getFormat"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Boolean"
  spec.java:
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
- uid: "com.google.cloud.bigquery.LoadConfiguration.ignoreUnknownValues*"
  name: "ignoreUnknownValues"
  nameWithType: "LoadConfiguration.ignoreUnknownValues"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.ignoreUnknownValues"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.DatastoreBackupOptions"
  name: "DatastoreBackupOptions"
  nameWithType: "DatastoreBackupOptions"
  fullName: "com.google.cloud.bigquery.DatastoreBackupOptions"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getDatastoreBackupOptions*"
  name: "getDatastoreBackupOptions"
  nameWithType: "LoadConfiguration.getDatastoreBackupOptions"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getDatastoreBackupOptions"
  package: "com.google.cloud.bigquery"
- uid: "java.util.List<com.google.cloud.bigquery.JobInfo.SchemaUpdateOption>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "com.google.cloud.bigquery.JobInfo.SchemaUpdateOption"
    name: "SchemaUpdateOption"
    fullName: "com.google.cloud.bigquery.JobInfo.SchemaUpdateOption"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getSchemaUpdateOptions*"
  name: "getSchemaUpdateOptions"
  nameWithType: "LoadConfiguration.getSchemaUpdateOptions"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getSchemaUpdateOptions"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getAutodetect*"
  name: "getAutodetect"
  nameWithType: "LoadConfiguration.getAutodetect"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getAutodetect"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TimePartitioning"
  name: "TimePartitioning"
  nameWithType: "TimePartitioning"
  fullName: "com.google.cloud.bigquery.TimePartitioning"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getTimePartitioning*"
  name: "getTimePartitioning"
  nameWithType: "LoadConfiguration.getTimePartitioning"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getTimePartitioning"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Clustering"
  name: "Clustering"
  nameWithType: "Clustering"
  fullName: "com.google.cloud.bigquery.Clustering"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getClustering*"
  name: "getClustering"
  nameWithType: "LoadConfiguration.getClustering"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getClustering"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.LoadConfiguration.getUseAvroLogicalTypes*"
  name: "getUseAvroLogicalTypes"
  nameWithType: "LoadConfiguration.getUseAvroLogicalTypes"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.getUseAvroLogicalTypes"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.LoadConfiguration.Builder"
  name: "LoadConfiguration.Builder"
  nameWithType: "LoadConfiguration.Builder"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.Builder"
- uid: "com.google.cloud.bigquery.LoadConfiguration.toBuilder*"
  name: "toBuilder"
  nameWithType: "LoadConfiguration.toBuilder"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.toBuilder"
  package: "com.google.cloud.bigquery"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "com.google.cloud.bigquery.JobInfo.SchemaUpdateOption"
  name: "JobInfo.SchemaUpdateOption"
  nameWithType: "JobInfo.SchemaUpdateOption"
  fullName: "com.google.cloud.bigquery.JobInfo.SchemaUpdateOption"
