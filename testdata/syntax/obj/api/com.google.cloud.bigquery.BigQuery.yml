### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.BigQuery"
  id: "BigQuery"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.BigQuery.DatasetDeleteOption"
  - "com.google.cloud.bigquery.BigQuery.DatasetField"
  - "com.google.cloud.bigquery.BigQuery.DatasetListOption"
  - "com.google.cloud.bigquery.BigQuery.DatasetOption"
  - "com.google.cloud.bigquery.BigQuery.IAMOption"
  - "com.google.cloud.bigquery.BigQuery.JobField"
  - "com.google.cloud.bigquery.BigQuery.JobListOption"
  - "com.google.cloud.bigquery.BigQuery.JobOption"
  - "com.google.cloud.bigquery.BigQuery.ModelField"
  - "com.google.cloud.bigquery.BigQuery.ModelListOption"
  - "com.google.cloud.bigquery.BigQuery.ModelOption"
  - "com.google.cloud.bigquery.BigQuery.QueryOption"
  - "com.google.cloud.bigquery.BigQuery.QueryResultsOption"
  - "com.google.cloud.bigquery.BigQuery.RoutineField"
  - "com.google.cloud.bigquery.BigQuery.RoutineListOption"
  - "com.google.cloud.bigquery.BigQuery.RoutineOption"
  - "com.google.cloud.bigquery.BigQuery.TableDataListOption"
  - "com.google.cloud.bigquery.BigQuery.TableField"
  - "com.google.cloud.bigquery.BigQuery.TableListOption"
  - "com.google.cloud.bigquery.BigQuery.TableOption"
  - "com.google.cloud.bigquery.BigQuery.cancel(com.google.cloud.bigquery.JobId)"
  - "com.google.cloud.bigquery.BigQuery.cancel(java.lang.String)"
  - "com.google.cloud.bigquery.BigQuery.create(com.google.cloud.bigquery.DatasetInfo,com.google.cloud.bigquery.BigQuery.DatasetOption...)"
  - "com.google.cloud.bigquery.BigQuery.create(com.google.cloud.bigquery.JobInfo,com.google.cloud.bigquery.BigQuery.JobOption...)"
  - "com.google.cloud.bigquery.BigQuery.create(com.google.cloud.bigquery.RoutineInfo,com.google.cloud.bigquery.BigQuery.RoutineOption...)"
  - "com.google.cloud.bigquery.BigQuery.create(com.google.cloud.bigquery.TableInfo,com.google.cloud.bigquery.BigQuery.TableOption...)"
  - "com.google.cloud.bigquery.BigQuery.delete(com.google.cloud.bigquery.DatasetId,com.google.cloud.bigquery.BigQuery.DatasetDeleteOption...)"
  - "com.google.cloud.bigquery.BigQuery.delete(com.google.cloud.bigquery.ModelId)"
  - "com.google.cloud.bigquery.BigQuery.delete(com.google.cloud.bigquery.RoutineId)"
  - "com.google.cloud.bigquery.BigQuery.delete(com.google.cloud.bigquery.TableId)"
  - "com.google.cloud.bigquery.BigQuery.delete(java.lang.String,com.google.cloud.bigquery.BigQuery.DatasetDeleteOption...)"
  - "com.google.cloud.bigquery.BigQuery.delete(java.lang.String,java.lang.String)"
  - "com.google.cloud.bigquery.BigQuery.getDataset(com.google.cloud.bigquery.DatasetId,com.google.cloud.bigquery.BigQuery.DatasetOption...)"
  - "com.google.cloud.bigquery.BigQuery.getDataset(java.lang.String,com.google.cloud.bigquery.BigQuery.DatasetOption...)"
  - "com.google.cloud.bigquery.BigQuery.getIamPolicy(com.google.cloud.bigquery.TableId,com.google.cloud.bigquery.BigQuery.IAMOption...)"
  - "com.google.cloud.bigquery.BigQuery.getJob(com.google.cloud.bigquery.JobId,com.google.cloud.bigquery.BigQuery.JobOption...)"
  - "com.google.cloud.bigquery.BigQuery.getJob(java.lang.String,com.google.cloud.bigquery.BigQuery.JobOption...)"
  - "com.google.cloud.bigquery.BigQuery.getModel(com.google.cloud.bigquery.ModelId,com.google.cloud.bigquery.BigQuery.ModelOption...)"
  - "com.google.cloud.bigquery.BigQuery.getModel(java.lang.String,java.lang.String,com.google.cloud.bigquery.BigQuery.ModelOption...)"
  - "com.google.cloud.bigquery.BigQuery.getQueryResults(com.google.cloud.bigquery.JobId,com.google.cloud.bigquery.BigQuery.QueryResultsOption...)"
  - "com.google.cloud.bigquery.BigQuery.getRoutine(com.google.cloud.bigquery.RoutineId,com.google.cloud.bigquery.BigQuery.RoutineOption...)"
  - "com.google.cloud.bigquery.BigQuery.getRoutine(java.lang.String,java.lang.String,com.google.cloud.bigquery.BigQuery.RoutineOption...)"
  - "com.google.cloud.bigquery.BigQuery.getTable(com.google.cloud.bigquery.TableId,com.google.cloud.bigquery.BigQuery.TableOption...)"
  - "com.google.cloud.bigquery.BigQuery.getTable(java.lang.String,java.lang.String,com.google.cloud.bigquery.BigQuery.TableOption...)"
  - "com.google.cloud.bigquery.BigQuery.insertAll(com.google.cloud.bigquery.InsertAllRequest)"
  - "com.google.cloud.bigquery.BigQuery.listDatasets(com.google.cloud.bigquery.BigQuery.DatasetListOption...)"
  - "com.google.cloud.bigquery.BigQuery.listDatasets(java.lang.String,com.google.cloud.bigquery.BigQuery.DatasetListOption...)"
  - "com.google.cloud.bigquery.BigQuery.listJobs(com.google.cloud.bigquery.BigQuery.JobListOption...)"
  - "com.google.cloud.bigquery.BigQuery.listModels(com.google.cloud.bigquery.DatasetId,com.google.cloud.bigquery.BigQuery.ModelListOption...)"
  - "com.google.cloud.bigquery.BigQuery.listModels(java.lang.String,com.google.cloud.bigquery.BigQuery.ModelListOption...)"
  - "com.google.cloud.bigquery.BigQuery.listPartitions(com.google.cloud.bigquery.TableId)"
  - "com.google.cloud.bigquery.BigQuery.listRoutines(com.google.cloud.bigquery.DatasetId,com.google.cloud.bigquery.BigQuery.RoutineListOption...)"
  - "com.google.cloud.bigquery.BigQuery.listRoutines(java.lang.String,com.google.cloud.bigquery.BigQuery.RoutineListOption...)"
  - "com.google.cloud.bigquery.BigQuery.listTableData(com.google.cloud.bigquery.TableId,com.google.cloud.bigquery.BigQuery.TableDataListOption...)"
  - "com.google.cloud.bigquery.BigQuery.listTableData(com.google.cloud.bigquery.TableId,com.google.cloud.bigquery.Schema,com.google.cloud.bigquery.BigQuery.TableDataListOption...)"
  - "com.google.cloud.bigquery.BigQuery.listTableData(java.lang.String,java.lang.String,com.google.cloud.bigquery.BigQuery.TableDataListOption...)"
  - "com.google.cloud.bigquery.BigQuery.listTableData(java.lang.String,java.lang.String,com.google.cloud.bigquery.Schema,com.google.cloud.bigquery.BigQuery.TableDataListOption...)"
  - "com.google.cloud.bigquery.BigQuery.listTables(com.google.cloud.bigquery.DatasetId,com.google.cloud.bigquery.BigQuery.TableListOption...)"
  - "com.google.cloud.bigquery.BigQuery.listTables(java.lang.String,com.google.cloud.bigquery.BigQuery.TableListOption...)"
  - "com.google.cloud.bigquery.BigQuery.query(com.google.cloud.bigquery.QueryJobConfiguration,com.google.cloud.bigquery.BigQuery.JobOption...)"
  - "com.google.cloud.bigquery.BigQuery.query(com.google.cloud.bigquery.QueryJobConfiguration,com.google.cloud.bigquery.JobId,com.google.cloud.bigquery.BigQuery.JobOption...)"
  - "com.google.cloud.bigquery.BigQuery.setIamPolicy(com.google.cloud.bigquery.TableId,com.google.cloud.Policy,com.google.cloud.bigquery.BigQuery.IAMOption...)"
  - "com.google.cloud.bigquery.BigQuery.testIamPermissions(com.google.cloud.bigquery.TableId,java.util.List<java.lang.String>,com.google.cloud.bigquery.BigQuery.IAMOption...)"
  - "com.google.cloud.bigquery.BigQuery.update(com.google.cloud.bigquery.DatasetInfo,com.google.cloud.bigquery.BigQuery.DatasetOption...)"
  - "com.google.cloud.bigquery.BigQuery.update(com.google.cloud.bigquery.ModelInfo,com.google.cloud.bigquery.BigQuery.ModelOption...)"
  - "com.google.cloud.bigquery.BigQuery.update(com.google.cloud.bigquery.RoutineInfo,com.google.cloud.bigquery.BigQuery.RoutineOption...)"
  - "com.google.cloud.bigquery.BigQuery.update(com.google.cloud.bigquery.TableInfo,com.google.cloud.bigquery.BigQuery.TableOption...)"
  - "com.google.cloud.bigquery.BigQuery.writer(com.google.cloud.bigquery.JobId,com.google.cloud.bigquery.WriteChannelConfiguration)"
  - "com.google.cloud.bigquery.BigQuery.writer(com.google.cloud.bigquery.WriteChannelConfiguration)"
  langs:
  - "java"
  name: "BigQuery"
  nameWithType: "BigQuery"
  fullName: "com.google.cloud.bigquery.BigQuery"
  type: "Interface"
  package: "com.google.cloud.bigquery"
  summary: "An interface for Google Cloud BigQuery."
  syntax:
    content: "public interface BigQuery extends Service<BigQueryOptions>"
  implements:
  - "com.google.cloud.Service<com.google.cloud.bigquery.BigQueryOptions>"
- uid: "com.google.cloud.bigquery.BigQuery.cancel(com.google.cloud.bigquery.JobId)"
  id: "cancel(com.google.cloud.bigquery.JobId)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "cancel(JobId jobId)"
  nameWithType: "BigQuery.cancel(JobId jobId)"
  fullName: "com.google.cloud.bigquery.BigQuery.cancel(JobId jobId)"
  overload: "com.google.cloud.bigquery.BigQuery.cancel*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sends a job cancel request. This call will return immediately. The job status can then be checked using either <xref uid=\"com.google.cloud.bigquery.BigQuery.getJob*\" data-throw-if-not-resolved=\"false\">#getJob(JobId, JobOption...)</xref> or <xref uid=\"#getJob(String,\n JobOption...)\" data-throw-if-not-resolved=\"false\">#getJob(String,\n JobOption...)</xref>).\n\nIf the location of the job is not \"US\" or \"EU\", the `jobId` must specify the job location.\n\nExample of cancelling a job.\n\n```java\n{\n   @code\n   String jobName = \"my_job_name\";\n   JobId jobId = JobId.of(jobName);\n   boolean success = bigquery.cancel(jobId);\n   if (success) {\n     // job was cancelled\n   } else {\n     // job was not found\n   }\n }\n```"
  syntax:
    content: "public abstract boolean cancel(JobId jobId)"
    parameters:
    - id: "jobId"
      type: "com.google.cloud.bigquery.JobId"
    return:
      type: "boolean"
      description: "<code>true</code> if cancel was requested successfully, <code>false</code> if the job was not\n     found"
- uid: "com.google.cloud.bigquery.BigQuery.cancel(java.lang.String)"
  id: "cancel(java.lang.String)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "cancel(String jobId)"
  nameWithType: "BigQuery.cancel(String jobId)"
  fullName: "com.google.cloud.bigquery.BigQuery.cancel(String jobId)"
  overload: "com.google.cloud.bigquery.BigQuery.cancel*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sends a job cancel request. This call will return immediately. The job status can then be checked using either <xref uid=\"com.google.cloud.bigquery.BigQuery.getJob*\" data-throw-if-not-resolved=\"false\">#getJob(JobId, JobOption...)</xref> or <xref uid=\"#getJob(String,\n JobOption...)\" data-throw-if-not-resolved=\"false\">#getJob(String,\n JobOption...)</xref>).\n\nIf the location of the job is not \"US\" or \"EU\", <xref uid=\"com.google.cloud.bigquery.BigQuery.cancel(com.google.cloud.bigquery.JobId)\" data-throw-if-not-resolved=\"false\">#cancel(JobId)</xref> must be used instead.\n\nExample of cancelling a job.\n\n```java\n{\n   @code\n   String jobName = \"my_job_name\";\n   boolean success = bigquery.cancel(jobName);\n   if (success) {\n     // job was cancelled\n   } else {\n     // job was not found\n   }\n }\n```"
  syntax:
    content: "public abstract boolean cancel(String jobId)"
    parameters:
    - id: "jobId"
      type: "java.lang.String"
    return:
      type: "boolean"
      description: "<code>true</code> if cancel was requested successfully, <code>false</code> if the job was not\n     found"
- uid: "com.google.cloud.bigquery.BigQuery.create(com.google.cloud.bigquery.DatasetInfo,com.google.cloud.bigquery.BigQuery.DatasetOption...)"
  id: "create(com.google.cloud.bigquery.DatasetInfo,com.google.cloud.bigquery.BigQuery.DatasetOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "create(DatasetInfo datasetInfo, BigQuery.DatasetOption[] options)"
  nameWithType: "BigQuery.create(DatasetInfo datasetInfo, BigQuery.DatasetOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.create(DatasetInfo datasetInfo, BigQuery.DatasetOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.create*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Creates a new dataset.\n\nExample of creating a dataset.\n\n```java\n{\n   @code\n   String datasetName = \"my_dataset_name\";\n   Dataset dataset = null;\n   DatasetInfo datasetInfo = DatasetInfo.newBuilder(datasetName).build();\n   try {\n     // the dataset was created\n     dataset = bigquery.create(datasetInfo);\n   } catch (BigQueryException e) {\n     // the dataset was not created\n   }\n }\n```"
  syntax:
    content: "public abstract Dataset create(DatasetInfo datasetInfo, BigQuery.DatasetOption[] options)"
    parameters:
    - id: "datasetInfo"
      type: "com.google.cloud.bigquery.DatasetInfo"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.DatasetOption[]"
    return:
      type: "com.google.cloud.bigquery.Dataset"
- uid: "com.google.cloud.bigquery.BigQuery.create(com.google.cloud.bigquery.JobInfo,com.google.cloud.bigquery.BigQuery.JobOption...)"
  id: "create(com.google.cloud.bigquery.JobInfo,com.google.cloud.bigquery.BigQuery.JobOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "create(JobInfo jobInfo, BigQuery.JobOption[] options)"
  nameWithType: "BigQuery.create(JobInfo jobInfo, BigQuery.JobOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.create(JobInfo jobInfo, BigQuery.JobOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.create*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Creates a new job.\n\nExample of loading a newline-delimited-json file with textual fields from GCS to a table.\n\n```java\n{\n   @code\n   String datasetName = \"my_dataset_name\";\n   String tableName = \"my_table_name\";\n   String sourceUri = \"gs://cloud-samples-data/bigquery/us-states/us-states.json\";\n   TableId tableId = TableId.of(datasetName, tableName);\n   // Table field definition\n   Field[] fields = new Field[] { Field.of(\"name\", LegacySQLTypeName.STRING),\n       Field.of(\"post_abbr\", LegacySQLTypeName.STRING) };\n   // Table schema definition\n   Schema schema = Schema.of(fields);\n   LoadJobConfiguration configuration = LoadJobConfiguration.builder(tableId, sourceUri)\n       .setFormatOptions(FormatOptions.json()).setCreateDisposition(CreateDisposition.CREATE_IF_NEEDED)\n       .setSchema(schema).build();\n   // Load the table\n   Job loadJob = bigquery.create(JobInfo.of(configuration));\n   loadJob = loadJob.waitFor();\n   // Check the table\n   System.out.println(\"State: \" + loadJob.getStatus().getState());\n   return ((StandardTableDefinition) bigquery.getTable(tableId).getDefinition()).getNumRows();\n }\n```\n\nExample of creating a query job.\n\n```java\n{\n   @code\n   String query = \"SELECT field FROM my_dataset_name.my_table_name\";\n   Job job = null;\n   JobConfiguration jobConfiguration = QueryJobConfiguration.of(query);\n   JobInfo jobInfo = JobInfo.of(jobConfiguration);\n   try {\n     job = bigquery.create(jobInfo);\n   } catch (BigQueryException e) {\n     // the job was not created\n   }\n }\n```"
  syntax:
    content: "public abstract Job create(JobInfo jobInfo, BigQuery.JobOption[] options)"
    parameters:
    - id: "jobInfo"
      type: "com.google.cloud.bigquery.JobInfo"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.JobOption[]"
    return:
      type: "com.google.cloud.bigquery.Job"
- uid: "com.google.cloud.bigquery.BigQuery.create(com.google.cloud.bigquery.RoutineInfo,com.google.cloud.bigquery.BigQuery.RoutineOption...)"
  id: "create(com.google.cloud.bigquery.RoutineInfo,com.google.cloud.bigquery.BigQuery.RoutineOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "create(RoutineInfo routineInfo, BigQuery.RoutineOption[] options)"
  nameWithType: "BigQuery.create(RoutineInfo routineInfo, BigQuery.RoutineOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.create(RoutineInfo routineInfo, BigQuery.RoutineOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.create*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Creates a new routine."
  syntax:
    content: "public abstract Routine create(RoutineInfo routineInfo, BigQuery.RoutineOption[] options)"
    parameters:
    - id: "routineInfo"
      type: "com.google.cloud.bigquery.RoutineInfo"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.RoutineOption[]"
    return:
      type: "com.google.cloud.bigquery.Routine"
- uid: "com.google.cloud.bigquery.BigQuery.create(com.google.cloud.bigquery.TableInfo,com.google.cloud.bigquery.BigQuery.TableOption...)"
  id: "create(com.google.cloud.bigquery.TableInfo,com.google.cloud.bigquery.BigQuery.TableOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "create(TableInfo tableInfo, BigQuery.TableOption[] options)"
  nameWithType: "BigQuery.create(TableInfo tableInfo, BigQuery.TableOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.create(TableInfo tableInfo, BigQuery.TableOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.create*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Creates a new table.\n\nExample of creating a table.\n\n```java\n{\n   @code\n   String datasetName = \"my_dataset_name\";\n   String tableName = \"my_table_name\";\n   String fieldName = \"string_field\";\n   TableId tableId = TableId.of(datasetName, tableName);\n   // Table field definition\n   Field field = Field.of(fieldName, LegacySQLTypeName.STRING);\n   // Table schema definition\n   Schema schema = Schema.of(field);\n   TableDefinition tableDefinition = StandardTableDefinition.of(schema);\n   TableInfo tableInfo = TableInfo.newBuilder(tableId, tableDefinition).build();\n   Table table = bigquery.create(tableInfo);\n }\n```"
  syntax:
    content: "public abstract Table create(TableInfo tableInfo, BigQuery.TableOption[] options)"
    parameters:
    - id: "tableInfo"
      type: "com.google.cloud.bigquery.TableInfo"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.TableOption[]"
    return:
      type: "com.google.cloud.bigquery.Table"
- uid: "com.google.cloud.bigquery.BigQuery.delete(com.google.cloud.bigquery.DatasetId,com.google.cloud.bigquery.BigQuery.DatasetDeleteOption...)"
  id: "delete(com.google.cloud.bigquery.DatasetId,com.google.cloud.bigquery.BigQuery.DatasetDeleteOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "delete(DatasetId datasetId, BigQuery.DatasetDeleteOption[] options)"
  nameWithType: "BigQuery.delete(DatasetId datasetId, BigQuery.DatasetDeleteOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.delete(DatasetId datasetId, BigQuery.DatasetDeleteOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.delete*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Deletes the requested dataset.\n\nExample of deleting a dataset, even if non-empty.\n\n```java\n{\n   @code\n   String projectId = \"my_project_id\";\n   String datasetName = \"my_dataset_name\";\n   DatasetId datasetId = DatasetId.of(projectId, datasetName);\n   boolean deleted = bigquery.delete(datasetId, DatasetDeleteOption.deleteContents());\n   if (deleted) {\n     // the dataset was deleted\n   } else {\n     // the dataset was not found\n   }\n }\n```"
  syntax:
    content: "public abstract boolean delete(DatasetId datasetId, BigQuery.DatasetDeleteOption[] options)"
    parameters:
    - id: "datasetId"
      type: "com.google.cloud.bigquery.DatasetId"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.DatasetDeleteOption[]"
    return:
      type: "boolean"
      description: "<code>true</code> if dataset was deleted, <code>false</code> if it was not found"
- uid: "com.google.cloud.bigquery.BigQuery.delete(com.google.cloud.bigquery.ModelId)"
  id: "delete(com.google.cloud.bigquery.ModelId)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "delete(ModelId modelId)"
  nameWithType: "BigQuery.delete(ModelId modelId)"
  fullName: "com.google.cloud.bigquery.BigQuery.delete(ModelId modelId)"
  overload: "com.google.cloud.bigquery.BigQuery.delete*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Deletes the requested model.\n\nExample of deleting a model.\n\n```java\n{\n   @code\n   String projectId = \"my_project_id\";\n   String datasetName = \"my_dataset_name\";\n   String tableName = \"my_model_name\";\n   ModelId modelId = ModelId.of(projectId, datasetName, modelName);\n   boolean deleted = bigquery.delete(modelId);\n   if (deleted) {\n     // the model was deleted\n   } else {\n     // the model was not found\n   }\n }\n```"
  syntax:
    content: "public abstract boolean delete(ModelId modelId)"
    parameters:
    - id: "modelId"
      type: "com.google.cloud.bigquery.ModelId"
    return:
      type: "boolean"
      description: "<code>true</code> if model was deleted, <code>false</code> if it was not found"
- uid: "com.google.cloud.bigquery.BigQuery.delete(com.google.cloud.bigquery.RoutineId)"
  id: "delete(com.google.cloud.bigquery.RoutineId)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "delete(RoutineId routineId)"
  nameWithType: "BigQuery.delete(RoutineId routineId)"
  fullName: "com.google.cloud.bigquery.BigQuery.delete(RoutineId routineId)"
  overload: "com.google.cloud.bigquery.BigQuery.delete*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Deletes the requested routine.\n\nExample of deleting a routine.\n\n```java\n{@code\n String projectId = \"my_project_id\";\n String datasetId = \"my_dataset_id\";\n String routineId = \"my_routine_id\";\n RoutineId routineId = RoutineId.of(projectId, datasetId, routineId);\n boolean deleted = bigquery.delete(routineId);\n if (deleted) {\n   // the routine was deleted\n } else {\n   // the routine was not found\n }\n```"
  syntax:
    content: "public abstract boolean delete(RoutineId routineId)"
    parameters:
    - id: "routineId"
      type: "com.google.cloud.bigquery.RoutineId"
    return:
      type: "boolean"
      description: "<code>true</code> if routine was deleted, <code>false</code> if it was not\n found"
- uid: "com.google.cloud.bigquery.BigQuery.delete(com.google.cloud.bigquery.TableId)"
  id: "delete(com.google.cloud.bigquery.TableId)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "delete(TableId tableId)"
  nameWithType: "BigQuery.delete(TableId tableId)"
  fullName: "com.google.cloud.bigquery.BigQuery.delete(TableId tableId)"
  overload: "com.google.cloud.bigquery.BigQuery.delete*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Deletes the requested table.\n\nExample of deleting a table.\n\n```java\n{\n   @code\n   String projectId = \"my_project_id\";\n   String datasetName = \"my_dataset_name\";\n   String tableName = \"my_table_name\";\n   TableId tableId = TableId.of(projectId, datasetName, tableName);\n   boolean deleted = bigquery.delete(tableId);\n   if (deleted) {\n     // the table was deleted\n   } else {\n     // the table was not found\n   }\n }\n```"
  syntax:
    content: "public abstract boolean delete(TableId tableId)"
    parameters:
    - id: "tableId"
      type: "com.google.cloud.bigquery.TableId"
    return:
      type: "boolean"
      description: "<code>true</code> if table was deleted, <code>false</code> if it was not found"
- uid: "com.google.cloud.bigquery.BigQuery.delete(java.lang.String,com.google.cloud.bigquery.BigQuery.DatasetDeleteOption...)"
  id: "delete(java.lang.String,com.google.cloud.bigquery.BigQuery.DatasetDeleteOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "delete(String datasetId, BigQuery.DatasetDeleteOption[] options)"
  nameWithType: "BigQuery.delete(String datasetId, BigQuery.DatasetDeleteOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.delete(String datasetId, BigQuery.DatasetDeleteOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.delete*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Deletes the requested dataset.\n\nExample of deleting a dataset from its id, even if non-empty.\n\n```java\n{\n   @code\n   String datasetName = \"my_dataset_name\";\n   boolean deleted = bigquery.delete(datasetName, DatasetDeleteOption.deleteContents());\n   if (deleted) {\n     // the dataset was deleted\n   } else {\n     // the dataset was not found\n   }\n }\n```"
  syntax:
    content: "public abstract boolean delete(String datasetId, BigQuery.DatasetDeleteOption[] options)"
    parameters:
    - id: "datasetId"
      type: "java.lang.String"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.DatasetDeleteOption[]"
    return:
      type: "boolean"
      description: "<code>true</code> if dataset was deleted, <code>false</code> if it was not found"
- uid: "com.google.cloud.bigquery.BigQuery.delete(java.lang.String,java.lang.String)"
  id: "delete(java.lang.String,java.lang.String)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "delete(String datasetId, String tableId)"
  nameWithType: "BigQuery.delete(String datasetId, String tableId)"
  fullName: "com.google.cloud.bigquery.BigQuery.delete(String datasetId, String tableId)"
  overload: "com.google.cloud.bigquery.BigQuery.delete*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Deletes the requested table."
  syntax:
    content: "public abstract boolean delete(String datasetId, String tableId)"
    parameters:
    - id: "datasetId"
      type: "java.lang.String"
    - id: "tableId"
      type: "java.lang.String"
    return:
      type: "boolean"
      description: "<code>true</code> if table was deleted, <code>false</code> if it was not found"
- uid: "com.google.cloud.bigquery.BigQuery.getDataset(com.google.cloud.bigquery.DatasetId,com.google.cloud.bigquery.BigQuery.DatasetOption...)"
  id: "getDataset(com.google.cloud.bigquery.DatasetId,com.google.cloud.bigquery.BigQuery.DatasetOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "getDataset(DatasetId datasetId, BigQuery.DatasetOption[] options)"
  nameWithType: "BigQuery.getDataset(DatasetId datasetId, BigQuery.DatasetOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.getDataset(DatasetId datasetId, BigQuery.DatasetOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.getDataset*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the requested dataset or `null` if not found.\n\nExample of getting a dataset.\n\n```java\n{\n   @code\n   String projectId = \"my_project_id\";\n   String datasetName = \"my_dataset_name\";\n   DatasetId datasetId = DatasetId.of(projectId, datasetName);\n   Dataset dataset = bigquery.getDataset(datasetId);\n }\n```"
  syntax:
    content: "public abstract Dataset getDataset(DatasetId datasetId, BigQuery.DatasetOption[] options)"
    parameters:
    - id: "datasetId"
      type: "com.google.cloud.bigquery.DatasetId"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.DatasetOption[]"
    return:
      type: "com.google.cloud.bigquery.Dataset"
- uid: "com.google.cloud.bigquery.BigQuery.getDataset(java.lang.String,com.google.cloud.bigquery.BigQuery.DatasetOption...)"
  id: "getDataset(java.lang.String,com.google.cloud.bigquery.BigQuery.DatasetOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "getDataset(String datasetId, BigQuery.DatasetOption[] options)"
  nameWithType: "BigQuery.getDataset(String datasetId, BigQuery.DatasetOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.getDataset(String datasetId, BigQuery.DatasetOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.getDataset*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the requested dataset or `null` if not found.\n\nExample of getting a dataset.\n\n```java\n{\n   @code\n   String datasetName = \"my_dataset\";\n   Dataset dataset = bigquery.getDataset(datasetName);\n }\n```"
  syntax:
    content: "public abstract Dataset getDataset(String datasetId, BigQuery.DatasetOption[] options)"
    parameters:
    - id: "datasetId"
      type: "java.lang.String"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.DatasetOption[]"
    return:
      type: "com.google.cloud.bigquery.Dataset"
- uid: "com.google.cloud.bigquery.BigQuery.getIamPolicy(com.google.cloud.bigquery.TableId,com.google.cloud.bigquery.BigQuery.IAMOption...)"
  id: "getIamPolicy(com.google.cloud.bigquery.TableId,com.google.cloud.bigquery.BigQuery.IAMOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "getIamPolicy(TableId tableId, BigQuery.IAMOption[] options)"
  nameWithType: "BigQuery.getIamPolicy(TableId tableId, BigQuery.IAMOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.getIamPolicy(TableId tableId, BigQuery.IAMOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.getIamPolicy*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Gets the IAM policy for a specified table."
  syntax:
    content: "public abstract Policy getIamPolicy(TableId tableId, BigQuery.IAMOption[] options)"
    parameters:
    - id: "tableId"
      type: "com.google.cloud.bigquery.TableId"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.IAMOption[]"
    return:
      type: "com.google.cloud.Policy"
- uid: "com.google.cloud.bigquery.BigQuery.getJob(com.google.cloud.bigquery.JobId,com.google.cloud.bigquery.BigQuery.JobOption...)"
  id: "getJob(com.google.cloud.bigquery.JobId,com.google.cloud.bigquery.BigQuery.JobOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "getJob(JobId jobId, BigQuery.JobOption[] options)"
  nameWithType: "BigQuery.getJob(JobId jobId, BigQuery.JobOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.getJob(JobId jobId, BigQuery.JobOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.getJob*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the requested job or `null` if not found. If the location of the job is not \"US\" or \"EU\", the `jobId` must specify the job location.\n\nExample of getting a job.\n\n```java\n{\n   @code\n   String jobName = \"my_job_name\";\n   JobId jobIdObject = JobId.of(jobName);\n   Job job = bigquery.getJob(jobIdObject);\n   if (job == null) {\n     // job was not found\n   }\n }\n```"
  syntax:
    content: "public abstract Job getJob(JobId jobId, BigQuery.JobOption[] options)"
    parameters:
    - id: "jobId"
      type: "com.google.cloud.bigquery.JobId"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.JobOption[]"
    return:
      type: "com.google.cloud.bigquery.Job"
- uid: "com.google.cloud.bigquery.BigQuery.getJob(java.lang.String,com.google.cloud.bigquery.BigQuery.JobOption...)"
  id: "getJob(java.lang.String,com.google.cloud.bigquery.BigQuery.JobOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "getJob(String jobId, BigQuery.JobOption[] options)"
  nameWithType: "BigQuery.getJob(String jobId, BigQuery.JobOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.getJob(String jobId, BigQuery.JobOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.getJob*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the requested job or `null` if not found. If the location of the job is not \"US\" or \"EU\", <xref uid=\"com.google.cloud.bigquery.BigQuery.getJob*\" data-throw-if-not-resolved=\"false\">#getJob(JobId, JobOption...)</xref> must be used instead.\n\nExample of getting a job.\n\n```java\n{\n   @code\n   String jobName = \"my_job_name\";\n   Job job = bigquery.getJob(jobName);\n   if (job == null) {\n     // job was not found\n   }\n }\n```"
  syntax:
    content: "public abstract Job getJob(String jobId, BigQuery.JobOption[] options)"
    parameters:
    - id: "jobId"
      type: "java.lang.String"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.JobOption[]"
    return:
      type: "com.google.cloud.bigquery.Job"
- uid: "com.google.cloud.bigquery.BigQuery.getModel(com.google.cloud.bigquery.ModelId,com.google.cloud.bigquery.BigQuery.ModelOption...)"
  id: "getModel(com.google.cloud.bigquery.ModelId,com.google.cloud.bigquery.BigQuery.ModelOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "getModel(ModelId tableId, BigQuery.ModelOption[] options)"
  nameWithType: "BigQuery.getModel(ModelId tableId, BigQuery.ModelOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.getModel(ModelId tableId, BigQuery.ModelOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.getModel*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the requested model or `null` if not found.\n\nExample of getting a model.\n\n```java\n{\n   @code\n   String projectId = \"my_project_id\";\n   String datasetName = \"my_dataset_name\";\n   String modelName = \"my_model_name\";\n   ModelId modelId = ModelId.of(projectId, datasetName, tableName);\n   Model model = bigquery.getModel(modelId);\n }\n```"
  syntax:
    content: "public abstract Model getModel(ModelId tableId, BigQuery.ModelOption[] options)"
    parameters:
    - id: "tableId"
      type: "com.google.cloud.bigquery.ModelId"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.ModelOption[]"
    return:
      type: "com.google.cloud.bigquery.Model"
- uid: "com.google.cloud.bigquery.BigQuery.getModel(java.lang.String,java.lang.String,com.google.cloud.bigquery.BigQuery.ModelOption...)"
  id: "getModel(java.lang.String,java.lang.String,com.google.cloud.bigquery.BigQuery.ModelOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "getModel(String datasetId, String modelId, BigQuery.ModelOption[] options)"
  nameWithType: "BigQuery.getModel(String datasetId, String modelId, BigQuery.ModelOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.getModel(String datasetId, String modelId, BigQuery.ModelOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.getModel*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the requested model or `null` if not found."
  syntax:
    content: "public abstract Model getModel(String datasetId, String modelId, BigQuery.ModelOption[] options)"
    parameters:
    - id: "datasetId"
      type: "java.lang.String"
    - id: "modelId"
      type: "java.lang.String"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.ModelOption[]"
    return:
      type: "com.google.cloud.bigquery.Model"
- uid: "com.google.cloud.bigquery.BigQuery.getQueryResults(com.google.cloud.bigquery.JobId,com.google.cloud.bigquery.BigQuery.QueryResultsOption...)"
  id: "getQueryResults(com.google.cloud.bigquery.JobId,com.google.cloud.bigquery.BigQuery.QueryResultsOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "getQueryResults(JobId jobId, BigQuery.QueryResultsOption[] options)"
  nameWithType: "BigQuery.getQueryResults(JobId jobId, BigQuery.QueryResultsOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.getQueryResults(JobId jobId, BigQuery.QueryResultsOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.getQueryResults*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns results of the query associated with the provided job.\n\nUsers are encouraged to use <xref uid=\"com.google.cloud.bigquery.Job.getQueryResults*\" data-throw-if-not-resolved=\"false\">Job#getQueryResults(QueryResultsOption...)</xref> instead."
  syntax:
    content: "public abstract QueryResponse getQueryResults(JobId jobId, BigQuery.QueryResultsOption[] options)"
    parameters:
    - id: "jobId"
      type: "com.google.cloud.bigquery.JobId"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.QueryResultsOption[]"
    return:
      type: "com.google.cloud.bigquery.QueryResponse"
- uid: "com.google.cloud.bigquery.BigQuery.getRoutine(com.google.cloud.bigquery.RoutineId,com.google.cloud.bigquery.BigQuery.RoutineOption...)"
  id: "getRoutine(com.google.cloud.bigquery.RoutineId,com.google.cloud.bigquery.BigQuery.RoutineOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "getRoutine(RoutineId routineId, BigQuery.RoutineOption[] options)"
  nameWithType: "BigQuery.getRoutine(RoutineId routineId, BigQuery.RoutineOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.getRoutine(RoutineId routineId, BigQuery.RoutineOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.getRoutine*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the requested routine or `null` if not found."
  syntax:
    content: "public abstract Routine getRoutine(RoutineId routineId, BigQuery.RoutineOption[] options)"
    parameters:
    - id: "routineId"
      type: "com.google.cloud.bigquery.RoutineId"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.RoutineOption[]"
    return:
      type: "com.google.cloud.bigquery.Routine"
- uid: "com.google.cloud.bigquery.BigQuery.getRoutine(java.lang.String,java.lang.String,com.google.cloud.bigquery.BigQuery.RoutineOption...)"
  id: "getRoutine(java.lang.String,java.lang.String,com.google.cloud.bigquery.BigQuery.RoutineOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "getRoutine(String datasetId, String routineId, BigQuery.RoutineOption[] options)"
  nameWithType: "BigQuery.getRoutine(String datasetId, String routineId, BigQuery.RoutineOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.getRoutine(String datasetId, String routineId, BigQuery.RoutineOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.getRoutine*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the requested routine or `null` if not found."
  syntax:
    content: "public abstract Routine getRoutine(String datasetId, String routineId, BigQuery.RoutineOption[] options)"
    parameters:
    - id: "datasetId"
      type: "java.lang.String"
    - id: "routineId"
      type: "java.lang.String"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.RoutineOption[]"
    return:
      type: "com.google.cloud.bigquery.Routine"
- uid: "com.google.cloud.bigquery.BigQuery.getTable(com.google.cloud.bigquery.TableId,com.google.cloud.bigquery.BigQuery.TableOption...)"
  id: "getTable(com.google.cloud.bigquery.TableId,com.google.cloud.bigquery.BigQuery.TableOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "getTable(TableId tableId, BigQuery.TableOption[] options)"
  nameWithType: "BigQuery.getTable(TableId tableId, BigQuery.TableOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.getTable(TableId tableId, BigQuery.TableOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.getTable*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the requested table or `null` if not found.\n\nExample of getting a table.\n\n```java\n{\n   @code\n   String projectId = \"my_project_id\";\n   String datasetName = \"my_dataset_name\";\n   String tableName = \"my_table_name\";\n   TableId tableId = TableId.of(projectId, datasetName, tableName);\n   Table table = bigquery.getTable(tableId);\n }\n```"
  syntax:
    content: "public abstract Table getTable(TableId tableId, BigQuery.TableOption[] options)"
    parameters:
    - id: "tableId"
      type: "com.google.cloud.bigquery.TableId"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.TableOption[]"
    return:
      type: "com.google.cloud.bigquery.Table"
- uid: "com.google.cloud.bigquery.BigQuery.getTable(java.lang.String,java.lang.String,com.google.cloud.bigquery.BigQuery.TableOption...)"
  id: "getTable(java.lang.String,java.lang.String,com.google.cloud.bigquery.BigQuery.TableOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "getTable(String datasetId, String tableId, BigQuery.TableOption[] options)"
  nameWithType: "BigQuery.getTable(String datasetId, String tableId, BigQuery.TableOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.getTable(String datasetId, String tableId, BigQuery.TableOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.getTable*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the requested table or `null` if not found.\n\nExample of getting a table.\n\n```java\n{\n   @code\n   String datasetName = \"my_dataset_name\";\n   String tableName = \"my_table_name\";\n   Table table = bigquery.getTable(datasetName, tableName);\n }\n```"
  syntax:
    content: "public abstract Table getTable(String datasetId, String tableId, BigQuery.TableOption[] options)"
    parameters:
    - id: "datasetId"
      type: "java.lang.String"
    - id: "tableId"
      type: "java.lang.String"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.TableOption[]"
    return:
      type: "com.google.cloud.bigquery.Table"
- uid: "com.google.cloud.bigquery.BigQuery.insertAll(com.google.cloud.bigquery.InsertAllRequest)"
  id: "insertAll(com.google.cloud.bigquery.InsertAllRequest)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "insertAll(InsertAllRequest request)"
  nameWithType: "BigQuery.insertAll(InsertAllRequest request)"
  fullName: "com.google.cloud.bigquery.BigQuery.insertAll(InsertAllRequest request)"
  overload: "com.google.cloud.bigquery.BigQuery.insertAll*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sends an insert all request.\n\nExample of inserting rows into a table without running a load job.\n\n```java\n{\n   @code\n   String datasetName = \"my_dataset_name\";\n   String tableName = \"my_table_name\";\n   TableId tableId = TableId.of(datasetName, tableName);\n   // Values of the row to insert\n   Map rowContent = new HashMap<>();\n   rowContent.put(\"booleanField\", true);\n   // Bytes are passed in base64\n   rowContent.put(\"bytesField\", \"Cg0NDg0=\"); // 0xA, 0xD, 0xD, 0xE, 0xD in base64\n   // Records are passed as a map\n   Map recordsContent = new HashMap<>();\n   recordsContent.put(\"stringField\", \"Hello, World!\");\n   rowContent.put(\"recordField\", recordsContent);\n   InsertAllResponse response = bigquery.insertAll(InsertAllRequest.newBuilder(tableId).addRow(\"rowId\", rowContent)\n       // More rows can be added in the same RPC by invoking .addRow() on the\n       // builder\n       .build());\n   if (response.hasErrors()) {\n     // If any of the insertions failed, this lets you inspect the errors\n     for (Entry> entry : response.getInsertErrors().entrySet()) {\n       // inspect row error\n     }\n   }\n }\n```"
  syntax:
    content: "public abstract InsertAllResponse insertAll(InsertAllRequest request)"
    parameters:
    - id: "request"
      type: "com.google.cloud.bigquery.InsertAllRequest"
    return:
      type: "com.google.cloud.bigquery.InsertAllResponse"
- uid: "com.google.cloud.bigquery.BigQuery.listDatasets(com.google.cloud.bigquery.BigQuery.DatasetListOption...)"
  id: "listDatasets(com.google.cloud.bigquery.BigQuery.DatasetListOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "listDatasets(BigQuery.DatasetListOption[] options)"
  nameWithType: "BigQuery.listDatasets(BigQuery.DatasetListOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.listDatasets(BigQuery.DatasetListOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.listDatasets*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Lists the project's datasets. This method returns partial information on each dataset: (<xref uid=\"com.google.cloud.bigquery.Dataset.getDatasetId*\" data-throw-if-not-resolved=\"false\">Dataset#getDatasetId()</xref>, <xref uid=\"com.google.cloud.bigquery.Dataset.getFriendlyName*\" data-throw-if-not-resolved=\"false\">Dataset#getFriendlyName()</xref> and <xref uid=\"com.google.cloud.bigquery.Dataset.getGeneratedId*\" data-throw-if-not-resolved=\"false\">Dataset#getGeneratedId()</xref>). To get complete information use either <xref uid=\"#getDataset(String,\n DatasetOption...)\" data-throw-if-not-resolved=\"false\">#getDataset(String,\n DatasetOption...)</xref> or <xref uid=\"com.google.cloud.bigquery.BigQuery.getDataset*\" data-throw-if-not-resolved=\"false\">#getDataset(DatasetId, DatasetOption...)</xref>.\n\nExample of listing datasets, specifying the page size.\n\n```java\n{\n   @code\n   // List datasets in the default project\n   Page datasets = bigquery.listDatasets(DatasetListOption.pageSize(100));\n   for (Dataset dataset : datasets.iterateAll()) {\n     // do something with the dataset\n   }\n }\n```"
  syntax:
    content: "public abstract Page<Dataset> listDatasets(BigQuery.DatasetListOption[] options)"
    parameters:
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.DatasetListOption[]"
    return:
      type: "com.google.api.gax.paging.Page<com.google.cloud.bigquery.Dataset>"
- uid: "com.google.cloud.bigquery.BigQuery.listDatasets(java.lang.String,com.google.cloud.bigquery.BigQuery.DatasetListOption...)"
  id: "listDatasets(java.lang.String,com.google.cloud.bigquery.BigQuery.DatasetListOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "listDatasets(String projectId, BigQuery.DatasetListOption[] options)"
  nameWithType: "BigQuery.listDatasets(String projectId, BigQuery.DatasetListOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.listDatasets(String projectId, BigQuery.DatasetListOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.listDatasets*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Lists the datasets in the provided project. This method returns partial information on each dataset: (<xref uid=\"com.google.cloud.bigquery.Dataset.getDatasetId*\" data-throw-if-not-resolved=\"false\">Dataset#getDatasetId()</xref>, <xref uid=\"com.google.cloud.bigquery.Dataset.getFriendlyName*\" data-throw-if-not-resolved=\"false\">Dataset#getFriendlyName()</xref> and <xref uid=\"com.google.cloud.bigquery.Dataset.getGeneratedId*\" data-throw-if-not-resolved=\"false\">Dataset#getGeneratedId()</xref>). To get complete information use either <xref uid=\"#getDataset(String,\n DatasetOption...)\" data-throw-if-not-resolved=\"false\">#getDataset(String,\n DatasetOption...)</xref> or <xref uid=\"com.google.cloud.bigquery.BigQuery.getDataset*\" data-throw-if-not-resolved=\"false\">#getDataset(DatasetId, DatasetOption...)</xref>.\n\nExample of listing datasets in a project, specifying the page size.\n\n```java\n{\n   @code\n   String projectId = \"my_project_id\";\n   // List datasets in a specified project\n   Page datasets = bigquery.listDatasets(projectId, DatasetListOption.pageSize(100));\n   for (Dataset dataset : datasets.iterateAll()) {\n     // do something with the dataset\n   }\n }\n```"
  syntax:
    content: "public abstract Page<Dataset> listDatasets(String projectId, BigQuery.DatasetListOption[] options)"
    parameters:
    - id: "projectId"
      type: "java.lang.String"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.DatasetListOption[]"
    return:
      type: "com.google.api.gax.paging.Page<com.google.cloud.bigquery.Dataset>"
- uid: "com.google.cloud.bigquery.BigQuery.listJobs(com.google.cloud.bigquery.BigQuery.JobListOption...)"
  id: "listJobs(com.google.cloud.bigquery.BigQuery.JobListOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "listJobs(BigQuery.JobListOption[] options)"
  nameWithType: "BigQuery.listJobs(BigQuery.JobListOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.listJobs(BigQuery.JobListOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.listJobs*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Lists the jobs.\n\nExample of listing jobs, specifying the page size.\n\n```java\n{\n   @code\n   Page jobs = bigquery.listJobs(JobListOption.pageSize(100));\n   for (Job job : jobs.iterateAll()) {\n     // do something with the job\n   }\n }\n```"
  syntax:
    content: "public abstract Page<Job> listJobs(BigQuery.JobListOption[] options)"
    parameters:
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.JobListOption[]"
    return:
      type: "com.google.api.gax.paging.Page<com.google.cloud.bigquery.Job>"
- uid: "com.google.cloud.bigquery.BigQuery.listModels(com.google.cloud.bigquery.DatasetId,com.google.cloud.bigquery.BigQuery.ModelListOption...)"
  id: "listModels(com.google.cloud.bigquery.DatasetId,com.google.cloud.bigquery.BigQuery.ModelListOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "listModels(DatasetId datasetId, BigQuery.ModelListOption[] options)"
  nameWithType: "BigQuery.listModels(DatasetId datasetId, BigQuery.ModelListOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.listModels(DatasetId datasetId, BigQuery.ModelListOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.listModels*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Lists the models in the dataset."
  syntax:
    content: "public abstract Page<Model> listModels(DatasetId datasetId, BigQuery.ModelListOption[] options)"
    parameters:
    - id: "datasetId"
      type: "com.google.cloud.bigquery.DatasetId"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.ModelListOption[]"
    return:
      type: "com.google.api.gax.paging.Page<com.google.cloud.bigquery.Model>"
- uid: "com.google.cloud.bigquery.BigQuery.listModels(java.lang.String,com.google.cloud.bigquery.BigQuery.ModelListOption...)"
  id: "listModels(java.lang.String,com.google.cloud.bigquery.BigQuery.ModelListOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "listModels(String datasetId, BigQuery.ModelListOption[] options)"
  nameWithType: "BigQuery.listModels(String datasetId, BigQuery.ModelListOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.listModels(String datasetId, BigQuery.ModelListOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.listModels*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Lists the models in the dataset."
  syntax:
    content: "public abstract Page<Model> listModels(String datasetId, BigQuery.ModelListOption[] options)"
    parameters:
    - id: "datasetId"
      type: "java.lang.String"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.ModelListOption[]"
    return:
      type: "com.google.api.gax.paging.Page<com.google.cloud.bigquery.Model>"
- uid: "com.google.cloud.bigquery.BigQuery.listPartitions(com.google.cloud.bigquery.TableId)"
  id: "listPartitions(com.google.cloud.bigquery.TableId)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "listPartitions(TableId tableId)"
  nameWithType: "BigQuery.listPartitions(TableId tableId)"
  fullName: "com.google.cloud.bigquery.BigQuery.listPartitions(TableId tableId)"
  overload: "com.google.cloud.bigquery.BigQuery.listPartitions*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public abstract List<String> listPartitions(TableId tableId)"
    parameters:
    - id: "tableId"
      type: "com.google.cloud.bigquery.TableId"
    return:
      type: "java.util.List<java.lang.String>"
      description: "A list of the partition ids present in the partitioned table"
- uid: "com.google.cloud.bigquery.BigQuery.listRoutines(com.google.cloud.bigquery.DatasetId,com.google.cloud.bigquery.BigQuery.RoutineListOption...)"
  id: "listRoutines(com.google.cloud.bigquery.DatasetId,com.google.cloud.bigquery.BigQuery.RoutineListOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "listRoutines(DatasetId datasetId, BigQuery.RoutineListOption[] options)"
  nameWithType: "BigQuery.listRoutines(DatasetId datasetId, BigQuery.RoutineListOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.listRoutines(DatasetId datasetId, BigQuery.RoutineListOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.listRoutines*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Lists the routines in the specified dataset."
  syntax:
    content: "public abstract Page<Routine> listRoutines(DatasetId datasetId, BigQuery.RoutineListOption[] options)"
    parameters:
    - id: "datasetId"
      type: "com.google.cloud.bigquery.DatasetId"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.RoutineListOption[]"
    return:
      type: "com.google.api.gax.paging.Page<com.google.cloud.bigquery.Routine>"
- uid: "com.google.cloud.bigquery.BigQuery.listRoutines(java.lang.String,com.google.cloud.bigquery.BigQuery.RoutineListOption...)"
  id: "listRoutines(java.lang.String,com.google.cloud.bigquery.BigQuery.RoutineListOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "listRoutines(String datasetId, BigQuery.RoutineListOption[] options)"
  nameWithType: "BigQuery.listRoutines(String datasetId, BigQuery.RoutineListOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.listRoutines(String datasetId, BigQuery.RoutineListOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.listRoutines*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Lists the routines in the specified dataset."
  syntax:
    content: "public abstract Page<Routine> listRoutines(String datasetId, BigQuery.RoutineListOption[] options)"
    parameters:
    - id: "datasetId"
      type: "java.lang.String"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.RoutineListOption[]"
    return:
      type: "com.google.api.gax.paging.Page<com.google.cloud.bigquery.Routine>"
- uid: "com.google.cloud.bigquery.BigQuery.listTableData(com.google.cloud.bigquery.TableId,com.google.cloud.bigquery.BigQuery.TableDataListOption...)"
  id: "listTableData(com.google.cloud.bigquery.TableId,com.google.cloud.bigquery.BigQuery.TableDataListOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "listTableData(TableId tableId, BigQuery.TableDataListOption[] options)"
  nameWithType: "BigQuery.listTableData(TableId tableId, BigQuery.TableDataListOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.listTableData(TableId tableId, BigQuery.TableDataListOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.listTableData*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Lists the table's rows.\n\nExample of listing table rows, specifying the page size.\n\n```java\n{\n   @code\n   String datasetName = \"my_dataset_name\";\n   String tableName = \"my_table_name\";\n   TableId tableIdObject = TableId.of(datasetName, tableName);\n   // This example reads the result 100 rows per RPC call. If there's no need\n   // to limit the number,\n   // simply omit the option.\n   TableResult tableData = bigquery.listTableData(tableIdObject, TableDataListOption.pageSize(100));\n   for (FieldValueList row : tableData.iterateAll()) {\n     // do something with the row\n   }\n }\n```"
  syntax:
    content: "public abstract TableResult listTableData(TableId tableId, BigQuery.TableDataListOption[] options)"
    parameters:
    - id: "tableId"
      type: "com.google.cloud.bigquery.TableId"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.TableDataListOption[]"
    return:
      type: "com.google.cloud.bigquery.TableResult"
- uid: "com.google.cloud.bigquery.BigQuery.listTableData(com.google.cloud.bigquery.TableId,com.google.cloud.bigquery.Schema,com.google.cloud.bigquery.BigQuery.TableDataListOption...)"
  id: "listTableData(com.google.cloud.bigquery.TableId,com.google.cloud.bigquery.Schema,com.google.cloud.bigquery.BigQuery.TableDataListOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "listTableData(TableId tableId, Schema schema, BigQuery.TableDataListOption[] options)"
  nameWithType: "BigQuery.listTableData(TableId tableId, Schema schema, BigQuery.TableDataListOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.listTableData(TableId tableId, Schema schema, BigQuery.TableDataListOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.listTableData*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Lists the table's rows. If the `schema` is not `null`, it is available to the <xref uid=\"com.google.cloud.bigquery.FieldValueList\" data-throw-if-not-resolved=\"false\">FieldValueList</xref> iterated over.\n\nExample of listing table rows with schema.\n\n```java\n{\n   @code\n   Schema schema = Schema.of(Field.of(\"word\", LegacySQLTypeName.STRING),\n       Field.of(\"word_count\", LegacySQLTypeName.STRING), Field.of(\"corpus\", LegacySQLTypeName.STRING),\n       Field.of(\"corpus_date\", LegacySQLTypeName.STRING));\n   TableResult tableData = bigquery.listTableData(TableId.of(\"bigquery-public-data\", \"samples\", \"shakespeare\"),\n       schema);\n   FieldValueList row = tableData.getValues().iterator().next();\n   System.out.println(row.get(\"word\").getStringValue());\n }\n```"
  syntax:
    content: "public abstract TableResult listTableData(TableId tableId, Schema schema, BigQuery.TableDataListOption[] options)"
    parameters:
    - id: "tableId"
      type: "com.google.cloud.bigquery.TableId"
    - id: "schema"
      type: "com.google.cloud.bigquery.Schema"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.TableDataListOption[]"
    return:
      type: "com.google.cloud.bigquery.TableResult"
- uid: "com.google.cloud.bigquery.BigQuery.listTableData(java.lang.String,java.lang.String,com.google.cloud.bigquery.BigQuery.TableDataListOption...)"
  id: "listTableData(java.lang.String,java.lang.String,com.google.cloud.bigquery.BigQuery.TableDataListOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "listTableData(String datasetId, String tableId, BigQuery.TableDataListOption[] options)"
  nameWithType: "BigQuery.listTableData(String datasetId, String tableId, BigQuery.TableDataListOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.listTableData(String datasetId, String tableId, BigQuery.TableDataListOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.listTableData*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Lists the table's rows.\n\nExample of listing table rows, specifying the page size.\n\n```java\n{\n   @code\n   String datasetName = \"my_dataset_name\";\n   String tableName = \"my_table_name\";\n   // This example reads the result 100 rows per RPC call. If there's no need\n   // to limit the number,\n   // simply omit the option.\n   TableResult tableData = bigquery.listTableData(datasetName, tableName, TableDataListOption.pageSize(100));\n   for (FieldValueList row : tableData.iterateAll()) {\n     // do something with the row\n   }\n }\n```"
  syntax:
    content: "public abstract TableResult listTableData(String datasetId, String tableId, BigQuery.TableDataListOption[] options)"
    parameters:
    - id: "datasetId"
      type: "java.lang.String"
    - id: "tableId"
      type: "java.lang.String"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.TableDataListOption[]"
    return:
      type: "com.google.cloud.bigquery.TableResult"
- uid: "com.google.cloud.bigquery.BigQuery.listTableData(java.lang.String,java.lang.String,com.google.cloud.bigquery.Schema,com.google.cloud.bigquery.BigQuery.TableDataListOption...)"
  id: "listTableData(java.lang.String,java.lang.String,com.google.cloud.bigquery.Schema,com.google.cloud.bigquery.BigQuery.TableDataListOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "listTableData(String datasetId, String tableId, Schema schema, BigQuery.TableDataListOption[] options)"
  nameWithType: "BigQuery.listTableData(String datasetId, String tableId, Schema schema, BigQuery.TableDataListOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.listTableData(String datasetId, String tableId, Schema schema, BigQuery.TableDataListOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.listTableData*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Lists the table's rows. If the `schema` is not `null`, it is available to the <xref uid=\"com.google.cloud.bigquery.FieldValueList\" data-throw-if-not-resolved=\"false\">FieldValueList</xref> iterated over.\n\nExample of listing table rows with schema.\n\n```java\nString datasetName = \"my_dataset_name\";\n String tableName = \"my_table_name\";\n Schema schema = ...;\n String field = \"field\";\n TableResult tableData = bigquery.listTableData(datasetName, tableName, schema);\n for (FieldValueList row : tableData.iterateAll()) {\n   row.get(field);\n }\n```"
  syntax:
    content: "public abstract TableResult listTableData(String datasetId, String tableId, Schema schema, BigQuery.TableDataListOption[] options)"
    parameters:
    - id: "datasetId"
      type: "java.lang.String"
    - id: "tableId"
      type: "java.lang.String"
    - id: "schema"
      type: "com.google.cloud.bigquery.Schema"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.TableDataListOption[]"
    return:
      type: "com.google.cloud.bigquery.TableResult"
- uid: "com.google.cloud.bigquery.BigQuery.listTables(com.google.cloud.bigquery.DatasetId,com.google.cloud.bigquery.BigQuery.TableListOption...)"
  id: "listTables(com.google.cloud.bigquery.DatasetId,com.google.cloud.bigquery.BigQuery.TableListOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "listTables(DatasetId datasetId, BigQuery.TableListOption[] options)"
  nameWithType: "BigQuery.listTables(DatasetId datasetId, BigQuery.TableListOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.listTables(DatasetId datasetId, BigQuery.TableListOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.listTables*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Lists the tables in the dataset. This method returns partial information on each table: (<xref uid=\"com.google.cloud.bigquery.Table.getTableId*\" data-throw-if-not-resolved=\"false\">Table#getTableId()</xref>, <xref uid=\"com.google.cloud.bigquery.Table.getFriendlyName*\" data-throw-if-not-resolved=\"false\">Table#getFriendlyName()</xref>, <xref uid=\"com.google.cloud.bigquery.Table.getGeneratedId*\" data-throw-if-not-resolved=\"false\">Table#getGeneratedId()</xref> and type, which is part of <xref uid=\"com.google.cloud.bigquery.Table.getDefinition*\" data-throw-if-not-resolved=\"false\">Table#getDefinition()</xref>). To get complete information use either <xref uid=\"com.google.cloud.bigquery.BigQuery.getTable*\" data-throw-if-not-resolved=\"false\">#getTable(TableId, TableOption...)</xref> or <xref uid=\"com.google.cloud.bigquery.BigQuery.getTable*\" data-throw-if-not-resolved=\"false\">#getTable(String, String, TableOption...)</xref>.\n\nExample of listing the tables in a dataset.\n\n```java\n{\n   @code\n   String projectId = \"my_project_id\";\n   String datasetName = \"my_dataset_name\";\n   DatasetId datasetId = DatasetId.of(projectId, datasetName);\n   Page  tables = bigquery.listTables(datasetId, TableListOption.pageSize(100));\n   for (Table table : tables.iterateAll()) {\n     // do something with the table\n   }\n }\n```"
  syntax:
    content: "public abstract Page<Table> listTables(DatasetId datasetId, BigQuery.TableListOption[] options)"
    parameters:
    - id: "datasetId"
      type: "com.google.cloud.bigquery.DatasetId"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.TableListOption[]"
    return:
      type: "com.google.api.gax.paging.Page<com.google.cloud.bigquery.Table>"
- uid: "com.google.cloud.bigquery.BigQuery.listTables(java.lang.String,com.google.cloud.bigquery.BigQuery.TableListOption...)"
  id: "listTables(java.lang.String,com.google.cloud.bigquery.BigQuery.TableListOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "listTables(String datasetId, BigQuery.TableListOption[] options)"
  nameWithType: "BigQuery.listTables(String datasetId, BigQuery.TableListOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.listTables(String datasetId, BigQuery.TableListOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.listTables*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Lists the tables in the dataset. This method returns partial information on each table: (<xref uid=\"com.google.cloud.bigquery.Table.getTableId*\" data-throw-if-not-resolved=\"false\">Table#getTableId()</xref>, <xref uid=\"com.google.cloud.bigquery.Table.getFriendlyName*\" data-throw-if-not-resolved=\"false\">Table#getFriendlyName()</xref>, <xref uid=\"com.google.cloud.bigquery.Table.getGeneratedId*\" data-throw-if-not-resolved=\"false\">Table#getGeneratedId()</xref> and type, which is part of <xref uid=\"com.google.cloud.bigquery.Table.getDefinition*\" data-throw-if-not-resolved=\"false\">Table#getDefinition()</xref>). To get complete information use either <xref uid=\"com.google.cloud.bigquery.BigQuery.getTable*\" data-throw-if-not-resolved=\"false\">#getTable(TableId, TableOption...)</xref> or <xref uid=\"com.google.cloud.bigquery.BigQuery.getTable*\" data-throw-if-not-resolved=\"false\">#getTable(String, String, TableOption...)</xref>.\n\nExample of listing the tables in a dataset, specifying the page size.\n\n```java\n{\n   @code\n   String datasetName = \"my_dataset_name\";\n   Page  tables = bigquery.listTables(datasetName, TableListOption.pageSize(100));\n   for (Table table : tables.iterateAll()) {\n     // do something with the table\n   }\n }\n```"
  syntax:
    content: "public abstract Page<Table> listTables(String datasetId, BigQuery.TableListOption[] options)"
    parameters:
    - id: "datasetId"
      type: "java.lang.String"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.TableListOption[]"
    return:
      type: "com.google.api.gax.paging.Page<com.google.cloud.bigquery.Table>"
- uid: "com.google.cloud.bigquery.BigQuery.query(com.google.cloud.bigquery.QueryJobConfiguration,com.google.cloud.bigquery.BigQuery.JobOption...)"
  id: "query(com.google.cloud.bigquery.QueryJobConfiguration,com.google.cloud.bigquery.BigQuery.JobOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "query(QueryJobConfiguration configuration, BigQuery.JobOption[] options)"
  nameWithType: "BigQuery.query(QueryJobConfiguration configuration, BigQuery.JobOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.query(QueryJobConfiguration configuration, BigQuery.JobOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.query*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Runs the query associated with the request, using an internally-generated random JobId.\n\nIf the location of the job is not \"US\" or \"EU\", <xref uid=\"#query(QueryJobConfiguration, JobId,\n JobOption...)\" data-throw-if-not-resolved=\"false\">#query(QueryJobConfiguration, JobId,\n JobOption...)</xref> must be used instead.\n\nThis method cannot be used in conjuction with <xref uid=\"com.google.cloud.bigquery.QueryJobConfiguration.dryRun()\" data-throw-if-not-resolved=\"false\">QueryJobConfiguration#dryRun()</xref> queries. Since dry-run queries are not actually executed, there's no way to retrieve results.\n\nExample of running a query.\n\n```java\n{\n   @code\n   // BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n   String query = \"SELECT corpus FROM `bigquery-public-data.samples.shakespeare` GROUP BY corpus;\";\n   QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query).build();\n\n   // Print the results.\n   for (FieldValueList row : bigquery.query(queryConfig).iterateAll()) {\n     for (FieldValue val : row) {\n       System.out.printf(\"%s,\", val.toString());\n     }\n     System.out.printf(\"\\n\");\n   }\n }\n```"
  syntax:
    content: "public abstract TableResult query(QueryJobConfiguration configuration, BigQuery.JobOption[] options)"
    parameters:
    - id: "configuration"
      type: "com.google.cloud.bigquery.QueryJobConfiguration"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.JobOption[]"
    return:
      type: "com.google.cloud.bigquery.TableResult"
  exceptions:
  - type: "java.lang.InterruptedException"
    description: "upon failure"
  - type: "com.google.cloud.bigquery.JobException"
    description: "upon failure"
- uid: "com.google.cloud.bigquery.BigQuery.query(com.google.cloud.bigquery.QueryJobConfiguration,com.google.cloud.bigquery.JobId,com.google.cloud.bigquery.BigQuery.JobOption...)"
  id: "query(com.google.cloud.bigquery.QueryJobConfiguration,com.google.cloud.bigquery.JobId,com.google.cloud.bigquery.BigQuery.JobOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "query(QueryJobConfiguration configuration, JobId jobId, BigQuery.JobOption[] options)"
  nameWithType: "BigQuery.query(QueryJobConfiguration configuration, JobId jobId, BigQuery.JobOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.query(QueryJobConfiguration configuration, JobId jobId, BigQuery.JobOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.query*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Runs the query associated with the request, using the given JobId.\n\nIf the location of the job is not \"US\" or \"EU\", the `jobId` must specify the job location.\n\nThis method cannot be used in conjuction with <xref uid=\"com.google.cloud.bigquery.QueryJobConfiguration.dryRun()\" data-throw-if-not-resolved=\"false\">QueryJobConfiguration#dryRun()</xref> queries. Since dry-run queries are not actually executed, there's no way to retrieve results.\n\nSee <xref uid=\"com.google.cloud.bigquery.BigQuery.query*\" data-throw-if-not-resolved=\"false\">#query(QueryJobConfiguration, JobOption...)</xref> for examples on populating a <xref uid=\"com.google.cloud.bigquery.QueryJobConfiguration\" data-throw-if-not-resolved=\"false\">QueryJobConfiguration</xref>."
  syntax:
    content: "public abstract TableResult query(QueryJobConfiguration configuration, JobId jobId, BigQuery.JobOption[] options)"
    parameters:
    - id: "configuration"
      type: "com.google.cloud.bigquery.QueryJobConfiguration"
    - id: "jobId"
      type: "com.google.cloud.bigquery.JobId"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.JobOption[]"
    return:
      type: "com.google.cloud.bigquery.TableResult"
  exceptions:
  - type: "java.lang.InterruptedException"
    description: "upon failure"
  - type: "com.google.cloud.bigquery.JobException"
    description: "upon failure"
- uid: "com.google.cloud.bigquery.BigQuery.setIamPolicy(com.google.cloud.bigquery.TableId,com.google.cloud.Policy,com.google.cloud.bigquery.BigQuery.IAMOption...)"
  id: "setIamPolicy(com.google.cloud.bigquery.TableId,com.google.cloud.Policy,com.google.cloud.bigquery.BigQuery.IAMOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "setIamPolicy(TableId tableId, Policy policy, BigQuery.IAMOption[] options)"
  nameWithType: "BigQuery.setIamPolicy(TableId tableId, Policy policy, BigQuery.IAMOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.setIamPolicy(TableId tableId, Policy policy, BigQuery.IAMOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.setIamPolicy*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the IAM policy for a specified table."
  syntax:
    content: "public abstract Policy setIamPolicy(TableId tableId, Policy policy, BigQuery.IAMOption[] options)"
    parameters:
    - id: "tableId"
      type: "com.google.cloud.bigquery.TableId"
    - id: "policy"
      type: "com.google.cloud.Policy"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.IAMOption[]"
    return:
      type: "com.google.cloud.Policy"
- uid: "com.google.cloud.bigquery.BigQuery.testIamPermissions(com.google.cloud.bigquery.TableId,java.util.List<java.lang.String>,com.google.cloud.bigquery.BigQuery.IAMOption...)"
  id: "testIamPermissions(com.google.cloud.bigquery.TableId,java.util.List<java.lang.String>,com.google.cloud.bigquery.BigQuery.IAMOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "testIamPermissions(TableId table, List<String> permissions, BigQuery.IAMOption[] options)"
  nameWithType: "BigQuery.testIamPermissions(TableId table, List<String> permissions, BigQuery.IAMOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.testIamPermissions(TableId table, List<String> permissions, BigQuery.IAMOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.testIamPermissions*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Tests whether the caller holds specific permissions on a BigQuery table. The returned list represents the subset of granted permissions."
  syntax:
    content: "public abstract List<String> testIamPermissions(TableId table, List<String> permissions, BigQuery.IAMOption[] options)"
    parameters:
    - id: "table"
      type: "com.google.cloud.bigquery.TableId"
    - id: "permissions"
      type: "java.util.List<java.lang.String>"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.IAMOption[]"
    return:
      type: "java.util.List<java.lang.String>"
- uid: "com.google.cloud.bigquery.BigQuery.update(com.google.cloud.bigquery.DatasetInfo,com.google.cloud.bigquery.BigQuery.DatasetOption...)"
  id: "update(com.google.cloud.bigquery.DatasetInfo,com.google.cloud.bigquery.BigQuery.DatasetOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "update(DatasetInfo datasetInfo, BigQuery.DatasetOption[] options)"
  nameWithType: "BigQuery.update(DatasetInfo datasetInfo, BigQuery.DatasetOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.update(DatasetInfo datasetInfo, BigQuery.DatasetOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.update*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Updates dataset information.\n\nExample of updating a dataset by changing its description.\n\n```java\n{\n   @code\n   // String datasetName = \"my_dataset_name\";\n   // String tableName = \"my_table_name\";\n   // String newDescription = \"new_description\";\n\n   Table beforeTable = bigquery.getTable(datasetName, tableName);\n   TableInfo tableInfo = beforeTable.toBuilder().setDescription(newDescription).build();\n   Table afterTable = bigquery.update(tableInfo);\n\n }\n```"
  syntax:
    content: "public abstract Dataset update(DatasetInfo datasetInfo, BigQuery.DatasetOption[] options)"
    parameters:
    - id: "datasetInfo"
      type: "com.google.cloud.bigquery.DatasetInfo"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.DatasetOption[]"
    return:
      type: "com.google.cloud.bigquery.Dataset"
- uid: "com.google.cloud.bigquery.BigQuery.update(com.google.cloud.bigquery.ModelInfo,com.google.cloud.bigquery.BigQuery.ModelOption...)"
  id: "update(com.google.cloud.bigquery.ModelInfo,com.google.cloud.bigquery.BigQuery.ModelOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "update(ModelInfo modelInfo, BigQuery.ModelOption[] options)"
  nameWithType: "BigQuery.update(ModelInfo modelInfo, BigQuery.ModelOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.update(ModelInfo modelInfo, BigQuery.ModelOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.update*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Updates model information.\n\nExample of updating a model by changing its description.\n\n```java\n{\n   @code\n   String datasetName = \"my_dataset_name\";\n   String modelName = \"my_model_name\";\n   String newDescription = \"new_description\";\n   Model beforeModel = bigquery.getModel(datasetName, modelName);\n   ModelInfo modelInfo = beforeModel.toBuilder().setDescription(newDescription).build();\n   Model afterModel = bigquery.update(modelInfo);\n }\n```\n\nExample of updating a model by changing its expiration.\n\n```java\n{\n   @code\n   String datasetName = \"my_dataset_name\";\n   String modelName = \"my_model_name\";\n   Model beforeModel = bigquery.getModel(datasetName, modelName);\n\n   // Set model to expire 5 days from now.\n   long expirationMillis = DateTime.now().plusDays(5).getMillis();\n   ModelInfo modelInfo = beforeModel.toBuilder().setExpirationTime(expirationMillis).build();\n   Model afterModel = bigquery.update(modelInfo);\n }\n```"
  syntax:
    content: "public abstract Model update(ModelInfo modelInfo, BigQuery.ModelOption[] options)"
    parameters:
    - id: "modelInfo"
      type: "com.google.cloud.bigquery.ModelInfo"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.ModelOption[]"
    return:
      type: "com.google.cloud.bigquery.Model"
- uid: "com.google.cloud.bigquery.BigQuery.update(com.google.cloud.bigquery.RoutineInfo,com.google.cloud.bigquery.BigQuery.RoutineOption...)"
  id: "update(com.google.cloud.bigquery.RoutineInfo,com.google.cloud.bigquery.BigQuery.RoutineOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "update(RoutineInfo routineInfo, BigQuery.RoutineOption[] options)"
  nameWithType: "BigQuery.update(RoutineInfo routineInfo, BigQuery.RoutineOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.update(RoutineInfo routineInfo, BigQuery.RoutineOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.update*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Updates routine information."
  syntax:
    content: "public abstract Routine update(RoutineInfo routineInfo, BigQuery.RoutineOption[] options)"
    parameters:
    - id: "routineInfo"
      type: "com.google.cloud.bigquery.RoutineInfo"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.RoutineOption[]"
    return:
      type: "com.google.cloud.bigquery.Routine"
- uid: "com.google.cloud.bigquery.BigQuery.update(com.google.cloud.bigquery.TableInfo,com.google.cloud.bigquery.BigQuery.TableOption...)"
  id: "update(com.google.cloud.bigquery.TableInfo,com.google.cloud.bigquery.BigQuery.TableOption...)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "update(TableInfo tableInfo, BigQuery.TableOption[] options)"
  nameWithType: "BigQuery.update(TableInfo tableInfo, BigQuery.TableOption[] options)"
  fullName: "com.google.cloud.bigquery.BigQuery.update(TableInfo tableInfo, BigQuery.TableOption[] options)"
  overload: "com.google.cloud.bigquery.BigQuery.update*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Updates table information.\n\nExample of updating a table by changing its description.\n\n```java\n{\n   @code\n   String datasetName = \"my_dataset_name\";\n   String tableName = \"my_table_name\";\n   String newDescription = \"new_description\";\n   Table beforeTable = bigquery.getTable(datasetName, tableName);\n   TableInfo tableInfo = beforeTable.toBuilder().setDescription(newDescription).build();\n   Table afterTable = bigquery.update(tableInfo);\n }\n```\n\nExample of updating a table by changing its expiration.\n\n```java\n{\n   @code\n   String datasetName = \"my_dataset_name\";\n   String tableName = \"my_table_name\";\n   Table beforeTable = bigquery.getTable(datasetName, tableName);\n\n   // Set table to expire 5 days from now.\n   long expirationMillis = DateTime.now().plusDays(5).getMillis();\n   TableInfo tableInfo = beforeTable.toBuilder().setExpirationTime(expirationMillis).build();\n   Table afterTable = bigquery.update(tableInfo);\n }\n```"
  syntax:
    content: "public abstract Table update(TableInfo tableInfo, BigQuery.TableOption[] options)"
    parameters:
    - id: "tableInfo"
      type: "com.google.cloud.bigquery.TableInfo"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.TableOption[]"
    return:
      type: "com.google.cloud.bigquery.Table"
- uid: "com.google.cloud.bigquery.BigQuery.writer(com.google.cloud.bigquery.JobId,com.google.cloud.bigquery.WriteChannelConfiguration)"
  id: "writer(com.google.cloud.bigquery.JobId,com.google.cloud.bigquery.WriteChannelConfiguration)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "writer(JobId jobId, WriteChannelConfiguration writeChannelConfiguration)"
  nameWithType: "BigQuery.writer(JobId jobId, WriteChannelConfiguration writeChannelConfiguration)"
  fullName: "com.google.cloud.bigquery.BigQuery.writer(JobId jobId, WriteChannelConfiguration writeChannelConfiguration)"
  overload: "com.google.cloud.bigquery.BigQuery.writer*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a channel to write data to be inserted into a BigQuery table. Data format and other options can be configured using the <xref uid=\"com.google.cloud.bigquery.WriteChannelConfiguration\" data-throw-if-not-resolved=\"false\">WriteChannelConfiguration</xref> parameter. If the job is not in \"US\" or \"EU\", the `jobId` must contain the location of the job.\n\nExample of creating a channel with which to write to a table.\n\n```java\n{\n   @code\n   String datasetName = \"my_dataset_name\";\n   String tableName = \"my_table_name\";\n   String csvData = \"StringValue1\\nStringValue2\\n\";\n   String location = \"us\";\n   TableId tableId = TableId.of(datasetName, tableName);\n   WriteChannelConfiguration writeChannelConfiguration = WriteChannelConfiguration.newBuilder(tableId)\n       .setFormatOptions(FormatOptions.csv()).build();\n   // The location must be specified; other fields can be auto-detected.\n   JobId jobId = JobId.newBuilder().setLocation(location).build();\n   TableDataWriteChannel writer = bigquery.writer(jobId, writeChannelConfiguration);\n   // Write data to writer\n   try {\n     writer.write(ByteBuffer.wrap(csvData.getBytes(Charsets.UTF_8)));\n   } finally {\n     writer.close();\n   }\n   // Get load job\n   Job job = writer.getJob();\n   job = job.waitFor();\n   LoadStatistics stats = job.getStatistics();\n   return stats.getOutputRows();\n }\n```"
  syntax:
    content: "public abstract TableDataWriteChannel writer(JobId jobId, WriteChannelConfiguration writeChannelConfiguration)"
    parameters:
    - id: "jobId"
      type: "com.google.cloud.bigquery.JobId"
    - id: "writeChannelConfiguration"
      type: "com.google.cloud.bigquery.WriteChannelConfiguration"
    return:
      type: "com.google.cloud.bigquery.TableDataWriteChannel"
- uid: "com.google.cloud.bigquery.BigQuery.writer(com.google.cloud.bigquery.WriteChannelConfiguration)"
  id: "writer(com.google.cloud.bigquery.WriteChannelConfiguration)"
  parent: "com.google.cloud.bigquery.BigQuery"
  langs:
  - "java"
  name: "writer(WriteChannelConfiguration writeChannelConfiguration)"
  nameWithType: "BigQuery.writer(WriteChannelConfiguration writeChannelConfiguration)"
  fullName: "com.google.cloud.bigquery.BigQuery.writer(WriteChannelConfiguration writeChannelConfiguration)"
  overload: "com.google.cloud.bigquery.BigQuery.writer*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a channel to write data to be inserted into a BigQuery table. Data format and other options can be configured using the <xref uid=\"com.google.cloud.bigquery.WriteChannelConfiguration\" data-throw-if-not-resolved=\"false\">WriteChannelConfiguration</xref> parameter. If the job is not in \"US\" or \"EU\", <xref uid=\"com.google.cloud.bigquery.BigQuery.writer(com.google.cloud.bigquery.JobId,com.google.cloud.bigquery.WriteChannelConfiguration)\" data-throw-if-not-resolved=\"false\">#writer(JobId, WriteChannelConfiguration)</xref> must be used instead.\n\nExample of creating a channel with which to write to a table.\n\n```java\n{\n   @code\n   String datasetName = \"my_dataset_name\";\n   String tableName = \"my_table_name\";\n   String csvData = \"StringValue1\\nStringValue2\\n\";\n   TableId tableId = TableId.of(datasetName, tableName);\n   WriteChannelConfiguration writeChannelConfiguration = WriteChannelConfiguration.newBuilder(tableId)\n       .setFormatOptions(FormatOptions.csv()).build();\n   TableDataWriteChannel writer = bigquery.writer(writeChannelConfiguration);\n   // Write data to writer\n   try {\n     writer.write(ByteBuffer.wrap(csvData.getBytes(Charsets.UTF_8)));\n   } finally {\n     writer.close();\n   }\n   // Get load job\n   Job job = writer.getJob();\n   job = job.waitFor();\n   LoadStatistics stats = job.getStatistics();\n   return stats.getOutputRows();\n }\n```\n\nExample of writing a local file to a table.\n\n```java\n{\n   @code\n   String datasetName = \"my_dataset_name\";\n   String tableName = \"my_table_name\";\n   Path csvPath = FileSystems.getDefault().getPath(\".\", \"my-data.csv\");\n   String location = \"us\";\n   TableId tableId = TableId.of(datasetName, tableName);\n   WriteChannelConfiguration writeChannelConfiguration = WriteChannelConfiguration.newBuilder(tableId)\n       .setFormatOptions(FormatOptions.csv()).build();\n   // The location must be specified; other fields can be auto-detected.\n   JobId jobId = JobId.newBuilder().setLocation(location).build();\n   TableDataWriteChannel writer = bigquery.writer(jobId, writeChannelConfiguration);\n   // Write data to writer\n   try (OutputStream stream = Channels.newOutputStream(writer)) {\n     Files.copy(csvPath, stream);\n   }\n   // Get load job\n   Job job = writer.getJob();\n   job = job.waitFor();\n   LoadStatistics stats = job.getStatistics();\n   return stats.getOutputRows();\n }\n```"
  syntax:
    content: "public abstract TableDataWriteChannel writer(WriteChannelConfiguration writeChannelConfiguration)"
    parameters:
    - id: "writeChannelConfiguration"
      type: "com.google.cloud.bigquery.WriteChannelConfiguration"
    return:
      type: "com.google.cloud.bigquery.TableDataWriteChannel"
references:
- uid: "com.google.cloud.bigquery.DatasetInfo"
  name: "DatasetInfo"
  nameWithType: "DatasetInfo"
  fullName: "com.google.cloud.bigquery.DatasetInfo"
- uid: "com.google.cloud.bigquery.BigQuery.DatasetOption[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.BigQuery.DatasetOption"
    name: "DatasetOption"
    fullName: "com.google.cloud.bigquery.BigQuery.DatasetOption"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.cloud.bigquery.Dataset"
  name: "Dataset"
  nameWithType: "Dataset"
  fullName: "com.google.cloud.bigquery.Dataset"
- uid: "com.google.cloud.bigquery.BigQuery.create*"
  name: "create"
  nameWithType: "BigQuery.create"
  fullName: "com.google.cloud.bigquery.BigQuery.create"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TableInfo"
  name: "TableInfo"
  nameWithType: "TableInfo"
  fullName: "com.google.cloud.bigquery.TableInfo"
- uid: "com.google.cloud.bigquery.BigQuery.TableOption[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.BigQuery.TableOption"
    name: "TableOption"
    fullName: "com.google.cloud.bigquery.BigQuery.TableOption"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.cloud.bigquery.Table"
  name: "Table"
  nameWithType: "Table"
  fullName: "com.google.cloud.bigquery.Table"
- uid: "com.google.cloud.bigquery.RoutineInfo"
  name: "RoutineInfo"
  nameWithType: "RoutineInfo"
  fullName: "com.google.cloud.bigquery.RoutineInfo"
- uid: "com.google.cloud.bigquery.BigQuery.RoutineOption[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.BigQuery.RoutineOption"
    name: "RoutineOption"
    fullName: "com.google.cloud.bigquery.BigQuery.RoutineOption"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.cloud.bigquery.Routine"
  name: "Routine"
  nameWithType: "Routine"
  fullName: "com.google.cloud.bigquery.Routine"
- uid: "com.google.cloud.bigquery.JobInfo"
  name: "JobInfo"
  nameWithType: "JobInfo"
  fullName: "com.google.cloud.bigquery.JobInfo"
- uid: "com.google.cloud.bigquery.BigQuery.JobOption[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.BigQuery.JobOption"
    name: "JobOption"
    fullName: "com.google.cloud.bigquery.BigQuery.JobOption"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.cloud.bigquery.Job"
  name: "Job"
  nameWithType: "Job"
  fullName: "com.google.cloud.bigquery.Job"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.BigQuery.getDataset*"
  name: "getDataset"
  nameWithType: "BigQuery.getDataset"
  fullName: "com.google.cloud.bigquery.BigQuery.getDataset"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.DatasetId"
  name: "DatasetId"
  nameWithType: "DatasetId"
  fullName: "com.google.cloud.bigquery.DatasetId"
- uid: "com.google.cloud.bigquery.BigQuery.DatasetListOption[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.BigQuery.DatasetListOption"
    name: "DatasetListOption"
    fullName: "com.google.cloud.bigquery.BigQuery.DatasetListOption"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.api.gax.paging.Page<com.google.cloud.bigquery.Dataset>"
  spec.java:
  - uid: "com.google.api.gax.paging.Page"
    name: "Page"
    fullName: "com.google.api.gax.paging.Page"
  - name: "<"
    fullName: "<"
  - uid: "com.google.cloud.bigquery.Dataset"
    name: "Dataset"
    fullName: "com.google.cloud.bigquery.Dataset"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.BigQuery.listDatasets*"
  name: "listDatasets"
  nameWithType: "BigQuery.listDatasets"
  fullName: "com.google.cloud.bigquery.BigQuery.listDatasets"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.BigQuery.DatasetDeleteOption[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.BigQuery.DatasetDeleteOption"
    name: "DatasetDeleteOption"
    fullName: "com.google.cloud.bigquery.BigQuery.DatasetDeleteOption"
  - name: "[]"
    fullName: "[]"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.google.cloud.bigquery.BigQuery.delete*"
  name: "delete"
  nameWithType: "BigQuery.delete"
  fullName: "com.google.cloud.bigquery.BigQuery.delete"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TableId"
  name: "TableId"
  nameWithType: "TableId"
  fullName: "com.google.cloud.bigquery.TableId"
- uid: "com.google.cloud.bigquery.ModelId"
  name: "ModelId"
  nameWithType: "ModelId"
  fullName: "com.google.cloud.bigquery.ModelId"
- uid: "com.google.cloud.bigquery.RoutineId"
  name: "RoutineId"
  nameWithType: "RoutineId"
  fullName: "com.google.cloud.bigquery.RoutineId"
- uid: "com.google.cloud.bigquery.BigQuery.update*"
  name: "update"
  nameWithType: "BigQuery.update"
  fullName: "com.google.cloud.bigquery.BigQuery.update"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.ModelInfo"
  name: "ModelInfo"
  nameWithType: "ModelInfo"
  fullName: "com.google.cloud.bigquery.ModelInfo"
- uid: "com.google.cloud.bigquery.BigQuery.ModelOption[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.BigQuery.ModelOption"
    name: "ModelOption"
    fullName: "com.google.cloud.bigquery.BigQuery.ModelOption"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.cloud.bigquery.Model"
  name: "Model"
  nameWithType: "Model"
  fullName: "com.google.cloud.bigquery.Model"
- uid: "com.google.cloud.bigquery.BigQuery.getTable*"
  name: "getTable"
  nameWithType: "BigQuery.getTable"
  fullName: "com.google.cloud.bigquery.BigQuery.getTable"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.BigQuery.getModel*"
  name: "getModel"
  nameWithType: "BigQuery.getModel"
  fullName: "com.google.cloud.bigquery.BigQuery.getModel"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.BigQuery.getRoutine*"
  name: "getRoutine"
  nameWithType: "BigQuery.getRoutine"
  fullName: "com.google.cloud.bigquery.BigQuery.getRoutine"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.BigQuery.RoutineListOption[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.BigQuery.RoutineListOption"
    name: "RoutineListOption"
    fullName: "com.google.cloud.bigquery.BigQuery.RoutineListOption"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.api.gax.paging.Page<com.google.cloud.bigquery.Routine>"
  spec.java:
  - uid: "com.google.api.gax.paging.Page"
    name: "Page"
    fullName: "com.google.api.gax.paging.Page"
  - name: "<"
    fullName: "<"
  - uid: "com.google.cloud.bigquery.Routine"
    name: "Routine"
    fullName: "com.google.cloud.bigquery.Routine"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.BigQuery.listRoutines*"
  name: "listRoutines"
  nameWithType: "BigQuery.listRoutines"
  fullName: "com.google.cloud.bigquery.BigQuery.listRoutines"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.BigQuery.TableListOption[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.BigQuery.TableListOption"
    name: "TableListOption"
    fullName: "com.google.cloud.bigquery.BigQuery.TableListOption"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.api.gax.paging.Page<com.google.cloud.bigquery.Table>"
  spec.java:
  - uid: "com.google.api.gax.paging.Page"
    name: "Page"
    fullName: "com.google.api.gax.paging.Page"
  - name: "<"
    fullName: "<"
  - uid: "com.google.cloud.bigquery.Table"
    name: "Table"
    fullName: "com.google.cloud.bigquery.Table"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.BigQuery.listTables*"
  name: "listTables"
  nameWithType: "BigQuery.listTables"
  fullName: "com.google.cloud.bigquery.BigQuery.listTables"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.BigQuery.ModelListOption[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.BigQuery.ModelListOption"
    name: "ModelListOption"
    fullName: "com.google.cloud.bigquery.BigQuery.ModelListOption"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.api.gax.paging.Page<com.google.cloud.bigquery.Model>"
  spec.java:
  - uid: "com.google.api.gax.paging.Page"
    name: "Page"
    fullName: "com.google.api.gax.paging.Page"
  - name: "<"
    fullName: "<"
  - uid: "com.google.cloud.bigquery.Model"
    name: "Model"
    fullName: "com.google.cloud.bigquery.Model"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.BigQuery.listModels*"
  name: "listModels"
  nameWithType: "BigQuery.listModels"
  fullName: "com.google.cloud.bigquery.BigQuery.listModels"
  package: "com.google.cloud.bigquery"
- uid: "java.util.List<java.lang.String>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.BigQuery.listPartitions*"
  name: "listPartitions"
  nameWithType: "BigQuery.listPartitions"
  fullName: "com.google.cloud.bigquery.BigQuery.listPartitions"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.InsertAllRequest"
  name: "InsertAllRequest"
  nameWithType: "InsertAllRequest"
  fullName: "com.google.cloud.bigquery.InsertAllRequest"
- uid: "com.google.cloud.bigquery.InsertAllResponse"
  name: "InsertAllResponse"
  nameWithType: "InsertAllResponse"
  fullName: "com.google.cloud.bigquery.InsertAllResponse"
- uid: "com.google.cloud.bigquery.BigQuery.insertAll*"
  name: "insertAll"
  nameWithType: "BigQuery.insertAll"
  fullName: "com.google.cloud.bigquery.BigQuery.insertAll"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.BigQuery.TableDataListOption[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.BigQuery.TableDataListOption"
    name: "TableDataListOption"
    fullName: "com.google.cloud.bigquery.BigQuery.TableDataListOption"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.cloud.bigquery.TableResult"
  name: "TableResult"
  nameWithType: "TableResult"
  fullName: "com.google.cloud.bigquery.TableResult"
- uid: "com.google.cloud.bigquery.BigQuery.listTableData*"
  name: "listTableData"
  nameWithType: "BigQuery.listTableData"
  fullName: "com.google.cloud.bigquery.BigQuery.listTableData"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Schema"
  name: "Schema"
  nameWithType: "Schema"
  fullName: "com.google.cloud.bigquery.Schema"
- uid: "com.google.cloud.bigquery.BigQuery.getJob*"
  name: "getJob"
  nameWithType: "BigQuery.getJob"
  fullName: "com.google.cloud.bigquery.BigQuery.getJob"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.JobId"
  name: "JobId"
  nameWithType: "JobId"
  fullName: "com.google.cloud.bigquery.JobId"
- uid: "com.google.cloud.bigquery.BigQuery.JobListOption[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.BigQuery.JobListOption"
    name: "JobListOption"
    fullName: "com.google.cloud.bigquery.BigQuery.JobListOption"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.api.gax.paging.Page<com.google.cloud.bigquery.Job>"
  spec.java:
  - uid: "com.google.api.gax.paging.Page"
    name: "Page"
    fullName: "com.google.api.gax.paging.Page"
  - name: "<"
    fullName: "<"
  - uid: "com.google.cloud.bigquery.Job"
    name: "Job"
    fullName: "com.google.cloud.bigquery.Job"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.BigQuery.listJobs*"
  name: "listJobs"
  nameWithType: "BigQuery.listJobs"
  fullName: "com.google.cloud.bigquery.BigQuery.listJobs"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.BigQuery.cancel*"
  name: "cancel"
  nameWithType: "BigQuery.cancel"
  fullName: "com.google.cloud.bigquery.BigQuery.cancel"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.InterruptedException"
  spec.java:
  - uid: "java.lang.InterruptedException"
    name: "InterruptedException"
    fullName: "java.lang.InterruptedException"
- uid: "com.google.cloud.bigquery.JobException"
  name: "JobException"
  nameWithType: "JobException"
  fullName: "com.google.cloud.bigquery.JobException"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration"
  name: "QueryJobConfiguration"
  nameWithType: "QueryJobConfiguration"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration"
- uid: "com.google.cloud.bigquery.BigQuery.query*"
  name: "query"
  nameWithType: "BigQuery.query"
  fullName: "com.google.cloud.bigquery.BigQuery.query"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.BigQuery.QueryResultsOption[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.BigQuery.QueryResultsOption"
    name: "QueryResultsOption"
    fullName: "com.google.cloud.bigquery.BigQuery.QueryResultsOption"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.cloud.bigquery.QueryResponse"
  name: "QueryResponse"
  nameWithType: "QueryResponse"
  fullName: "com.google.cloud.bigquery.QueryResponse"
- uid: "com.google.cloud.bigquery.BigQuery.getQueryResults*"
  name: "getQueryResults"
  nameWithType: "BigQuery.getQueryResults"
  fullName: "com.google.cloud.bigquery.BigQuery.getQueryResults"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.WriteChannelConfiguration"
  name: "WriteChannelConfiguration"
  nameWithType: "WriteChannelConfiguration"
  fullName: "com.google.cloud.bigquery.WriteChannelConfiguration"
- uid: "com.google.cloud.bigquery.TableDataWriteChannel"
  name: "TableDataWriteChannel"
  nameWithType: "TableDataWriteChannel"
  fullName: "com.google.cloud.bigquery.TableDataWriteChannel"
- uid: "com.google.cloud.bigquery.BigQuery.writer*"
  name: "writer"
  nameWithType: "BigQuery.writer"
  fullName: "com.google.cloud.bigquery.BigQuery.writer"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.BigQuery.IAMOption[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.BigQuery.IAMOption"
    name: "IAMOption"
    fullName: "com.google.cloud.bigquery.BigQuery.IAMOption"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.cloud.Policy"
  spec.java:
  - uid: "com.google.cloud.Policy"
    name: "Policy"
    fullName: "com.google.cloud.Policy"
- uid: "com.google.cloud.bigquery.BigQuery.getIamPolicy*"
  name: "getIamPolicy"
  nameWithType: "BigQuery.getIamPolicy"
  fullName: "com.google.cloud.bigquery.BigQuery.getIamPolicy"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.BigQuery.setIamPolicy*"
  name: "setIamPolicy"
  nameWithType: "BigQuery.setIamPolicy"
  fullName: "com.google.cloud.bigquery.BigQuery.setIamPolicy"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.BigQuery.testIamPermissions*"
  name: "testIamPermissions"
  nameWithType: "BigQuery.testIamPermissions"
  fullName: "com.google.cloud.bigquery.BigQuery.testIamPermissions"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.Service<com.google.cloud.bigquery.BigQueryOptions>"
  name: "Service<BigQueryOptions>"
  nameWithType: "Service<BigQueryOptions>"
  fullName: "com.google.cloud.Service<com.google.cloud.bigquery.BigQueryOptions>"
- uid: "com.google.cloud.bigquery.BigQuery.DatasetDeleteOption"
  name: "BigQuery.DatasetDeleteOption"
  nameWithType: "BigQuery.DatasetDeleteOption"
  fullName: "com.google.cloud.bigquery.BigQuery.DatasetDeleteOption"
- uid: "com.google.cloud.bigquery.BigQuery.DatasetField"
  name: "BigQuery.DatasetField"
  nameWithType: "BigQuery.DatasetField"
  fullName: "com.google.cloud.bigquery.BigQuery.DatasetField"
- uid: "com.google.cloud.bigquery.BigQuery.DatasetListOption"
  name: "BigQuery.DatasetListOption"
  nameWithType: "BigQuery.DatasetListOption"
  fullName: "com.google.cloud.bigquery.BigQuery.DatasetListOption"
- uid: "com.google.cloud.bigquery.BigQuery.DatasetOption"
  name: "BigQuery.DatasetOption"
  nameWithType: "BigQuery.DatasetOption"
  fullName: "com.google.cloud.bigquery.BigQuery.DatasetOption"
- uid: "com.google.cloud.bigquery.BigQuery.IAMOption"
  name: "BigQuery.IAMOption"
  nameWithType: "BigQuery.IAMOption"
  fullName: "com.google.cloud.bigquery.BigQuery.IAMOption"
- uid: "com.google.cloud.bigquery.BigQuery.JobField"
  name: "BigQuery.JobField"
  nameWithType: "BigQuery.JobField"
  fullName: "com.google.cloud.bigquery.BigQuery.JobField"
- uid: "com.google.cloud.bigquery.BigQuery.JobListOption"
  name: "BigQuery.JobListOption"
  nameWithType: "BigQuery.JobListOption"
  fullName: "com.google.cloud.bigquery.BigQuery.JobListOption"
- uid: "com.google.cloud.bigquery.BigQuery.JobOption"
  name: "BigQuery.JobOption"
  nameWithType: "BigQuery.JobOption"
  fullName: "com.google.cloud.bigquery.BigQuery.JobOption"
- uid: "com.google.cloud.bigquery.BigQuery.ModelField"
  name: "BigQuery.ModelField"
  nameWithType: "BigQuery.ModelField"
  fullName: "com.google.cloud.bigquery.BigQuery.ModelField"
- uid: "com.google.cloud.bigquery.BigQuery.ModelListOption"
  name: "BigQuery.ModelListOption"
  nameWithType: "BigQuery.ModelListOption"
  fullName: "com.google.cloud.bigquery.BigQuery.ModelListOption"
- uid: "com.google.cloud.bigquery.BigQuery.ModelOption"
  name: "BigQuery.ModelOption"
  nameWithType: "BigQuery.ModelOption"
  fullName: "com.google.cloud.bigquery.BigQuery.ModelOption"
- uid: "com.google.cloud.bigquery.BigQuery.QueryOption"
  name: "BigQuery.QueryOption"
  nameWithType: "BigQuery.QueryOption"
  fullName: "com.google.cloud.bigquery.BigQuery.QueryOption"
- uid: "com.google.cloud.bigquery.BigQuery.QueryResultsOption"
  name: "BigQuery.QueryResultsOption"
  nameWithType: "BigQuery.QueryResultsOption"
  fullName: "com.google.cloud.bigquery.BigQuery.QueryResultsOption"
- uid: "com.google.cloud.bigquery.BigQuery.RoutineField"
  name: "BigQuery.RoutineField"
  nameWithType: "BigQuery.RoutineField"
  fullName: "com.google.cloud.bigquery.BigQuery.RoutineField"
- uid: "com.google.cloud.bigquery.BigQuery.RoutineListOption"
  name: "BigQuery.RoutineListOption"
  nameWithType: "BigQuery.RoutineListOption"
  fullName: "com.google.cloud.bigquery.BigQuery.RoutineListOption"
- uid: "com.google.cloud.bigquery.BigQuery.RoutineOption"
  name: "BigQuery.RoutineOption"
  nameWithType: "BigQuery.RoutineOption"
  fullName: "com.google.cloud.bigquery.BigQuery.RoutineOption"
- uid: "com.google.cloud.bigquery.BigQuery.TableDataListOption"
  name: "BigQuery.TableDataListOption"
  nameWithType: "BigQuery.TableDataListOption"
  fullName: "com.google.cloud.bigquery.BigQuery.TableDataListOption"
- uid: "com.google.cloud.bigquery.BigQuery.TableField"
  name: "BigQuery.TableField"
  nameWithType: "BigQuery.TableField"
  fullName: "com.google.cloud.bigquery.BigQuery.TableField"
- uid: "com.google.cloud.bigquery.BigQuery.TableListOption"
  name: "BigQuery.TableListOption"
  nameWithType: "BigQuery.TableListOption"
  fullName: "com.google.cloud.bigquery.BigQuery.TableListOption"
- uid: "com.google.cloud.bigquery.BigQuery.TableOption"
  name: "BigQuery.TableOption"
  nameWithType: "BigQuery.TableOption"
  fullName: "com.google.cloud.bigquery.BigQuery.TableOption"
- uid: "com.google.api.gax.paging.Page"
  name: "Page"
  nameWithType: "Page"
  fullName: "com.google.api.gax.paging.Page"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "com.google.cloud.bigquery.BigQueryOptions"
  name: "BigQueryOptions"
  nameWithType: "BigQueryOptions"
  fullName: "com.google.cloud.bigquery.BigQueryOptions"
- uid: "com.google.cloud.Service"
  name: "Service"
  nameWithType: "Service"
  fullName: "com.google.cloud.Service"
