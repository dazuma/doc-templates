### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.StandardSQLDataType"
  id: "StandardSQLDataType"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.StandardSQLDataType.Builder"
  - "com.google.cloud.bigquery.StandardSQLDataType.StandardSQLDataType()"
  - "com.google.cloud.bigquery.StandardSQLDataType.getArrayElementType()"
  - "com.google.cloud.bigquery.StandardSQLDataType.getStructType()"
  - "com.google.cloud.bigquery.StandardSQLDataType.getTypeKind()"
  - "com.google.cloud.bigquery.StandardSQLDataType.newBuilder()"
  - "com.google.cloud.bigquery.StandardSQLDataType.newBuilder(com.google.cloud.bigquery.StandardSQLTypeName)"
  - "com.google.cloud.bigquery.StandardSQLDataType.newBuilder(java.lang.String)"
  - "com.google.cloud.bigquery.StandardSQLDataType.toBuilder()"
  langs:
  - "java"
  name: "StandardSQLDataType"
  nameWithType: "StandardSQLDataType"
  fullName: "com.google.cloud.bigquery.StandardSQLDataType"
  type: "Class"
  package: "com.google.cloud.bigquery"
  summary: "Represents Standard SQL data type information."
  syntax:
    content: "public abstract class StandardSQLDataType implements Serializable"
  inheritance:
  - "java.lang.Object"
  implements:
  - "java.io.Serializable"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.StandardSQLDataType.StandardSQLDataType()"
  id: "StandardSQLDataType()"
  parent: "com.google.cloud.bigquery.StandardSQLDataType"
  langs:
  - "java"
  name: "StandardSQLDataType()"
  nameWithType: "StandardSQLDataType.StandardSQLDataType()"
  fullName: "com.google.cloud.bigquery.StandardSQLDataType.StandardSQLDataType()"
  overload: "com.google.cloud.bigquery.StandardSQLDataType.StandardSQLDataType*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public StandardSQLDataType()"
- uid: "com.google.cloud.bigquery.StandardSQLDataType.getArrayElementType()"
  id: "getArrayElementType()"
  parent: "com.google.cloud.bigquery.StandardSQLDataType"
  langs:
  - "java"
  name: "getArrayElementType()"
  nameWithType: "StandardSQLDataType.getArrayElementType()"
  fullName: "com.google.cloud.bigquery.StandardSQLDataType.getArrayElementType()"
  overload: "com.google.cloud.bigquery.StandardSQLDataType.getArrayElementType*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the type of an ARRAY's elements."
  syntax:
    content: "public abstract StandardSQLDataType getArrayElementType()"
    return:
      type: "com.google.cloud.bigquery.StandardSQLDataType"
- uid: "com.google.cloud.bigquery.StandardSQLDataType.getStructType()"
  id: "getStructType()"
  parent: "com.google.cloud.bigquery.StandardSQLDataType"
  langs:
  - "java"
  name: "getStructType()"
  nameWithType: "StandardSQLDataType.getStructType()"
  fullName: "com.google.cloud.bigquery.StandardSQLDataType.getStructType()"
  overload: "com.google.cloud.bigquery.StandardSQLDataType.getStructType*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the struct definition's list of fields for a STRUCT type."
  syntax:
    content: "public abstract StandardSQLStructType getStructType()"
    return:
      type: "com.google.cloud.bigquery.StandardSQLStructType"
- uid: "com.google.cloud.bigquery.StandardSQLDataType.getTypeKind()"
  id: "getTypeKind()"
  parent: "com.google.cloud.bigquery.StandardSQLDataType"
  langs:
  - "java"
  name: "getTypeKind()"
  nameWithType: "StandardSQLDataType.getTypeKind()"
  fullName: "com.google.cloud.bigquery.StandardSQLDataType.getTypeKind()"
  overload: "com.google.cloud.bigquery.StandardSQLDataType.getTypeKind*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the type kind of the data type.\n\nCan be any standard SQL data type. For more information, see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types"
  syntax:
    content: "public abstract String getTypeKind()"
    return:
      type: "java.lang.String"
- uid: "com.google.cloud.bigquery.StandardSQLDataType.newBuilder()"
  id: "newBuilder()"
  parent: "com.google.cloud.bigquery.StandardSQLDataType"
  langs:
  - "java"
  name: "newBuilder()"
  nameWithType: "StandardSQLDataType.newBuilder()"
  fullName: "com.google.cloud.bigquery.StandardSQLDataType.newBuilder()"
  overload: "com.google.cloud.bigquery.StandardSQLDataType.newBuilder*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public static StandardSQLDataType.Builder newBuilder()"
    return:
      type: "com.google.cloud.bigquery.StandardSQLDataType.Builder"
- uid: "com.google.cloud.bigquery.StandardSQLDataType.newBuilder(com.google.cloud.bigquery.StandardSQLTypeName)"
  id: "newBuilder(com.google.cloud.bigquery.StandardSQLTypeName)"
  parent: "com.google.cloud.bigquery.StandardSQLDataType"
  langs:
  - "java"
  name: "newBuilder(StandardSQLTypeName typeName)"
  nameWithType: "StandardSQLDataType.newBuilder(StandardSQLTypeName typeName)"
  fullName: "com.google.cloud.bigquery.StandardSQLDataType.newBuilder(StandardSQLTypeName typeName)"
  overload: "com.google.cloud.bigquery.StandardSQLDataType.newBuilder*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a new builder initialized with a StandardSQLTypeName as the type kind."
  syntax:
    content: "public static StandardSQLDataType.Builder newBuilder(StandardSQLTypeName typeName)"
    parameters:
    - id: "typeName"
      type: "com.google.cloud.bigquery.StandardSQLTypeName"
    return:
      type: "com.google.cloud.bigquery.StandardSQLDataType.Builder"
- uid: "com.google.cloud.bigquery.StandardSQLDataType.newBuilder(java.lang.String)"
  id: "newBuilder(java.lang.String)"
  parent: "com.google.cloud.bigquery.StandardSQLDataType"
  langs:
  - "java"
  name: "newBuilder(String typeKind)"
  nameWithType: "StandardSQLDataType.newBuilder(String typeKind)"
  fullName: "com.google.cloud.bigquery.StandardSQLDataType.newBuilder(String typeKind)"
  overload: "com.google.cloud.bigquery.StandardSQLDataType.newBuilder*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a new builder initialized with the type kind."
  syntax:
    content: "public static StandardSQLDataType.Builder newBuilder(String typeKind)"
    parameters:
    - id: "typeKind"
      type: "java.lang.String"
    return:
      type: "com.google.cloud.bigquery.StandardSQLDataType.Builder"
- uid: "com.google.cloud.bigquery.StandardSQLDataType.toBuilder()"
  id: "toBuilder()"
  parent: "com.google.cloud.bigquery.StandardSQLDataType"
  langs:
  - "java"
  name: "toBuilder()"
  nameWithType: "StandardSQLDataType.toBuilder()"
  fullName: "com.google.cloud.bigquery.StandardSQLDataType.toBuilder()"
  overload: "com.google.cloud.bigquery.StandardSQLDataType.toBuilder*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public abstract StandardSQLDataType.Builder toBuilder()"
    return:
      type: "com.google.cloud.bigquery.StandardSQLDataType.Builder"
references:
- uid: "com.google.cloud.bigquery.StandardSQLDataType.StandardSQLDataType*"
  name: "StandardSQLDataType"
  nameWithType: "StandardSQLDataType.StandardSQLDataType"
  fullName: "com.google.cloud.bigquery.StandardSQLDataType.StandardSQLDataType"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.StandardSQLDataType.getTypeKind*"
  name: "getTypeKind"
  nameWithType: "StandardSQLDataType.getTypeKind"
  fullName: "com.google.cloud.bigquery.StandardSQLDataType.getTypeKind"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.StandardSQLDataType.getArrayElementType*"
  name: "getArrayElementType"
  nameWithType: "StandardSQLDataType.getArrayElementType"
  fullName: "com.google.cloud.bigquery.StandardSQLDataType.getArrayElementType"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.StandardSQLStructType"
  name: "StandardSQLStructType"
  nameWithType: "StandardSQLStructType"
  fullName: "com.google.cloud.bigquery.StandardSQLStructType"
- uid: "com.google.cloud.bigquery.StandardSQLDataType.getStructType*"
  name: "getStructType"
  nameWithType: "StandardSQLDataType.getStructType"
  fullName: "com.google.cloud.bigquery.StandardSQLDataType.getStructType"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.StandardSQLDataType.Builder"
  name: "StandardSQLDataType.Builder"
  nameWithType: "StandardSQLDataType.Builder"
  fullName: "com.google.cloud.bigquery.StandardSQLDataType.Builder"
- uid: "com.google.cloud.bigquery.StandardSQLDataType.toBuilder*"
  name: "toBuilder"
  nameWithType: "StandardSQLDataType.toBuilder"
  fullName: "com.google.cloud.bigquery.StandardSQLDataType.toBuilder"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.StandardSQLDataType.newBuilder*"
  name: "newBuilder"
  nameWithType: "StandardSQLDataType.newBuilder"
  fullName: "com.google.cloud.bigquery.StandardSQLDataType.newBuilder"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.StandardSQLTypeName"
  name: "StandardSQLTypeName"
  nameWithType: "StandardSQLTypeName"
  fullName: "com.google.cloud.bigquery.StandardSQLTypeName"
- uid: "java.io.Serializable"
  name: "Serializable"
  nameWithType: "Serializable"
  fullName: "java.io.Serializable"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
