### YamlMime:ManagedReference
items:
- uid: Google.Cloud.Spanner.V1.Mutation
  commentId: T:Google.Cloud.Spanner.V1.Mutation
  id: Mutation
  parent: Google.Cloud.Spanner.V1
  children:
  - Google.Cloud.Spanner.V1.Mutation.#ctor
  - Google.Cloud.Spanner.V1.Mutation.#ctor(Google.Cloud.Spanner.V1.Mutation)
  - Google.Cloud.Spanner.V1.Mutation.Delete
  - Google.Cloud.Spanner.V1.Mutation.Insert
  - Google.Cloud.Spanner.V1.Mutation.InsertOrUpdate
  - Google.Cloud.Spanner.V1.Mutation.OperationCase
  - Google.Cloud.Spanner.V1.Mutation.Replace
  - Google.Cloud.Spanner.V1.Mutation.Update
  langs:
  - csharp
  - vb
  name: Mutation
  nameWithType: Mutation
  fullName: Google.Cloud.Spanner.V1.Mutation
  type: Class
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Mutation.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: Mutation
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Mutation.cs
    startLine: 60
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nA modification to one or more Cloud Spanner rows.  Mutations can be\napplied to a Cloud Spanner database by sending them in a\n[Commit][google.spanner.v1.Spanner.Commit] call.\n"
  example: []
  syntax:
    content: 'public sealed class Mutation : IMessage<Mutation>, IEquatable<Mutation>, IDeepCloneable<Mutation>, IBufferMessage, IMessage'
    content.vb: >-
      Public NotInheritable Class Mutation
          Implements IMessage(Of Mutation), IEquatable(Of Mutation), IDeepCloneable(Of Mutation), IBufferMessage, IMessage
  inheritance:
  - System.Object
  implements:
  - Google.Protobuf.IMessage{Google.Cloud.Spanner.V1.Mutation}
  - System.IEquatable{Google.Cloud.Spanner.V1.Mutation}
  - Google.Protobuf.IDeepCloneable{Google.Cloud.Spanner.V1.Mutation}
  - Google.Protobuf.IBufferMessage
  - Google.Protobuf.IMessage
  inheritedMembers:
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Google.Cloud.Spanner.V1.Mutation.#ctor
  commentId: M:Google.Cloud.Spanner.V1.Mutation.#ctor
  id: '#ctor'
  parent: Google.Cloud.Spanner.V1.Mutation
  langs:
  - csharp
  - vb
  name: Mutation()
  nameWithType: Mutation.Mutation()
  fullName: Google.Cloud.Spanner.V1.Mutation.Mutation()
  type: Constructor
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Mutation.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: .ctor
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Mutation.cs
    startLine: 80
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  syntax:
    content: public Mutation()
    content.vb: Public Sub New
  overload: Google.Cloud.Spanner.V1.Mutation.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Cloud.Spanner.V1.Mutation.#ctor(Google.Cloud.Spanner.V1.Mutation)
  commentId: M:Google.Cloud.Spanner.V1.Mutation.#ctor(Google.Cloud.Spanner.V1.Mutation)
  id: '#ctor(Google.Cloud.Spanner.V1.Mutation)'
  parent: Google.Cloud.Spanner.V1.Mutation
  langs:
  - csharp
  - vb
  name: Mutation(Mutation)
  nameWithType: Mutation.Mutation(Mutation)
  fullName: Google.Cloud.Spanner.V1.Mutation.Mutation(Google.Cloud.Spanner.V1.Mutation)
  type: Constructor
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Mutation.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: .ctor
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Mutation.cs
    startLine: 87
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  syntax:
    content: public Mutation(Mutation other)
    parameters:
    - id: other
      type: Google.Cloud.Spanner.V1.Mutation
    content.vb: Public Sub New(other As Mutation)
  overload: Google.Cloud.Spanner.V1.Mutation.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Cloud.Spanner.V1.Mutation.Insert
  commentId: P:Google.Cloud.Spanner.V1.Mutation.Insert
  id: Insert
  parent: Google.Cloud.Spanner.V1.Mutation
  langs:
  - csharp
  - vb
  name: Insert
  nameWithType: Mutation.Insert
  fullName: Google.Cloud.Spanner.V1.Mutation.Insert
  type: Property
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Mutation.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: Insert
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Mutation.cs
    startLine: 121
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nInsert new rows in a table. If any of the rows already exist,\nthe write or transaction fails with error `ALREADY_EXISTS`.\n"
  example: []
  syntax:
    content: public Mutation.Types.Write Insert { get; set; }
    parameters: []
    return:
      type: Google.Cloud.Spanner.V1.Mutation.Types.Write
    content.vb: Public Property Insert As Mutation.Types.Write
  overload: Google.Cloud.Spanner.V1.Mutation.Insert*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Google.Cloud.Spanner.V1.Mutation.Update
  commentId: P:Google.Cloud.Spanner.V1.Mutation.Update
  id: Update
  parent: Google.Cloud.Spanner.V1.Mutation
  langs:
  - csharp
  - vb
  name: Update
  nameWithType: Mutation.Update
  fullName: Google.Cloud.Spanner.V1.Mutation.Update
  type: Property
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Mutation.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: Update
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Mutation.cs
    startLine: 136
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nUpdate existing rows in a table. If any of the rows does not\nalready exist, the transaction fails with error `NOT_FOUND`.\n"
  example: []
  syntax:
    content: public Mutation.Types.Write Update { get; set; }
    parameters: []
    return:
      type: Google.Cloud.Spanner.V1.Mutation.Types.Write
    content.vb: Public Property Update As Mutation.Types.Write
  overload: Google.Cloud.Spanner.V1.Mutation.Update*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Google.Cloud.Spanner.V1.Mutation.InsertOrUpdate
  commentId: P:Google.Cloud.Spanner.V1.Mutation.InsertOrUpdate
  id: InsertOrUpdate
  parent: Google.Cloud.Spanner.V1.Mutation
  langs:
  - csharp
  - vb
  name: InsertOrUpdate
  nameWithType: Mutation.InsertOrUpdate
  fullName: Google.Cloud.Spanner.V1.Mutation.InsertOrUpdate
  type: Property
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Mutation.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: InsertOrUpdate
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Mutation.cs
    startLine: 156
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nLike [insert][google.spanner.v1.Mutation.insert], except that if the row already exists, then\nits column values are overwritten with the ones provided. Any\ncolumn values not explicitly written are preserved.\n\nWhen using [insert_or_update][google.spanner.v1.Mutation.insert_or_update], just as when using [insert][google.spanner.v1.Mutation.insert], all `NOT\nNULL` columns in the table must be given a value. This holds true\neven when the row already exists and will therefore actually be updated.\n"
  example: []
  syntax:
    content: public Mutation.Types.Write InsertOrUpdate { get; set; }
    parameters: []
    return:
      type: Google.Cloud.Spanner.V1.Mutation.Types.Write
    content.vb: Public Property InsertOrUpdate As Mutation.Types.Write
  overload: Google.Cloud.Spanner.V1.Mutation.InsertOrUpdate*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Google.Cloud.Spanner.V1.Mutation.Replace
  commentId: P:Google.Cloud.Spanner.V1.Mutation.Replace
  id: Replace
  parent: Google.Cloud.Spanner.V1.Mutation
  langs:
  - csharp
  - vb
  name: Replace
  nameWithType: Mutation.Replace
  fullName: Google.Cloud.Spanner.V1.Mutation.Replace
  type: Property
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Mutation.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: Replace
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Mutation.cs
    startLine: 178
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nLike [insert][google.spanner.v1.Mutation.insert], except that if the row already exists, it is\ndeleted, and the column values provided are inserted\ninstead. Unlike [insert_or_update][google.spanner.v1.Mutation.insert_or_update], this means any values not\nexplicitly written become `NULL`.\n\nIn an interleaved table, if you create the child table with the\n`ON DELETE CASCADE` annotation, then replacing a parent row\nalso deletes the child rows. Otherwise, you must delete the\nchild rows before you replace the parent row.\n"
  example: []
  syntax:
    content: public Mutation.Types.Write Replace { get; set; }
    parameters: []
    return:
      type: Google.Cloud.Spanner.V1.Mutation.Types.Write
    content.vb: Public Property Replace As Mutation.Types.Write
  overload: Google.Cloud.Spanner.V1.Mutation.Replace*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Google.Cloud.Spanner.V1.Mutation.Delete
  commentId: P:Google.Cloud.Spanner.V1.Mutation.Delete
  id: Delete
  parent: Google.Cloud.Spanner.V1.Mutation
  langs:
  - csharp
  - vb
  name: Delete
  nameWithType: Mutation.Delete
  fullName: Google.Cloud.Spanner.V1.Mutation.Delete
  type: Property
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Mutation.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: Delete
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Mutation.cs
    startLine: 193
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nDelete rows from a table. Succeeds whether or not the named\nrows were present.\n"
  example: []
  syntax:
    content: public Mutation.Types.Delete Delete { get; set; }
    parameters: []
    return:
      type: Google.Cloud.Spanner.V1.Mutation.Types.Delete
    content.vb: Public Property Delete As Mutation.Types.Delete
  overload: Google.Cloud.Spanner.V1.Mutation.Delete*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Google.Cloud.Spanner.V1.Mutation.OperationCase
  commentId: P:Google.Cloud.Spanner.V1.Mutation.OperationCase
  id: OperationCase
  parent: Google.Cloud.Spanner.V1.Mutation
  langs:
  - csharp
  - vb
  name: OperationCase
  nameWithType: Mutation.OperationCase
  fullName: Google.Cloud.Spanner.V1.Mutation.OperationCase
  type: Property
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Mutation.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: OperationCase
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/Mutation.cs
    startLine: 213
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  syntax:
    content: public Mutation.OperationOneofCase OperationCase { get; }
    parameters: []
    return:
      type: Google.Cloud.Spanner.V1.Mutation.OperationOneofCase
    content.vb: Public ReadOnly Property OperationCase As Mutation.OperationOneofCase
  overload: Google.Cloud.Spanner.V1.Mutation.OperationCase*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Google.Cloud.Spanner.V1
  commentId: N:Google.Cloud.Spanner.V1
  name: Google.Cloud.Spanner.V1
  nameWithType: Google.Cloud.Spanner.V1
  fullName: Google.Cloud.Spanner.V1
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Google.Protobuf.IMessage{Google.Cloud.Spanner.V1.Mutation}
  commentId: T:Google.Protobuf.IMessage{Google.Cloud.Spanner.V1.Mutation}
  parent: Google.Protobuf
  definition: Google.Protobuf.IMessage`1
  name: IMessage<Mutation>
  nameWithType: IMessage<Mutation>
  fullName: Google.Protobuf.IMessage<Google.Cloud.Spanner.V1.Mutation>
  nameWithType.vb: IMessage(Of Mutation)
  fullName.vb: Google.Protobuf.IMessage(Of Google.Cloud.Spanner.V1.Mutation)
  name.vb: IMessage(Of Mutation)
  spec.csharp:
  - uid: Google.Protobuf.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Google.Protobuf.IMessage
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Cloud.Spanner.V1.Mutation
    name: Mutation
    nameWithType: Mutation
    fullName: Google.Cloud.Spanner.V1.Mutation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Google.Protobuf.IMessage
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Cloud.Spanner.V1.Mutation
    name: Mutation
    nameWithType: Mutation
    fullName: Google.Cloud.Spanner.V1.Mutation
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{Google.Cloud.Spanner.V1.Mutation}
  commentId: T:System.IEquatable{Google.Cloud.Spanner.V1.Mutation}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Mutation>
  nameWithType: IEquatable<Mutation>
  fullName: System.IEquatable<Google.Cloud.Spanner.V1.Mutation>
  nameWithType.vb: IEquatable(Of Mutation)
  fullName.vb: System.IEquatable(Of Google.Cloud.Spanner.V1.Mutation)
  name.vb: IEquatable(Of Mutation)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Cloud.Spanner.V1.Mutation
    name: Mutation
    nameWithType: Mutation
    fullName: Google.Cloud.Spanner.V1.Mutation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Cloud.Spanner.V1.Mutation
    name: Mutation
    nameWithType: Mutation
    fullName: Google.Cloud.Spanner.V1.Mutation
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.IDeepCloneable{Google.Cloud.Spanner.V1.Mutation}
  commentId: T:Google.Protobuf.IDeepCloneable{Google.Cloud.Spanner.V1.Mutation}
  parent: Google.Protobuf
  definition: Google.Protobuf.IDeepCloneable`1
  name: IDeepCloneable<Mutation>
  nameWithType: IDeepCloneable<Mutation>
  fullName: Google.Protobuf.IDeepCloneable<Google.Cloud.Spanner.V1.Mutation>
  nameWithType.vb: IDeepCloneable(Of Mutation)
  fullName.vb: Google.Protobuf.IDeepCloneable(Of Google.Cloud.Spanner.V1.Mutation)
  name.vb: IDeepCloneable(Of Mutation)
  spec.csharp:
  - uid: Google.Protobuf.IDeepCloneable`1
    name: IDeepCloneable
    nameWithType: IDeepCloneable
    fullName: Google.Protobuf.IDeepCloneable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Cloud.Spanner.V1.Mutation
    name: Mutation
    nameWithType: Mutation
    fullName: Google.Cloud.Spanner.V1.Mutation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.IDeepCloneable`1
    name: IDeepCloneable
    nameWithType: IDeepCloneable
    fullName: Google.Protobuf.IDeepCloneable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Cloud.Spanner.V1.Mutation
    name: Mutation
    nameWithType: Mutation
    fullName: Google.Cloud.Spanner.V1.Mutation
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.IBufferMessage
  commentId: T:Google.Protobuf.IBufferMessage
  parent: Google.Protobuf
  isExternal: true
  name: IBufferMessage
  nameWithType: IBufferMessage
  fullName: Google.Protobuf.IBufferMessage
- uid: Google.Protobuf.IMessage
  commentId: T:Google.Protobuf.IMessage
  parent: Google.Protobuf
  isExternal: true
  name: IMessage
  nameWithType: IMessage
  fullName: Google.Protobuf.IMessage
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Google.Protobuf.IMessage`1
  commentId: T:Google.Protobuf.IMessage`1
  isExternal: true
  name: IMessage<T>
  nameWithType: IMessage<T>
  fullName: Google.Protobuf.IMessage<T>
  nameWithType.vb: IMessage(Of T)
  fullName.vb: Google.Protobuf.IMessage(Of T)
  name.vb: IMessage(Of T)
  spec.csharp:
  - uid: Google.Protobuf.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Google.Protobuf.IMessage
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Google.Protobuf.IMessage
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf
  commentId: N:Google.Protobuf
  isExternal: true
  name: Google.Protobuf
  nameWithType: Google.Protobuf
  fullName: Google.Protobuf
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.IDeepCloneable`1
  commentId: T:Google.Protobuf.IDeepCloneable`1
  isExternal: true
  name: IDeepCloneable<T>
  nameWithType: IDeepCloneable<T>
  fullName: Google.Protobuf.IDeepCloneable<T>
  nameWithType.vb: IDeepCloneable(Of T)
  fullName.vb: Google.Protobuf.IDeepCloneable(Of T)
  name.vb: IDeepCloneable(Of T)
  spec.csharp:
  - uid: Google.Protobuf.IDeepCloneable`1
    name: IDeepCloneable
    nameWithType: IDeepCloneable
    fullName: Google.Protobuf.IDeepCloneable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.IDeepCloneable`1
    name: IDeepCloneable
    nameWithType: IDeepCloneable
    fullName: Google.Protobuf.IDeepCloneable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Cloud.Spanner.V1.Mutation.#ctor*
  commentId: Overload:Google.Cloud.Spanner.V1.Mutation.#ctor
  name: Mutation
  nameWithType: Mutation.Mutation
  fullName: Google.Cloud.Spanner.V1.Mutation.Mutation
- uid: Google.Cloud.Spanner.V1.Mutation
  commentId: T:Google.Cloud.Spanner.V1.Mutation
  parent: Google.Cloud.Spanner.V1
  name: Mutation
  nameWithType: Mutation
  fullName: Google.Cloud.Spanner.V1.Mutation
- uid: Google.Cloud.Spanner.V1.Mutation.Insert*
  commentId: Overload:Google.Cloud.Spanner.V1.Mutation.Insert
  name: Insert
  nameWithType: Mutation.Insert
  fullName: Google.Cloud.Spanner.V1.Mutation.Insert
- uid: Google.Cloud.Spanner.V1.Mutation.Types.Write
  commentId: T:Google.Cloud.Spanner.V1.Mutation.Types.Write
  parent: Google.Cloud.Spanner.V1
  name: Mutation.Types.Write
  nameWithType: Mutation.Types.Write
  fullName: Google.Cloud.Spanner.V1.Mutation.Types.Write
- uid: Google.Cloud.Spanner.V1.Mutation.Update*
  commentId: Overload:Google.Cloud.Spanner.V1.Mutation.Update
  name: Update
  nameWithType: Mutation.Update
  fullName: Google.Cloud.Spanner.V1.Mutation.Update
- uid: Google.Cloud.Spanner.V1.Mutation.InsertOrUpdate*
  commentId: Overload:Google.Cloud.Spanner.V1.Mutation.InsertOrUpdate
  name: InsertOrUpdate
  nameWithType: Mutation.InsertOrUpdate
  fullName: Google.Cloud.Spanner.V1.Mutation.InsertOrUpdate
- uid: Google.Cloud.Spanner.V1.Mutation.Replace*
  commentId: Overload:Google.Cloud.Spanner.V1.Mutation.Replace
  name: Replace
  nameWithType: Mutation.Replace
  fullName: Google.Cloud.Spanner.V1.Mutation.Replace
- uid: Google.Cloud.Spanner.V1.Mutation.Delete*
  commentId: Overload:Google.Cloud.Spanner.V1.Mutation.Delete
  name: Delete
  nameWithType: Mutation.Delete
  fullName: Google.Cloud.Spanner.V1.Mutation.Delete
- uid: Google.Cloud.Spanner.V1.Mutation.Types.Delete
  commentId: T:Google.Cloud.Spanner.V1.Mutation.Types.Delete
  parent: Google.Cloud.Spanner.V1
  name: Mutation.Types.Delete
  nameWithType: Mutation.Types.Delete
  fullName: Google.Cloud.Spanner.V1.Mutation.Types.Delete
- uid: Google.Cloud.Spanner.V1.Mutation.OperationCase*
  commentId: Overload:Google.Cloud.Spanner.V1.Mutation.OperationCase
  name: OperationCase
  nameWithType: Mutation.OperationCase
  fullName: Google.Cloud.Spanner.V1.Mutation.OperationCase
- uid: Google.Cloud.Spanner.V1.Mutation.OperationOneofCase
  commentId: T:Google.Cloud.Spanner.V1.Mutation.OperationOneofCase
  parent: Google.Cloud.Spanner.V1
  name: Mutation.OperationOneofCase
  nameWithType: Mutation.OperationOneofCase
  fullName: Google.Cloud.Spanner.V1.Mutation.OperationOneofCase
