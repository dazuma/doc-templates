### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.TableInfo.Builder"
  id: "Builder"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.TableInfo.Builder.Builder()"
  - "com.google.cloud.bigquery.TableInfo.Builder.build()"
  - "com.google.cloud.bigquery.TableInfo.Builder.setDefinition(com.google.cloud.bigquery.TableDefinition)"
  - "com.google.cloud.bigquery.TableInfo.Builder.setDescription(java.lang.String)"
  - "com.google.cloud.bigquery.TableInfo.Builder.setEncryptionConfiguration(com.google.cloud.bigquery.EncryptionConfiguration)"
  - "com.google.cloud.bigquery.TableInfo.Builder.setExpirationTime(java.lang.Long)"
  - "com.google.cloud.bigquery.TableInfo.Builder.setFriendlyName(java.lang.String)"
  - "com.google.cloud.bigquery.TableInfo.Builder.setLabels(java.util.Map<java.lang.String,java.lang.String>)"
  - "com.google.cloud.bigquery.TableInfo.Builder.setRequirePartitionFilter(java.lang.Boolean)"
  - "com.google.cloud.bigquery.TableInfo.Builder.setTableId(com.google.cloud.bigquery.TableId)"
  langs:
  - "java"
  name: "TableInfo.Builder"
  nameWithType: "TableInfo.Builder"
  fullName: "com.google.cloud.bigquery.TableInfo.Builder"
  type: "Class"
  package: "com.google.cloud.bigquery"
  summary: "A builder for `TableInfo` objects."
  syntax:
    content: "public abstract static class TableInfo.Builder"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.TableInfo.Builder.Builder()"
  id: "Builder()"
  parent: "com.google.cloud.bigquery.TableInfo.Builder"
  langs:
  - "java"
  name: "Builder()"
  nameWithType: "TableInfo.Builder.Builder()"
  fullName: "com.google.cloud.bigquery.TableInfo.Builder.Builder()"
  overload: "com.google.cloud.bigquery.TableInfo.Builder.Builder*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public Builder()"
- uid: "com.google.cloud.bigquery.TableInfo.Builder.build()"
  id: "build()"
  parent: "com.google.cloud.bigquery.TableInfo.Builder"
  langs:
  - "java"
  name: "build()"
  nameWithType: "TableInfo.Builder.build()"
  fullName: "com.google.cloud.bigquery.TableInfo.Builder.build()"
  overload: "com.google.cloud.bigquery.TableInfo.Builder.build*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Creates a `TableInfo` object."
  syntax:
    content: "public abstract TableInfo build()"
    return:
      type: "com.google.cloud.bigquery.TableInfo"
- uid: "com.google.cloud.bigquery.TableInfo.Builder.setDefinition(com.google.cloud.bigquery.TableDefinition)"
  id: "setDefinition(com.google.cloud.bigquery.TableDefinition)"
  parent: "com.google.cloud.bigquery.TableInfo.Builder"
  langs:
  - "java"
  name: "setDefinition(TableDefinition definition)"
  nameWithType: "TableInfo.Builder.setDefinition(TableDefinition definition)"
  fullName: "com.google.cloud.bigquery.TableInfo.Builder.setDefinition(TableDefinition definition)"
  overload: "com.google.cloud.bigquery.TableInfo.Builder.setDefinition*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the table definition. Use <xref uid=\"com.google.cloud.bigquery.StandardTableDefinition\" data-throw-if-not-resolved=\"false\">StandardTableDefinition</xref> to create simple BigQuery table. Use <xref uid=\"com.google.cloud.bigquery.ViewDefinition\" data-throw-if-not-resolved=\"false\">ViewDefinition</xref> to create a BigQuery view. Use <xref uid=\"com.google.cloud.bigquery.ExternalTableDefinition\" data-throw-if-not-resolved=\"false\">ExternalTableDefinition</xref> to create a BigQuery a table backed by external data."
  syntax:
    content: "public abstract TableInfo.Builder setDefinition(TableDefinition definition)"
    parameters:
    - id: "definition"
      type: "com.google.cloud.bigquery.TableDefinition"
    return:
      type: "com.google.cloud.bigquery.TableInfo.Builder"
- uid: "com.google.cloud.bigquery.TableInfo.Builder.setDescription(java.lang.String)"
  id: "setDescription(java.lang.String)"
  parent: "com.google.cloud.bigquery.TableInfo.Builder"
  langs:
  - "java"
  name: "setDescription(String description)"
  nameWithType: "TableInfo.Builder.setDescription(String description)"
  fullName: "com.google.cloud.bigquery.TableInfo.Builder.setDescription(String description)"
  overload: "com.google.cloud.bigquery.TableInfo.Builder.setDescription*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets a user-friendly description for the table."
  syntax:
    content: "public abstract TableInfo.Builder setDescription(String description)"
    parameters:
    - id: "description"
      type: "java.lang.String"
    return:
      type: "com.google.cloud.bigquery.TableInfo.Builder"
- uid: "com.google.cloud.bigquery.TableInfo.Builder.setEncryptionConfiguration(com.google.cloud.bigquery.EncryptionConfiguration)"
  id: "setEncryptionConfiguration(com.google.cloud.bigquery.EncryptionConfiguration)"
  parent: "com.google.cloud.bigquery.TableInfo.Builder"
  langs:
  - "java"
  name: "setEncryptionConfiguration(EncryptionConfiguration configuration)"
  nameWithType: "TableInfo.Builder.setEncryptionConfiguration(EncryptionConfiguration configuration)"
  fullName: "com.google.cloud.bigquery.TableInfo.Builder.setEncryptionConfiguration(EncryptionConfiguration configuration)"
  overload: "com.google.cloud.bigquery.TableInfo.Builder.setEncryptionConfiguration*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public abstract TableInfo.Builder setEncryptionConfiguration(EncryptionConfiguration configuration)"
    parameters:
    - id: "configuration"
      type: "com.google.cloud.bigquery.EncryptionConfiguration"
    return:
      type: "com.google.cloud.bigquery.TableInfo.Builder"
- uid: "com.google.cloud.bigquery.TableInfo.Builder.setExpirationTime(java.lang.Long)"
  id: "setExpirationTime(java.lang.Long)"
  parent: "com.google.cloud.bigquery.TableInfo.Builder"
  langs:
  - "java"
  name: "setExpirationTime(Long expirationTime)"
  nameWithType: "TableInfo.Builder.setExpirationTime(Long expirationTime)"
  fullName: "com.google.cloud.bigquery.TableInfo.Builder.setExpirationTime(Long expirationTime)"
  overload: "com.google.cloud.bigquery.TableInfo.Builder.setExpirationTime*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the time when this table expires, in milliseconds since the epoch. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed."
  syntax:
    content: "public abstract TableInfo.Builder setExpirationTime(Long expirationTime)"
    parameters:
    - id: "expirationTime"
      type: "java.lang.Long"
    return:
      type: "com.google.cloud.bigquery.TableInfo.Builder"
- uid: "com.google.cloud.bigquery.TableInfo.Builder.setFriendlyName(java.lang.String)"
  id: "setFriendlyName(java.lang.String)"
  parent: "com.google.cloud.bigquery.TableInfo.Builder"
  langs:
  - "java"
  name: "setFriendlyName(String friendlyName)"
  nameWithType: "TableInfo.Builder.setFriendlyName(String friendlyName)"
  fullName: "com.google.cloud.bigquery.TableInfo.Builder.setFriendlyName(String friendlyName)"
  overload: "com.google.cloud.bigquery.TableInfo.Builder.setFriendlyName*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets a user-friendly name for the table."
  syntax:
    content: "public abstract TableInfo.Builder setFriendlyName(String friendlyName)"
    parameters:
    - id: "friendlyName"
      type: "java.lang.String"
    return:
      type: "com.google.cloud.bigquery.TableInfo.Builder"
- uid: "com.google.cloud.bigquery.TableInfo.Builder.setLabels(java.util.Map<java.lang.String,java.lang.String>)"
  id: "setLabels(java.util.Map<java.lang.String,java.lang.String>)"
  parent: "com.google.cloud.bigquery.TableInfo.Builder"
  langs:
  - "java"
  name: "setLabels(Map<String,String> labels)"
  nameWithType: "TableInfo.Builder.setLabels(Map<String,String> labels)"
  fullName: "com.google.cloud.bigquery.TableInfo.Builder.setLabels(Map<String,String> labels)"
  overload: "com.google.cloud.bigquery.TableInfo.Builder.setLabels*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the labels applied to this table.\n\nUnstable, because labels are [experimental][].\n\nWhen used with <xref uid=\"com.google.cloud.bigquery.BigQuery.update*\" data-throw-if-not-resolved=\"false\">BigQuery#update(TableInfo, TableOption...)</xref>, setting `labels` to `null` removes all labels; otherwise all keys that are mapped to `null` values are removed and other keys are updated to their respective values.\n\n\n[experimental]: https://cloud.google.com/bigquery/docs/reference/rest/v2/tables"
  syntax:
    content: "public abstract TableInfo.Builder setLabels(Map<String,String> labels)"
    parameters:
    - id: "labels"
      type: "java.util.Map<java.lang.String,java.lang.String>"
    return:
      type: "com.google.cloud.bigquery.TableInfo.Builder"
- uid: "com.google.cloud.bigquery.TableInfo.Builder.setRequirePartitionFilter(java.lang.Boolean)"
  id: "setRequirePartitionFilter(java.lang.Boolean)"
  parent: "com.google.cloud.bigquery.TableInfo.Builder"
  langs:
  - "java"
  name: "setRequirePartitionFilter(Boolean requirePartitionFilter)"
  nameWithType: "TableInfo.Builder.setRequirePartitionFilter(Boolean requirePartitionFilter)"
  fullName: "com.google.cloud.bigquery.TableInfo.Builder.setRequirePartitionFilter(Boolean requirePartitionFilter)"
  overload: "com.google.cloud.bigquery.TableInfo.Builder.setRequirePartitionFilter*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public TableInfo.Builder setRequirePartitionFilter(Boolean requirePartitionFilter)"
    parameters:
    - id: "requirePartitionFilter"
      type: "java.lang.Boolean"
    return:
      type: "com.google.cloud.bigquery.TableInfo.Builder"
- uid: "com.google.cloud.bigquery.TableInfo.Builder.setTableId(com.google.cloud.bigquery.TableId)"
  id: "setTableId(com.google.cloud.bigquery.TableId)"
  parent: "com.google.cloud.bigquery.TableInfo.Builder"
  langs:
  - "java"
  name: "setTableId(TableId tableId)"
  nameWithType: "TableInfo.Builder.setTableId(TableId tableId)"
  fullName: "com.google.cloud.bigquery.TableInfo.Builder.setTableId(TableId tableId)"
  overload: "com.google.cloud.bigquery.TableInfo.Builder.setTableId*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the table identity."
  syntax:
    content: "public abstract TableInfo.Builder setTableId(TableId tableId)"
    parameters:
    - id: "tableId"
      type: "com.google.cloud.bigquery.TableId"
    return:
      type: "com.google.cloud.bigquery.TableInfo.Builder"
references:
- uid: "com.google.cloud.bigquery.TableInfo.Builder.Builder*"
  name: "Builder"
  nameWithType: "TableInfo.Builder.Builder"
  fullName: "com.google.cloud.bigquery.TableInfo.Builder.Builder"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.TableInfo.Builder.setDescription*"
  name: "setDescription"
  nameWithType: "TableInfo.Builder.setDescription"
  fullName: "com.google.cloud.bigquery.TableInfo.Builder.setDescription"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Long"
  spec.java:
  - uid: "java.lang.Long"
    name: "Long"
    fullName: "java.lang.Long"
- uid: "com.google.cloud.bigquery.TableInfo.Builder.setExpirationTime*"
  name: "setExpirationTime"
  nameWithType: "TableInfo.Builder.setExpirationTime"
  fullName: "com.google.cloud.bigquery.TableInfo.Builder.setExpirationTime"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TableInfo.Builder.setFriendlyName*"
  name: "setFriendlyName"
  nameWithType: "TableInfo.Builder.setFriendlyName"
  fullName: "com.google.cloud.bigquery.TableInfo.Builder.setFriendlyName"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TableId"
  name: "TableId"
  nameWithType: "TableId"
  fullName: "com.google.cloud.bigquery.TableId"
- uid: "com.google.cloud.bigquery.TableInfo.Builder.setTableId*"
  name: "setTableId"
  nameWithType: "TableInfo.Builder.setTableId"
  fullName: "com.google.cloud.bigquery.TableInfo.Builder.setTableId"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TableDefinition"
  name: "TableDefinition"
  nameWithType: "TableDefinition"
  fullName: "com.google.cloud.bigquery.TableDefinition"
- uid: "com.google.cloud.bigquery.TableInfo.Builder.setDefinition*"
  name: "setDefinition"
  nameWithType: "TableInfo.Builder.setDefinition"
  fullName: "com.google.cloud.bigquery.TableInfo.Builder.setDefinition"
  package: "com.google.cloud.bigquery"
- uid: "java.util.Map<java.lang.String,java.lang.String>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.TableInfo.Builder.setLabels*"
  name: "setLabels"
  nameWithType: "TableInfo.Builder.setLabels"
  fullName: "com.google.cloud.bigquery.TableInfo.Builder.setLabels"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TableInfo"
  name: "TableInfo"
  nameWithType: "TableInfo"
  fullName: "com.google.cloud.bigquery.TableInfo"
- uid: "com.google.cloud.bigquery.TableInfo.Builder.build*"
  name: "build"
  nameWithType: "TableInfo.Builder.build"
  fullName: "com.google.cloud.bigquery.TableInfo.Builder.build"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.EncryptionConfiguration"
  name: "EncryptionConfiguration"
  nameWithType: "EncryptionConfiguration"
  fullName: "com.google.cloud.bigquery.EncryptionConfiguration"
- uid: "com.google.cloud.bigquery.TableInfo.Builder.setEncryptionConfiguration*"
  name: "setEncryptionConfiguration"
  nameWithType: "TableInfo.Builder.setEncryptionConfiguration"
  fullName: "com.google.cloud.bigquery.TableInfo.Builder.setEncryptionConfiguration"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Boolean"
  spec.java:
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
- uid: "com.google.cloud.bigquery.TableInfo.Builder.setRequirePartitionFilter*"
  name: "setRequirePartitionFilter"
  nameWithType: "TableInfo.Builder.setRequirePartitionFilter"
  fullName: "com.google.cloud.bigquery.TableInfo.Builder.setRequirePartitionFilter"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
- uid: "java.lang.String,java.lang.String"
  name: "String,String"
  nameWithType: "String,String"
  fullName: "java.lang.String,java.lang.String"
