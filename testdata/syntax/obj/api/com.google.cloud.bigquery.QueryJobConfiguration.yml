### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.QueryJobConfiguration"
  id: "QueryJobConfiguration"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.QueryJobConfiguration.Builder"
  - "com.google.cloud.bigquery.QueryJobConfiguration.Priority"
  - "com.google.cloud.bigquery.QueryJobConfiguration.allowLargeResults()"
  - "com.google.cloud.bigquery.QueryJobConfiguration.dryRun()"
  - "com.google.cloud.bigquery.QueryJobConfiguration.equals(java.lang.Object)"
  - "com.google.cloud.bigquery.QueryJobConfiguration.flattenResults()"
  - "com.google.cloud.bigquery.QueryJobConfiguration.getClustering()"
  - "com.google.cloud.bigquery.QueryJobConfiguration.getConnectionProperties()"
  - "com.google.cloud.bigquery.QueryJobConfiguration.getCreateDisposition()"
  - "com.google.cloud.bigquery.QueryJobConfiguration.getDefaultDataset()"
  - "com.google.cloud.bigquery.QueryJobConfiguration.getDestinationEncryptionConfiguration()"
  - "com.google.cloud.bigquery.QueryJobConfiguration.getDestinationTable()"
  - "com.google.cloud.bigquery.QueryJobConfiguration.getJobTimeoutMs()"
  - "com.google.cloud.bigquery.QueryJobConfiguration.getLabels()"
  - "com.google.cloud.bigquery.QueryJobConfiguration.getMaxResults()"
  - "com.google.cloud.bigquery.QueryJobConfiguration.getMaximumBillingTier()"
  - "com.google.cloud.bigquery.QueryJobConfiguration.getMaximumBytesBilled()"
  - "com.google.cloud.bigquery.QueryJobConfiguration.getNamedParameters()"
  - "com.google.cloud.bigquery.QueryJobConfiguration.getPositionalParameters()"
  - "com.google.cloud.bigquery.QueryJobConfiguration.getPriority()"
  - "com.google.cloud.bigquery.QueryJobConfiguration.getQuery()"
  - "com.google.cloud.bigquery.QueryJobConfiguration.getRangePartitioning()"
  - "com.google.cloud.bigquery.QueryJobConfiguration.getSchemaUpdateOptions()"
  - "com.google.cloud.bigquery.QueryJobConfiguration.getTableDefinitions()"
  - "com.google.cloud.bigquery.QueryJobConfiguration.getTimePartitioning()"
  - "com.google.cloud.bigquery.QueryJobConfiguration.getUserDefinedFunctions()"
  - "com.google.cloud.bigquery.QueryJobConfiguration.getWriteDisposition()"
  - "com.google.cloud.bigquery.QueryJobConfiguration.hashCode()"
  - "com.google.cloud.bigquery.QueryJobConfiguration.newBuilder(java.lang.String)"
  - "com.google.cloud.bigquery.QueryJobConfiguration.of(java.lang.String)"
  - "com.google.cloud.bigquery.QueryJobConfiguration.toBuilder()"
  - "com.google.cloud.bigquery.QueryJobConfiguration.useLegacySql()"
  - "com.google.cloud.bigquery.QueryJobConfiguration.useQueryCache()"
  langs:
  - "java"
  name: "QueryJobConfiguration"
  nameWithType: "QueryJobConfiguration"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration"
  type: "Class"
  package: "com.google.cloud.bigquery"
  summary: "Google BigQuery Query Job configuration. A Query Job runs a query against BigQuery data. Query job configurations have <xref uid=\"com.google.cloud.bigquery.JobConfiguration.Type.QUERY\" data-throw-if-not-resolved=\"false\">JobConfiguration.Type#QUERY</xref> type."
  syntax:
    content: "public final class QueryJobConfiguration extends JobConfiguration"
  inheritance:
  - "java.lang.Object"
  - "com.google.cloud.bigquery.JobConfiguration"
  inheritedMembers:
  - "com.google.cloud.bigquery.JobConfiguration.getType()"
  - "com.google.cloud.bigquery.JobConfiguration.toBuilder()"
  - "com.google.cloud.bigquery.JobConfiguration.toString()"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.QueryJobConfiguration(com.google.cloud.bigquery.QueryJobConfiguration.Builder)"
  id: "QueryJobConfiguration(com.google.cloud.bigquery.QueryJobConfiguration.Builder)"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "QueryJobConfiguration(QueryJobConfiguration.Builder builder)"
  nameWithType: "QueryJobConfiguration.QueryJobConfiguration(QueryJobConfiguration.Builder builder)"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.QueryJobConfiguration(QueryJobConfiguration.Builder builder)"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.QueryJobConfiguration*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "private QueryJobConfiguration(QueryJobConfiguration.Builder builder)"
    parameters:
    - id: "builder"
      type: "com.google.cloud.bigquery.QueryJobConfiguration.Builder"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.allowLargeResults()"
  id: "allowLargeResults()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "allowLargeResults()"
  nameWithType: "QueryJobConfiguration.allowLargeResults()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.allowLargeResults()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.allowLargeResults*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns whether the job is enabled to create arbitrarily large results. If `true` the query is allowed to create large results at a slight cost in performance. the query is allowed to create large results at a slight cost in performance."
  syntax:
    content: "public Boolean allowLargeResults()"
    return:
      type: "java.lang.Boolean"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.dryRun()"
  id: "dryRun()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "dryRun()"
  nameWithType: "QueryJobConfiguration.dryRun()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.dryRun()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.dryRun*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns whether the job has to be dry run or not. If set, the job is not executed. A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn't a dry run."
  syntax:
    content: "public Boolean dryRun()"
    return:
      type: "java.lang.Boolean"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.equals(java.lang.Object)"
  id: "equals(java.lang.Object)"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "equals(Object obj)"
  nameWithType: "QueryJobConfiguration.equals(Object obj)"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.equals(Object obj)"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.equals*"
  overridden: "java.lang.Object.equals(java.lang.Object)"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public boolean equals(Object obj)"
    parameters:
    - id: "obj"
      type: "java.lang.Object"
    return:
      type: "boolean"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.flattenResults()"
  id: "flattenResults()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "flattenResults()"
  nameWithType: "QueryJobConfiguration.flattenResults()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.flattenResults()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.flattenResults*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns whether nested and repeated fields should be flattened. If set to `false` <xref uid=\"\" data-throw-if-not-resolved=\"false\">Builder#setAllowLargeResults(Boolean)</xref> must be `true`."
  syntax:
    content: "public Boolean flattenResults()"
    return:
      type: "java.lang.Boolean"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getClustering()"
  id: "getClustering()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "getClustering()"
  nameWithType: "QueryJobConfiguration.getClustering()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getClustering()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.getClustering*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the clustering specification for the destination table."
  syntax:
    content: "public Clustering getClustering()"
    return:
      type: "com.google.cloud.bigquery.Clustering"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getConnectionProperties()"
  id: "getConnectionProperties()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "getConnectionProperties()"
  nameWithType: "QueryJobConfiguration.getConnectionProperties()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getConnectionProperties()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.getConnectionProperties*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the connection properties for connection string with this job"
  syntax:
    content: "public List<ConnectionProperty> getConnectionProperties()"
    return:
      type: "java.util.List<com.google.cloud.bigquery.ConnectionProperty>"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getCreateDisposition()"
  id: "getCreateDisposition()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "getCreateDisposition()"
  nameWithType: "QueryJobConfiguration.getCreateDisposition()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getCreateDisposition()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.getCreateDisposition*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns whether the job is allowed to create new tables."
  syntax:
    content: "public JobInfo.CreateDisposition getCreateDisposition()"
    return:
      type: "com.google.cloud.bigquery.JobInfo.CreateDisposition"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getDefaultDataset()"
  id: "getDefaultDataset()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "getDefaultDataset()"
  nameWithType: "QueryJobConfiguration.getDefaultDataset()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getDefaultDataset()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.getDefaultDataset*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the default dataset. This dataset is used for all unqualified table names used in the query."
  syntax:
    content: "public DatasetId getDefaultDataset()"
    return:
      type: "com.google.cloud.bigquery.DatasetId"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getDestinationEncryptionConfiguration()"
  id: "getDestinationEncryptionConfiguration()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "getDestinationEncryptionConfiguration()"
  nameWithType: "QueryJobConfiguration.getDestinationEncryptionConfiguration()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getDestinationEncryptionConfiguration()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.getDestinationEncryptionConfiguration*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public EncryptionConfiguration getDestinationEncryptionConfiguration()"
    return:
      type: "com.google.cloud.bigquery.EncryptionConfiguration"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getDestinationTable()"
  id: "getDestinationTable()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "getDestinationTable()"
  nameWithType: "QueryJobConfiguration.getDestinationTable()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getDestinationTable()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.getDestinationTable*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the table where to put query results. If not provided a new table is created. This value is required if <xref uid=\"com.google.cloud.bigquery.QueryJobConfiguration.allowLargeResults()\" data-throw-if-not-resolved=\"false\">#allowLargeResults()</xref> is `true`."
  syntax:
    content: "public TableId getDestinationTable()"
    return:
      type: "com.google.cloud.bigquery.TableId"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getJobTimeoutMs()"
  id: "getJobTimeoutMs()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "getJobTimeoutMs()"
  nameWithType: "QueryJobConfiguration.getJobTimeoutMs()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getJobTimeoutMs()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.getJobTimeoutMs*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the timeout associated with this job"
  syntax:
    content: "public Long getJobTimeoutMs()"
    return:
      type: "java.lang.Long"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getLabels()"
  id: "getLabels()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "getLabels()"
  nameWithType: "QueryJobConfiguration.getLabels()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getLabels()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.getLabels*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the labels associated with this job"
  syntax:
    content: "public Map<String,String> getLabels()"
    return:
      type: "java.util.Map<java.lang.String,java.lang.String>"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getMaxResults()"
  id: "getMaxResults()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "getMaxResults()"
  nameWithType: "QueryJobConfiguration.getMaxResults()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getMaxResults()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.getMaxResults*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "This is only supported in the fast query path \\[Optional\\] The maximum number of rows of data to return per page of results. Setting this flag to a small value such as 1000 and then paging through results might improve reliability when the query result set is large. In addition to this limit, responses are also limited to 10 MB. By default, there is no maximum row count, and only the byte limit applies."
  syntax:
    content: "public Long getMaxResults()"
    return:
      type: "java.lang.Long"
      description: "value or <code>null</code> for none"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getMaximumBillingTier()"
  id: "getMaximumBillingTier()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "getMaximumBillingTier()"
  nameWithType: "QueryJobConfiguration.getMaximumBillingTier()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getMaximumBillingTier()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.getMaximumBillingTier*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the optional billing tier limit for this job."
  syntax:
    content: "public Integer getMaximumBillingTier()"
    return:
      type: "java.lang.Integer"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getMaximumBytesBilled()"
  id: "getMaximumBytesBilled()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "getMaximumBytesBilled()"
  nameWithType: "QueryJobConfiguration.getMaximumBytesBilled()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getMaximumBytesBilled()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.getMaximumBytesBilled*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the optional bytes billed limit for this job."
  syntax:
    content: "public Long getMaximumBytesBilled()"
    return:
      type: "java.lang.Long"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getNamedParameters()"
  id: "getNamedParameters()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "getNamedParameters()"
  nameWithType: "QueryJobConfiguration.getNamedParameters()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getNamedParameters()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.getNamedParameters*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the named query parameters to use for the query."
  syntax:
    content: "public Map<String,QueryParameterValue> getNamedParameters()"
    return:
      type: "java.util.Map<java.lang.String,com.google.cloud.bigquery.QueryParameterValue>"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getPositionalParameters()"
  id: "getPositionalParameters()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "getPositionalParameters()"
  nameWithType: "QueryJobConfiguration.getPositionalParameters()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getPositionalParameters()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.getPositionalParameters*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the positional query parameters to use for the query."
  syntax:
    content: "public List<QueryParameterValue> getPositionalParameters()"
    return:
      type: "java.util.List<com.google.cloud.bigquery.QueryParameterValue>"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getPriority()"
  id: "getPriority()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "getPriority()"
  nameWithType: "QueryJobConfiguration.getPriority()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getPriority()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.getPriority*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the query priority."
  syntax:
    content: "public QueryJobConfiguration.Priority getPriority()"
    return:
      type: "com.google.cloud.bigquery.QueryJobConfiguration.Priority"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getQuery()"
  id: "getQuery()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "getQuery()"
  nameWithType: "QueryJobConfiguration.getQuery()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getQuery()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.getQuery*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the Google BigQuery SQL query."
  syntax:
    content: "public String getQuery()"
    return:
      type: "java.lang.String"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getRangePartitioning()"
  id: "getRangePartitioning()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "getRangePartitioning()"
  nameWithType: "QueryJobConfiguration.getRangePartitioning()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getRangePartitioning()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.getRangePartitioning*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the range partitioning specification for the table"
  syntax:
    content: "public RangePartitioning getRangePartitioning()"
    return:
      type: "com.google.cloud.bigquery.RangePartitioning"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getSchemaUpdateOptions()"
  id: "getSchemaUpdateOptions()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "getSchemaUpdateOptions()"
  nameWithType: "QueryJobConfiguration.getSchemaUpdateOptions()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getSchemaUpdateOptions()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.getSchemaUpdateOptions*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "\\[Experimental\\] Returns options allowing the schema of the destination table to be updated as a side effect of the query job. Schema update options are supported in two cases: when writeDisposition is WRITE\\_APPEND; when writeDisposition is WRITE\\_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE\\_TRUNCATE will always overwrite the schema."
  syntax:
    content: "public List<JobInfo.SchemaUpdateOption> getSchemaUpdateOptions()"
    return:
      type: "java.util.List<com.google.cloud.bigquery.JobInfo.SchemaUpdateOption>"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getTableDefinitions()"
  id: "getTableDefinitions()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "getTableDefinitions()"
  nameWithType: "QueryJobConfiguration.getTableDefinitions()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getTableDefinitions()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.getTableDefinitions*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the external tables definitions. If querying external data sources outside of BigQuery, this value describes the data format, location and other properties of the data sources. By defining these properties, the data sources can be queried as if they were standard BigQuery tables."
  syntax:
    content: "public Map<String,ExternalTableDefinition> getTableDefinitions()"
    return:
      type: "java.util.Map<java.lang.String,com.google.cloud.bigquery.ExternalTableDefinition>"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getTimePartitioning()"
  id: "getTimePartitioning()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "getTimePartitioning()"
  nameWithType: "QueryJobConfiguration.getTimePartitioning()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getTimePartitioning()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.getTimePartitioning*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the time partitioning specification for the destination table."
  syntax:
    content: "public TimePartitioning getTimePartitioning()"
    return:
      type: "com.google.cloud.bigquery.TimePartitioning"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getUserDefinedFunctions()"
  id: "getUserDefinedFunctions()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "getUserDefinedFunctions()"
  nameWithType: "QueryJobConfiguration.getUserDefinedFunctions()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getUserDefinedFunctions()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.getUserDefinedFunctions*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns user defined function resources that can be used by this query. Function resources can either be defined inline (<xref uid=\"com.google.cloud.bigquery.UserDefinedFunction.Type.INLINE\" data-throw-if-not-resolved=\"false\">UserDefinedFunction.Type#INLINE</xref>) or loaded from a Google Cloud Storage URI (<xref uid=\"com.google.cloud.bigquery.UserDefinedFunction.Type.FROM_URI\" data-throw-if-not-resolved=\"false\">UserDefinedFunction.Type#FROM_URI</xref>."
  syntax:
    content: "public List<UserDefinedFunction> getUserDefinedFunctions()"
    return:
      type: "java.util.List<com.google.cloud.bigquery.UserDefinedFunction>"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getWriteDisposition()"
  id: "getWriteDisposition()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "getWriteDisposition()"
  nameWithType: "QueryJobConfiguration.getWriteDisposition()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getWriteDisposition()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.getWriteDisposition*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the action that should occur if the destination table already exists."
  syntax:
    content: "public JobInfo.WriteDisposition getWriteDisposition()"
    return:
      type: "com.google.cloud.bigquery.JobInfo.WriteDisposition"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.hashCode()"
  id: "hashCode()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "hashCode()"
  nameWithType: "QueryJobConfiguration.hashCode()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.hashCode()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.hashCode*"
  overridden: "java.lang.Object.hashCode()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public int hashCode()"
    return:
      type: "int"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.newBuilder(java.lang.String)"
  id: "newBuilder(java.lang.String)"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "newBuilder(String query)"
  nameWithType: "QueryJobConfiguration.newBuilder(String query)"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.newBuilder(String query)"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.newBuilder*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Creates a builder for a BigQuery Query Job given the query to be run."
  syntax:
    content: "public static QueryJobConfiguration.Builder newBuilder(String query)"
    parameters:
    - id: "query"
      type: "java.lang.String"
    return:
      type: "com.google.cloud.bigquery.QueryJobConfiguration.Builder"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.of(java.lang.String)"
  id: "of(java.lang.String)"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "of(String query)"
  nameWithType: "QueryJobConfiguration.of(String query)"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.of(String query)"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.of*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a BigQuery Copy Job for the given the query to be run. Job's id is chosen by the service."
  syntax:
    content: "public static QueryJobConfiguration of(String query)"
    parameters:
    - id: "query"
      type: "java.lang.String"
    return:
      type: "com.google.cloud.bigquery.QueryJobConfiguration"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.toBuilder()"
  id: "toBuilder()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "toBuilder()"
  nameWithType: "QueryJobConfiguration.toBuilder()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.toBuilder()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.toBuilder*"
  overridden: "com.google.cloud.bigquery.JobConfiguration.toBuilder()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a builder for the object."
  syntax:
    content: "public QueryJobConfiguration.Builder toBuilder()"
    return:
      type: "com.google.cloud.bigquery.QueryJobConfiguration.Builder"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.useLegacySql()"
  id: "useLegacySql()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "useLegacySql()"
  nameWithType: "QueryJobConfiguration.useLegacySql()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.useLegacySql()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.useLegacySql*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns whether to use BigQuery's legacy SQL dialect for this query. By default this property is set to `false`. If set to `false`, the query will use BigQuery's [Standard SQL][]. When set to `false`, the values of <xref uid=\"com.google.cloud.bigquery.QueryJobConfiguration.allowLargeResults()\" data-throw-if-not-resolved=\"false\">#allowLargeResults()</xref> and <xref uid=\"com.google.cloud.bigquery.QueryJobConfiguration.flattenResults()\" data-throw-if-not-resolved=\"false\">#flattenResults()</xref> are ignored; query will be run as if <xref uid=\"com.google.cloud.bigquery.QueryJobConfiguration.allowLargeResults()\" data-throw-if-not-resolved=\"false\">#allowLargeResults()</xref> is `true` and <xref uid=\"com.google.cloud.bigquery.QueryJobConfiguration.flattenResults()\" data-throw-if-not-resolved=\"false\">#flattenResults()</xref> is `false`. If set to `null` or `true`, legacy SQL dialect is used. This property is experimental and might be subject to change.\n\n\n[Standard SQL]: https://cloud.google.com/bigquery/sql-reference/"
  syntax:
    content: "public Boolean useLegacySql()"
    return:
      type: "java.lang.Boolean"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.useQueryCache()"
  id: "useQueryCache()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration"
  langs:
  - "java"
  name: "useQueryCache()"
  nameWithType: "QueryJobConfiguration.useQueryCache()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.useQueryCache()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.useQueryCache*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. Moreover, the query cache is only available when <xref uid=\"\" data-throw-if-not-resolved=\"false\">Builder#setDestinationTable(TableId)</xref> is not set."
  syntax:
    content: "public Boolean useQueryCache()"
    return:
      type: "java.lang.Boolean"
references:
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.Builder"
  name: "QueryJobConfiguration.Builder"
  nameWithType: "QueryJobConfiguration.Builder"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.Builder"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.QueryJobConfiguration*"
  name: "QueryJobConfiguration"
  nameWithType: "QueryJobConfiguration.QueryJobConfiguration"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.QueryJobConfiguration"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Boolean"
  spec.java:
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.allowLargeResults*"
  name: "allowLargeResults"
  nameWithType: "QueryJobConfiguration.allowLargeResults"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.allowLargeResults"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.JobInfo.CreateDisposition"
  name: "JobInfo.CreateDisposition"
  nameWithType: "JobInfo.CreateDisposition"
  fullName: "com.google.cloud.bigquery.JobInfo.CreateDisposition"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getCreateDisposition*"
  name: "getCreateDisposition"
  nameWithType: "QueryJobConfiguration.getCreateDisposition"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getCreateDisposition"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.DatasetId"
  name: "DatasetId"
  nameWithType: "DatasetId"
  fullName: "com.google.cloud.bigquery.DatasetId"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getDefaultDataset*"
  name: "getDefaultDataset"
  nameWithType: "QueryJobConfiguration.getDefaultDataset"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getDefaultDataset"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TableId"
  name: "TableId"
  nameWithType: "TableId"
  fullName: "com.google.cloud.bigquery.TableId"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getDestinationTable*"
  name: "getDestinationTable"
  nameWithType: "QueryJobConfiguration.getDestinationTable"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getDestinationTable"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.EncryptionConfiguration"
  name: "EncryptionConfiguration"
  nameWithType: "EncryptionConfiguration"
  fullName: "com.google.cloud.bigquery.EncryptionConfiguration"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getDestinationEncryptionConfiguration*"
  name: "getDestinationEncryptionConfiguration"
  nameWithType: "QueryJobConfiguration.getDestinationEncryptionConfiguration"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getDestinationEncryptionConfiguration"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.flattenResults*"
  name: "flattenResults"
  nameWithType: "QueryJobConfiguration.flattenResults"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.flattenResults"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.Priority"
  name: "QueryJobConfiguration.Priority"
  nameWithType: "QueryJobConfiguration.Priority"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.Priority"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getPriority*"
  name: "getPriority"
  nameWithType: "QueryJobConfiguration.getPriority"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getPriority"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getQuery*"
  name: "getQuery"
  nameWithType: "QueryJobConfiguration.getQuery"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getQuery"
  package: "com.google.cloud.bigquery"
- uid: "java.util.List<com.google.cloud.bigquery.QueryParameterValue>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "com.google.cloud.bigquery.QueryParameterValue"
    name: "QueryParameterValue"
    fullName: "com.google.cloud.bigquery.QueryParameterValue"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getPositionalParameters*"
  name: "getPositionalParameters"
  nameWithType: "QueryJobConfiguration.getPositionalParameters"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getPositionalParameters"
  package: "com.google.cloud.bigquery"
- uid: "java.util.Map<java.lang.String,com.google.cloud.bigquery.QueryParameterValue>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "com.google.cloud.bigquery.QueryParameterValue"
    name: "QueryParameterValue"
    fullName: "com.google.cloud.bigquery.QueryParameterValue"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getNamedParameters*"
  name: "getNamedParameters"
  nameWithType: "QueryJobConfiguration.getNamedParameters"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getNamedParameters"
  package: "com.google.cloud.bigquery"
- uid: "java.util.Map<java.lang.String,com.google.cloud.bigquery.ExternalTableDefinition>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "com.google.cloud.bigquery.ExternalTableDefinition"
    name: "ExternalTableDefinition"
    fullName: "com.google.cloud.bigquery.ExternalTableDefinition"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getTableDefinitions*"
  name: "getTableDefinitions"
  nameWithType: "QueryJobConfiguration.getTableDefinitions"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getTableDefinitions"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.useQueryCache*"
  name: "useQueryCache"
  nameWithType: "QueryJobConfiguration.useQueryCache"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.useQueryCache"
  package: "com.google.cloud.bigquery"
- uid: "java.util.List<com.google.cloud.bigquery.UserDefinedFunction>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "com.google.cloud.bigquery.UserDefinedFunction"
    name: "UserDefinedFunction"
    fullName: "com.google.cloud.bigquery.UserDefinedFunction"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getUserDefinedFunctions*"
  name: "getUserDefinedFunctions"
  nameWithType: "QueryJobConfiguration.getUserDefinedFunctions"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getUserDefinedFunctions"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.JobInfo.WriteDisposition"
  name: "JobInfo.WriteDisposition"
  nameWithType: "JobInfo.WriteDisposition"
  fullName: "com.google.cloud.bigquery.JobInfo.WriteDisposition"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getWriteDisposition*"
  name: "getWriteDisposition"
  nameWithType: "QueryJobConfiguration.getWriteDisposition"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getWriteDisposition"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.dryRun*"
  name: "dryRun"
  nameWithType: "QueryJobConfiguration.dryRun"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.dryRun"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.useLegacySql*"
  name: "useLegacySql"
  nameWithType: "QueryJobConfiguration.useLegacySql"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.useLegacySql"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Integer"
  spec.java:
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getMaximumBillingTier*"
  name: "getMaximumBillingTier"
  nameWithType: "QueryJobConfiguration.getMaximumBillingTier"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getMaximumBillingTier"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Long"
  spec.java:
  - uid: "java.lang.Long"
    name: "Long"
    fullName: "java.lang.Long"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getMaximumBytesBilled*"
  name: "getMaximumBytesBilled"
  nameWithType: "QueryJobConfiguration.getMaximumBytesBilled"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getMaximumBytesBilled"
  package: "com.google.cloud.bigquery"
- uid: "java.util.List<com.google.cloud.bigquery.JobInfo.SchemaUpdateOption>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "com.google.cloud.bigquery.JobInfo.SchemaUpdateOption"
    name: "SchemaUpdateOption"
    fullName: "com.google.cloud.bigquery.JobInfo.SchemaUpdateOption"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getSchemaUpdateOptions*"
  name: "getSchemaUpdateOptions"
  nameWithType: "QueryJobConfiguration.getSchemaUpdateOptions"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getSchemaUpdateOptions"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TimePartitioning"
  name: "TimePartitioning"
  nameWithType: "TimePartitioning"
  fullName: "com.google.cloud.bigquery.TimePartitioning"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getTimePartitioning*"
  name: "getTimePartitioning"
  nameWithType: "QueryJobConfiguration.getTimePartitioning"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getTimePartitioning"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Clustering"
  name: "Clustering"
  nameWithType: "Clustering"
  fullName: "com.google.cloud.bigquery.Clustering"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getClustering*"
  name: "getClustering"
  nameWithType: "QueryJobConfiguration.getClustering"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getClustering"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getJobTimeoutMs*"
  name: "getJobTimeoutMs"
  nameWithType: "QueryJobConfiguration.getJobTimeoutMs"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getJobTimeoutMs"
  package: "com.google.cloud.bigquery"
- uid: "java.util.Map<java.lang.String,java.lang.String>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getLabels*"
  name: "getLabels"
  nameWithType: "QueryJobConfiguration.getLabels"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getLabels"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.RangePartitioning"
  name: "RangePartitioning"
  nameWithType: "RangePartitioning"
  fullName: "com.google.cloud.bigquery.RangePartitioning"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getRangePartitioning*"
  name: "getRangePartitioning"
  nameWithType: "QueryJobConfiguration.getRangePartitioning"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getRangePartitioning"
  package: "com.google.cloud.bigquery"
- uid: "java.util.List<com.google.cloud.bigquery.ConnectionProperty>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "com.google.cloud.bigquery.ConnectionProperty"
    name: "ConnectionProperty"
    fullName: "com.google.cloud.bigquery.ConnectionProperty"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getConnectionProperties*"
  name: "getConnectionProperties"
  nameWithType: "QueryJobConfiguration.getConnectionProperties"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getConnectionProperties"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.getMaxResults*"
  name: "getMaxResults"
  nameWithType: "QueryJobConfiguration.getMaxResults"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.getMaxResults"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.toBuilder*"
  name: "toBuilder"
  nameWithType: "QueryJobConfiguration.toBuilder"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.toBuilder"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.equals*"
  name: "equals"
  nameWithType: "QueryJobConfiguration.equals"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.equals"
  package: "com.google.cloud.bigquery"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.hashCode*"
  name: "hashCode"
  nameWithType: "QueryJobConfiguration.hashCode"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.hashCode"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.newBuilder*"
  name: "newBuilder"
  nameWithType: "QueryJobConfiguration.newBuilder"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.newBuilder"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.of*"
  name: "of"
  nameWithType: "QueryJobConfiguration.of"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.of"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.JobConfiguration"
  name: "JobConfiguration"
  nameWithType: "JobConfiguration"
  fullName: "com.google.cloud.bigquery.JobConfiguration"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "com.google.cloud.bigquery.JobConfiguration.toBuilder()"
  name: "JobConfiguration.toBuilder()"
  nameWithType: "JobConfiguration.toBuilder()"
  fullName: "com.google.cloud.bigquery.JobConfiguration.toBuilder()"
- uid: "com.google.cloud.bigquery.JobConfiguration.toString()"
  name: "JobConfiguration.toString()"
  nameWithType: "JobConfiguration.toString()"
  fullName: "com.google.cloud.bigquery.JobConfiguration.toString()"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.JobConfiguration.getType()"
  name: "JobConfiguration.getType()"
  nameWithType: "JobConfiguration.getType()"
  fullName: "com.google.cloud.bigquery.JobConfiguration.getType()"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "com.google.cloud.bigquery.QueryParameterValue"
  name: "QueryParameterValue"
  nameWithType: "QueryParameterValue"
  fullName: "com.google.cloud.bigquery.QueryParameterValue"
- uid: "java.lang.String,com.google.cloud.bigquery.QueryParameterValue"
  name: "String,QueryParameterValue"
  nameWithType: "String,QueryParameterValue"
  fullName: "java.lang.String,com.google.cloud.bigquery.QueryParameterValue"
- uid: "java.util.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
- uid: "java.lang.String,com.google.cloud.bigquery.ExternalTableDefinition"
  name: "String,ExternalTableDefinition"
  nameWithType: "String,ExternalTableDefinition"
  fullName: "java.lang.String,com.google.cloud.bigquery.ExternalTableDefinition"
- uid: "com.google.cloud.bigquery.UserDefinedFunction"
  name: "UserDefinedFunction"
  nameWithType: "UserDefinedFunction"
  fullName: "com.google.cloud.bigquery.UserDefinedFunction"
- uid: "com.google.cloud.bigquery.JobInfo.SchemaUpdateOption"
  name: "JobInfo.SchemaUpdateOption"
  nameWithType: "JobInfo.SchemaUpdateOption"
  fullName: "com.google.cloud.bigquery.JobInfo.SchemaUpdateOption"
- uid: "java.lang.String,java.lang.String"
  name: "String,String"
  nameWithType: "String,String"
  fullName: "java.lang.String,java.lang.String"
- uid: "com.google.cloud.bigquery.ConnectionProperty"
  name: "ConnectionProperty"
  nameWithType: "ConnectionProperty"
  fullName: "com.google.cloud.bigquery.ConnectionProperty"
