### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.Priority"
  id: "Priority"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.QueryJobConfiguration.Priority.BATCH"
  - "com.google.cloud.bigquery.QueryJobConfiguration.Priority.INTERACTIVE"
  - "com.google.cloud.bigquery.QueryJobConfiguration.Priority.valueOf(java.lang.String)"
  - "com.google.cloud.bigquery.QueryJobConfiguration.Priority.values()"
  langs:
  - "java"
  name: "QueryJobConfiguration.Priority"
  nameWithType: "QueryJobConfiguration.Priority"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.Priority"
  type: "Enum"
  package: "com.google.cloud.bigquery"
  summary: "Priority levels for a query. If not specified the priority is assumed to be <xref uid=\"com.google.cloud.bigquery.QueryJobConfiguration.Priority.INTERACTIVE\" data-throw-if-not-resolved=\"false\">Priority#INTERACTIVE</xref>."
  syntax:
    content: "public enum QueryJobConfiguration.Priority extends Enum<QueryJobConfiguration.Priority>"
  inheritance:
  - "java.lang.Object"
  - "java.lang.Enum"
  inheritedMembers:
  - "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
  - "java.lang.Enum.clone()"
  - "java.lang.Enum.compareTo(E)"
  - "java.lang.Enum.equals(java.lang.Object)"
  - "java.lang.Enum.finalize()"
  - "java.lang.Enum.getDeclaringClass()"
  - "java.lang.Enum.hashCode()"
  - "java.lang.Enum.name()"
  - "java.lang.Enum.ordinal()"
  - "java.lang.Enum.toString()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.Priority.BATCH"
  id: "BATCH"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration.Priority"
  langs:
  - "java"
  name: "BATCH"
  nameWithType: "QueryJobConfiguration.Priority.BATCH"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.Priority.BATCH"
  type: "Field"
  package: "com.google.cloud.bigquery"
  summary: "Query is queued and started as soon as idle resources are available, usually within a few minutes. If the query hasn't started within 3 hours, its priority is changed to <xref uid=\"com.google.cloud.bigquery.QueryJobConfiguration.Priority.INTERACTIVE\" data-throw-if-not-resolved=\"false\">Priority#INTERACTIVE</xref>."
  syntax:
    content: "public static final QueryJobConfiguration.Priority BATCH"
    return:
      type: "com.google.cloud.bigquery.QueryJobConfiguration.Priority"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.Priority.INTERACTIVE"
  id: "INTERACTIVE"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration.Priority"
  langs:
  - "java"
  name: "INTERACTIVE"
  nameWithType: "QueryJobConfiguration.Priority.INTERACTIVE"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.Priority.INTERACTIVE"
  type: "Field"
  package: "com.google.cloud.bigquery"
  summary: "Query is executed as soon as possible and count towards the [concurrent rate limit and the daily rate limit][].\n\n\n[concurrent rate limit and the daily rate limit]: https://cloud.google.com/bigquery/quota-policy"
  syntax:
    content: "public static final QueryJobConfiguration.Priority INTERACTIVE"
    return:
      type: "com.google.cloud.bigquery.QueryJobConfiguration.Priority"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.Priority.Priority()"
  id: "Priority()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration.Priority"
  langs:
  - "java"
  name: "Priority()"
  nameWithType: "QueryJobConfiguration.Priority.Priority()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.Priority.Priority()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.Priority.Priority*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "private Priority()"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.Priority.valueOf(java.lang.String)"
  id: "valueOf(java.lang.String)"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration.Priority"
  langs:
  - "java"
  name: "valueOf(String name)"
  nameWithType: "QueryJobConfiguration.Priority.valueOf(String name)"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.Priority.valueOf(String name)"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.Priority.valueOf*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public static QueryJobConfiguration.Priority valueOf(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
    return:
      type: "com.google.cloud.bigquery.QueryJobConfiguration.Priority"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.Priority.values()"
  id: "values()"
  parent: "com.google.cloud.bigquery.QueryJobConfiguration.Priority"
  langs:
  - "java"
  name: "values()"
  nameWithType: "QueryJobConfiguration.Priority.values()"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.Priority.values()"
  overload: "com.google.cloud.bigquery.QueryJobConfiguration.Priority.values*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public static QueryJobConfiguration.Priority[] values()"
    return:
      type: "com.google.cloud.bigquery.QueryJobConfiguration.Priority[]"
references:
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.Priority.Priority*"
  name: "Priority"
  nameWithType: "QueryJobConfiguration.Priority.Priority"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.Priority.Priority"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.Priority[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.QueryJobConfiguration.Priority"
    name: "Priority"
    fullName: "com.google.cloud.bigquery.QueryJobConfiguration.Priority"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.Priority.values*"
  name: "values"
  nameWithType: "QueryJobConfiguration.Priority.values"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.Priority.values"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.QueryJobConfiguration.Priority.valueOf*"
  name: "valueOf"
  nameWithType: "QueryJobConfiguration.Priority.valueOf"
  fullName: "com.google.cloud.bigquery.QueryJobConfiguration.Priority.valueOf"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Enum<com.google.cloud.bigquery.QueryJobConfiguration.Priority>"
  name: "Enum<QueryJobConfiguration.Priority>"
  nameWithType: "Enum<QueryJobConfiguration.Priority>"
  fullName: "java.lang.Enum<com.google.cloud.bigquery.QueryJobConfiguration.Priority>"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Enum.toString()"
  name: "Enum.toString()"
  nameWithType: "Enum.toString()"
  fullName: "java.lang.Enum.toString()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Enum.clone()"
  name: "Enum.clone()"
  nameWithType: "Enum.clone()"
  fullName: "java.lang.Enum.clone()"
- uid: "java.lang.Enum.finalize()"
  name: "Enum.finalize()"
  nameWithType: "Enum.finalize()"
  fullName: "java.lang.Enum.finalize()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Enum.compareTo(E)"
  name: "Enum.compareTo(E)"
  nameWithType: "Enum.compareTo(E)"
  fullName: "java.lang.Enum.compareTo(E)"
- uid: "java.lang.Enum.name()"
  name: "Enum.name()"
  nameWithType: "Enum.name()"
  fullName: "java.lang.Enum.name()"
- uid: "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
  name: "Enum.<T>valueOf(Class<T>,String)"
  nameWithType: "Enum.<T>valueOf(Class<T>,String)"
  fullName: "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Enum.getDeclaringClass()"
  name: "Enum.getDeclaringClass()"
  nameWithType: "Enum.getDeclaringClass()"
  fullName: "java.lang.Enum.getDeclaringClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Enum.ordinal()"
  name: "Enum.ordinal()"
  nameWithType: "Enum.ordinal()"
  fullName: "java.lang.Enum.ordinal()"
- uid: "java.lang.Enum.hashCode()"
  name: "Enum.hashCode()"
  nameWithType: "Enum.hashCode()"
  fullName: "java.lang.Enum.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Enum.equals(java.lang.Object)"
  name: "Enum.equals(Object)"
  nameWithType: "Enum.equals(Object)"
  fullName: "java.lang.Enum.equals(java.lang.Object)"
- uid: "java.lang.Enum"
  name: "Enum"
  nameWithType: "Enum"
  fullName: "java.lang.Enum"
- uid: "java.lang.Enum."
  name: "Enum."
  nameWithType: "Enum."
  fullName: "java.lang.Enum."
- uid: "T>,java.lang.String)"
  name: "T>,String)"
  nameWithType: "T>,String)"
  fullName: "T>,java.lang.String)"
- uid: "T>valueOf(java.lang.Class"
  name: "T>valueOf(Class"
  nameWithType: "T>valueOf(Class"
  fullName: "T>valueOf(java.lang.Class"
