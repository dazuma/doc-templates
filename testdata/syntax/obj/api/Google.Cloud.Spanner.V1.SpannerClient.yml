### YamlMime:ManagedReference
items:
- uid: Google.Cloud.Spanner.V1.SpannerClient
  commentId: T:Google.Cloud.Spanner.V1.SpannerClient
  id: SpannerClient
  parent: Google.Cloud.Spanner.V1
  children:
  - Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessions(Google.Cloud.Spanner.Common.V1.DatabaseName,System.Int32,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessions(Google.Cloud.Spanner.V1.BatchCreateSessionsRequest,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessions(System.String,System.Int32,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync(Google.Cloud.Spanner.Common.V1.DatabaseName,System.Int32,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync(Google.Cloud.Spanner.Common.V1.DatabaseName,System.Int32,System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync(Google.Cloud.Spanner.V1.BatchCreateSessionsRequest,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync(Google.Cloud.Spanner.V1.BatchCreateSessionsRequest,System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync(System.String,System.Int32,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync(System.String,System.Int32,System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.BeginTransaction(Google.Cloud.Spanner.V1.BeginTransactionRequest,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.BeginTransaction(Google.Cloud.Spanner.V1.SessionName,Google.Cloud.Spanner.V1.TransactionOptions,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.BeginTransaction(System.String,Google.Cloud.Spanner.V1.TransactionOptions,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync(Google.Cloud.Spanner.V1.BeginTransactionRequest,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync(Google.Cloud.Spanner.V1.BeginTransactionRequest,System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync(Google.Cloud.Spanner.V1.SessionName,Google.Cloud.Spanner.V1.TransactionOptions,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync(Google.Cloud.Spanner.V1.SessionName,Google.Cloud.Spanner.V1.TransactionOptions,System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync(System.String,Google.Cloud.Spanner.V1.TransactionOptions,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync(System.String,Google.Cloud.Spanner.V1.TransactionOptions,System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.Commit(Google.Cloud.Spanner.V1.CommitRequest,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.Commit(Google.Cloud.Spanner.V1.SessionName,Google.Cloud.Spanner.V1.TransactionOptions,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.Commit(Google.Cloud.Spanner.V1.SessionName,Google.Protobuf.ByteString,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.Commit(System.String,Google.Cloud.Spanner.V1.TransactionOptions,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.Commit(System.String,Google.Protobuf.ByteString,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(Google.Cloud.Spanner.V1.CommitRequest,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(Google.Cloud.Spanner.V1.CommitRequest,System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(Google.Cloud.Spanner.V1.SessionName,Google.Cloud.Spanner.V1.TransactionOptions,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(Google.Cloud.Spanner.V1.SessionName,Google.Cloud.Spanner.V1.TransactionOptions,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(Google.Cloud.Spanner.V1.SessionName,Google.Protobuf.ByteString,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(Google.Cloud.Spanner.V1.SessionName,Google.Protobuf.ByteString,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(System.String,Google.Cloud.Spanner.V1.TransactionOptions,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(System.String,Google.Cloud.Spanner.V1.TransactionOptions,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(System.String,Google.Protobuf.ByteString,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(System.String,Google.Protobuf.ByteString,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.Create
  - Google.Cloud.Spanner.V1.SpannerClient.CreateAsync(System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.CreateSession(Google.Cloud.Spanner.Common.V1.DatabaseName,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.CreateSession(Google.Cloud.Spanner.V1.CreateSessionRequest,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.CreateSession(System.String,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync(Google.Cloud.Spanner.Common.V1.DatabaseName,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync(Google.Cloud.Spanner.Common.V1.DatabaseName,System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync(Google.Cloud.Spanner.V1.CreateSessionRequest,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync(Google.Cloud.Spanner.V1.CreateSessionRequest,System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync(System.String,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync(System.String,System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.DefaultEndpoint
  - Google.Cloud.Spanner.V1.SpannerClient.DefaultScopes
  - Google.Cloud.Spanner.V1.SpannerClient.DeleteSession(Google.Cloud.Spanner.V1.DeleteSessionRequest,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.DeleteSession(Google.Cloud.Spanner.V1.SessionName,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.DeleteSession(System.String,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync(Google.Cloud.Spanner.V1.DeleteSessionRequest,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync(Google.Cloud.Spanner.V1.DeleteSessionRequest,System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync(Google.Cloud.Spanner.V1.SessionName,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync(Google.Cloud.Spanner.V1.SessionName,System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync(System.String,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync(System.String,System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.ExecuteBatchDml(Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.ExecuteBatchDmlAsync(Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.ExecuteBatchDmlAsync(Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest,System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.ExecuteSql(Google.Cloud.Spanner.V1.ExecuteSqlRequest,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.ExecuteSqlAsync(Google.Cloud.Spanner.V1.ExecuteSqlRequest,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.ExecuteSqlAsync(Google.Cloud.Spanner.V1.ExecuteSqlRequest,System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.ExecuteStreamingSql(Google.Cloud.Spanner.V1.ExecuteSqlRequest,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.GetSession(Google.Cloud.Spanner.V1.GetSessionRequest,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.GetSession(Google.Cloud.Spanner.V1.SessionName,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.GetSession(System.String,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync(Google.Cloud.Spanner.V1.GetSessionRequest,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync(Google.Cloud.Spanner.V1.GetSessionRequest,System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync(Google.Cloud.Spanner.V1.SessionName,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync(Google.Cloud.Spanner.V1.SessionName,System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync(System.String,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync(System.String,System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.GrpcClient
  - Google.Cloud.Spanner.V1.SpannerClient.ListSessions(Google.Cloud.Spanner.Common.V1.DatabaseName,System.String,System.Nullable{System.Int32},Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.ListSessions(Google.Cloud.Spanner.V1.ListSessionsRequest,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.ListSessions(System.String,System.String,System.Nullable{System.Int32},Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.ListSessionsAsync(Google.Cloud.Spanner.Common.V1.DatabaseName,System.String,System.Nullable{System.Int32},Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.ListSessionsAsync(Google.Cloud.Spanner.V1.ListSessionsRequest,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.ListSessionsAsync(System.String,System.String,System.Nullable{System.Int32},Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.PartitionQuery(Google.Cloud.Spanner.V1.PartitionQueryRequest,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.PartitionQueryAsync(Google.Cloud.Spanner.V1.PartitionQueryRequest,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.PartitionQueryAsync(Google.Cloud.Spanner.V1.PartitionQueryRequest,System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.PartitionRead(Google.Cloud.Spanner.V1.PartitionReadRequest,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.PartitionReadAsync(Google.Cloud.Spanner.V1.PartitionReadRequest,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.PartitionReadAsync(Google.Cloud.Spanner.V1.PartitionReadRequest,System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.Read(Google.Cloud.Spanner.V1.ReadRequest,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.ReadAsync(Google.Cloud.Spanner.V1.ReadRequest,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.ReadAsync(Google.Cloud.Spanner.V1.ReadRequest,System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.Rollback(Google.Cloud.Spanner.V1.RollbackRequest,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.Rollback(Google.Cloud.Spanner.V1.SessionName,Google.Protobuf.ByteString,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.Rollback(System.String,Google.Protobuf.ByteString,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync(Google.Cloud.Spanner.V1.RollbackRequest,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync(Google.Cloud.Spanner.V1.RollbackRequest,System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync(Google.Cloud.Spanner.V1.SessionName,Google.Protobuf.ByteString,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync(Google.Cloud.Spanner.V1.SessionName,Google.Protobuf.ByteString,System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync(System.String,Google.Protobuf.ByteString,Google.Api.Gax.Grpc.CallSettings)
  - Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync(System.String,Google.Protobuf.ByteString,System.Threading.CancellationToken)
  - Google.Cloud.Spanner.V1.SpannerClient.Settings
  - Google.Cloud.Spanner.V1.SpannerClient.ShutdownDefaultChannelsAsync
  - Google.Cloud.Spanner.V1.SpannerClient.StreamingRead(Google.Cloud.Spanner.V1.ReadRequest,Google.Api.Gax.Grpc.CallSettings)
  langs:
  - csharp
  - vb
  name: SpannerClient
  nameWithType: SpannerClient
  fullName: Google.Cloud.Spanner.V1.SpannerClient
  type: Class
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.Streaming.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: SpannerClient
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.Streaming.cs
    startLine: 22
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: Spanner client wrapper, for convenient use.
  remarks: "\nCloud Spanner API\n\nThe Cloud Spanner API can be used to manage sessions and execute\ntransactions on data stored in Cloud Spanner databases.\n"
  example: []
  syntax:
    content: public abstract class SpannerClient
    content.vb: Public MustInherit Class SpannerClient
  inheritance:
  - System.Object
  derivedClasses:
  - Google.Cloud.Spanner.V1.SpannerClientImpl
  - Google.Cloud.Spanner.V1.SpannerClientImpl
  inheritedMembers:
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Google.Cloud.Spanner.V1.SpannerClient.DefaultEndpoint
  commentId: P:Google.Cloud.Spanner.V1.SpannerClient.DefaultEndpoint
  id: DefaultEndpoint
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: DefaultEndpoint
  nameWithType: SpannerClient.DefaultEndpoint
  fullName: Google.Cloud.Spanner.V1.SpannerClient.DefaultEndpoint
  type: Property
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: DefaultEndpoint
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 362
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nThe default endpoint for the Spanner service, which is a host of &quot;spanner.googleapis.com&quot; and a port of 443.\n"
  example: []
  syntax:
    content: public static string DefaultEndpoint { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Shared ReadOnly Property DefaultEndpoint As String
  overload: Google.Cloud.Spanner.V1.SpannerClient.DefaultEndpoint*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Google.Cloud.Spanner.V1.SpannerClient.DefaultScopes
  commentId: P:Google.Cloud.Spanner.V1.SpannerClient.DefaultScopes
  id: DefaultScopes
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: DefaultScopes
  nameWithType: SpannerClient.DefaultScopes
  fullName: Google.Cloud.Spanner.V1.SpannerClient.DefaultScopes
  type: Property
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: DefaultScopes
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 372
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: The default Spanner scopes.
  remarks: "\nThe default Spanner scopes are:\n<ul><li>https://www.googleapis.com/auth/cloud-platform</li><li>https://www.googleapis.com/auth/spanner.data</li></ul>\n"
  example: []
  syntax:
    content: public static IReadOnlyList<string> DefaultScopes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyList{System.String}
    content.vb: Public Shared ReadOnly Property DefaultScopes As IReadOnlyList(Of String)
  overload: Google.Cloud.Spanner.V1.SpannerClient.DefaultScopes*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Google.Cloud.Spanner.V1.SpannerClient.CreateAsync(System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.CreateAsync(System.Threading.CancellationToken)
  id: CreateAsync(System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: CreateAsync(CancellationToken)
  nameWithType: SpannerClient.CreateAsync(CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.CreateAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: CreateAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 388
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nAsynchronously creates a <xref href=\"Google.Cloud.Spanner.V1.SpannerClient\" data-throw-if-not-resolved=\"false\"></xref> using the default credentials, endpoint and settings. \nTo specify custom credentials or other settings, use <xref href=\"Google.Cloud.Spanner.V1.SpannerClientBuilder\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Task<SpannerClient> CreateAsync(CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nThe <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to use while creating the client.\n"
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.SpannerClient}
      description: The task representing the created <xref href="Google.Cloud.Spanner.V1.SpannerClient" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function CreateAsync(cancellationToken As CancellationToken = Nothing) As Task(Of SpannerClient)
  overload: Google.Cloud.Spanner.V1.SpannerClient.CreateAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Google.Cloud.Spanner.V1.SpannerClient.Create
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.Create
  id: Create
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: Create()
  nameWithType: SpannerClient.Create()
  fullName: Google.Cloud.Spanner.V1.SpannerClient.Create()
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: Create
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 396
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nSynchronously creates a <xref href=\"Google.Cloud.Spanner.V1.SpannerClient\" data-throw-if-not-resolved=\"false\"></xref> using the default credentials, endpoint and settings. To\nspecify custom credentials or other settings, use <xref href=\"Google.Cloud.Spanner.V1.SpannerClientBuilder\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static SpannerClient Create()
    return:
      type: Google.Cloud.Spanner.V1.SpannerClient
      description: The created <xref href="Google.Cloud.Spanner.V1.SpannerClient" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function Create As SpannerClient
  overload: Google.Cloud.Spanner.V1.SpannerClient.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Google.Cloud.Spanner.V1.SpannerClient.ShutdownDefaultChannelsAsync
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.ShutdownDefaultChannelsAsync
  id: ShutdownDefaultChannelsAsync
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: ShutdownDefaultChannelsAsync()
  nameWithType: SpannerClient.ShutdownDefaultChannelsAsync()
  fullName: Google.Cloud.Spanner.V1.SpannerClient.ShutdownDefaultChannelsAsync()
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: ShutdownDefaultChannelsAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 429
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nShuts down any channels automatically created by <xref href=\"Google.Cloud.Spanner.V1.SpannerClient.Create\" data-throw-if-not-resolved=\"false\"></xref> and\n<xref href=\"Google.Cloud.Spanner.V1.SpannerClient.CreateAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>. Channels which weren&apos;t automatically created are not\naffected.\n"
  remarks: "\nAfter calling this method, further calls to <xref href=\"Google.Cloud.Spanner.V1.SpannerClient.Create\" data-throw-if-not-resolved=\"false\"></xref> and\n<xref href=\"Google.Cloud.Spanner.V1.SpannerClient.CreateAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> will create new channels, which could in turn be shut down\nby another call to this method.\n"
  example: []
  syntax:
    content: public static Task ShutdownDefaultChannelsAsync()
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous shutdown operation.
    content.vb: Public Shared Function ShutdownDefaultChannelsAsync As Task
  overload: Google.Cloud.Spanner.V1.SpannerClient.ShutdownDefaultChannelsAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Google.Cloud.Spanner.V1.SpannerClient.GrpcClient
  commentId: P:Google.Cloud.Spanner.V1.SpannerClient.GrpcClient
  id: GrpcClient
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: GrpcClient
  nameWithType: SpannerClient.GrpcClient
  fullName: Google.Cloud.Spanner.V1.SpannerClient.GrpcClient
  type: Property
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: GrpcClient
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 432
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: The underlying gRPC Spanner client
  example: []
  syntax:
    content: public virtual Spanner.SpannerClient GrpcClient { get; }
    parameters: []
    return:
      type: Google.Cloud.Spanner.V1.Spanner.SpannerClient
    content.vb: Public Overridable ReadOnly Property GrpcClient As Spanner.SpannerClient
  overload: Google.Cloud.Spanner.V1.SpannerClient.GrpcClient*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Google.Cloud.Spanner.V1.SpannerClient.CreateSession(Google.Cloud.Spanner.V1.CreateSessionRequest,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.CreateSession(Google.Cloud.Spanner.V1.CreateSessionRequest,Google.Api.Gax.Grpc.CallSettings)
  id: CreateSession(Google.Cloud.Spanner.V1.CreateSessionRequest,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: CreateSession(CreateSessionRequest, CallSettings)
  nameWithType: SpannerClient.CreateSession(CreateSessionRequest, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.CreateSession(Google.Cloud.Spanner.V1.CreateSessionRequest, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: CreateSession
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 458
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCreates a new session. A session can be used to perform\ntransactions that read and/or modify data in a Cloud Spanner database.\nSessions are meant to be reused for many consecutive\ntransactions.\n\nSessions can only execute one transaction at a time. To execute\nmultiple concurrent read-write/write-only transactions, create\nmultiple sessions. Note that standalone reads and queries use a\ntransaction internally, and count toward the one transaction\nlimit.\n\nActive sessions use additional server resources, so it is a good idea to\ndelete idle and unneeded sessions.\nAside from explicit deletes, Cloud Spanner may delete sessions for which no\noperations are sent for more than an hour. If a session is deleted,\nrequests to it return `NOT_FOUND`.\n\nIdle sessions can be kept alive by sending a trivial SQL query\nperiodically, e.g., `&quot;SELECT 1&quot;`.\n"
  example: []
  syntax:
    content: public virtual Session CreateSession(CreateSessionRequest request, CallSettings callSettings = null)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.CreateSessionRequest
      description: The request object containing all of the parameters for the API call.
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Cloud.Spanner.V1.Session
      description: The RPC response.
    content.vb: Public Overridable Function CreateSession(request As CreateSessionRequest, callSettings As CallSettings = Nothing) As Session
  overload: Google.Cloud.Spanner.V1.SpannerClient.CreateSession*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync(Google.Cloud.Spanner.V1.CreateSessionRequest,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync(Google.Cloud.Spanner.V1.CreateSessionRequest,Google.Api.Gax.Grpc.CallSettings)
  id: CreateSessionAsync(Google.Cloud.Spanner.V1.CreateSessionRequest,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: CreateSessionAsync(CreateSessionRequest, CallSettings)
  nameWithType: SpannerClient.CreateSessionAsync(CreateSessionRequest, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync(Google.Cloud.Spanner.V1.CreateSessionRequest, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: CreateSessionAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 485
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCreates a new session. A session can be used to perform\ntransactions that read and/or modify data in a Cloud Spanner database.\nSessions are meant to be reused for many consecutive\ntransactions.\n\nSessions can only execute one transaction at a time. To execute\nmultiple concurrent read-write/write-only transactions, create\nmultiple sessions. Note that standalone reads and queries use a\ntransaction internally, and count toward the one transaction\nlimit.\n\nActive sessions use additional server resources, so it is a good idea to\ndelete idle and unneeded sessions.\nAside from explicit deletes, Cloud Spanner may delete sessions for which no\noperations are sent for more than an hour. If a session is deleted,\nrequests to it return `NOT_FOUND`.\n\nIdle sessions can be kept alive by sending a trivial SQL query\nperiodically, e.g., `&quot;SELECT 1&quot;`.\n"
  example: []
  syntax:
    content: public virtual Task<Session> CreateSessionAsync(CreateSessionRequest request, CallSettings callSettings = null)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.CreateSessionRequest
      description: The request object containing all of the parameters for the API call.
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.Session}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function CreateSessionAsync(request As CreateSessionRequest, callSettings As CallSettings = Nothing) As Task(Of Session)
  overload: Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync(Google.Cloud.Spanner.V1.CreateSessionRequest,System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync(Google.Cloud.Spanner.V1.CreateSessionRequest,System.Threading.CancellationToken)
  id: CreateSessionAsync(Google.Cloud.Spanner.V1.CreateSessionRequest,System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: CreateSessionAsync(CreateSessionRequest, CancellationToken)
  nameWithType: SpannerClient.CreateSessionAsync(CreateSessionRequest, CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync(Google.Cloud.Spanner.V1.CreateSessionRequest, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: CreateSessionAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 512
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCreates a new session. A session can be used to perform\ntransactions that read and/or modify data in a Cloud Spanner database.\nSessions are meant to be reused for many consecutive\ntransactions.\n\nSessions can only execute one transaction at a time. To execute\nmultiple concurrent read-write/write-only transactions, create\nmultiple sessions. Note that standalone reads and queries use a\ntransaction internally, and count toward the one transaction\nlimit.\n\nActive sessions use additional server resources, so it is a good idea to\ndelete idle and unneeded sessions.\nAside from explicit deletes, Cloud Spanner may delete sessions for which no\noperations are sent for more than an hour. If a session is deleted,\nrequests to it return `NOT_FOUND`.\n\nIdle sessions can be kept alive by sending a trivial SQL query\nperiodically, e.g., `&quot;SELECT 1&quot;`.\n"
  example: []
  syntax:
    content: public virtual Task<Session> CreateSessionAsync(CreateSessionRequest request, CancellationToken cancellationToken)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.CreateSessionRequest
      description: The request object containing all of the parameters for the API call.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to use for this RPC.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.Session}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function CreateSessionAsync(request As CreateSessionRequest, cancellationToken As CancellationToken) As Task(Of Session)
  overload: Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.CreateSession(System.String,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.CreateSession(System.String,Google.Api.Gax.Grpc.CallSettings)
  id: CreateSession(System.String,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: CreateSession(String, CallSettings)
  nameWithType: SpannerClient.CreateSession(String, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.CreateSession(System.String, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: CreateSession
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 541
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCreates a new session. A session can be used to perform\ntransactions that read and/or modify data in a Cloud Spanner database.\nSessions are meant to be reused for many consecutive\ntransactions.\n\nSessions can only execute one transaction at a time. To execute\nmultiple concurrent read-write/write-only transactions, create\nmultiple sessions. Note that standalone reads and queries use a\ntransaction internally, and count toward the one transaction\nlimit.\n\nActive sessions use additional server resources, so it is a good idea to\ndelete idle and unneeded sessions.\nAside from explicit deletes, Cloud Spanner may delete sessions for which no\noperations are sent for more than an hour. If a session is deleted,\nrequests to it return `NOT_FOUND`.\n\nIdle sessions can be kept alive by sending a trivial SQL query\nperiodically, e.g., `&quot;SELECT 1&quot;`.\n"
  example: []
  syntax:
    content: public virtual Session CreateSession(string database, CallSettings callSettings = null)
    parameters:
    - id: database
      type: System.String
      description: "\nRequired. The database in which the new session is created.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Cloud.Spanner.V1.Session
      description: The RPC response.
    content.vb: Public Overridable Function CreateSession(database As String, callSettings As CallSettings = Nothing) As Session
  overload: Google.Cloud.Spanner.V1.SpannerClient.CreateSession*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync(System.String,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync(System.String,Google.Api.Gax.Grpc.CallSettings)
  id: CreateSessionAsync(System.String,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: CreateSessionAsync(String, CallSettings)
  nameWithType: SpannerClient.CreateSessionAsync(String, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync(System.String, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: CreateSessionAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 573
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCreates a new session. A session can be used to perform\ntransactions that read and/or modify data in a Cloud Spanner database.\nSessions are meant to be reused for many consecutive\ntransactions.\n\nSessions can only execute one transaction at a time. To execute\nmultiple concurrent read-write/write-only transactions, create\nmultiple sessions. Note that standalone reads and queries use a\ntransaction internally, and count toward the one transaction\nlimit.\n\nActive sessions use additional server resources, so it is a good idea to\ndelete idle and unneeded sessions.\nAside from explicit deletes, Cloud Spanner may delete sessions for which no\noperations are sent for more than an hour. If a session is deleted,\nrequests to it return `NOT_FOUND`.\n\nIdle sessions can be kept alive by sending a trivial SQL query\nperiodically, e.g., `&quot;SELECT 1&quot;`.\n"
  example: []
  syntax:
    content: public virtual Task<Session> CreateSessionAsync(string database, CallSettings callSettings = null)
    parameters:
    - id: database
      type: System.String
      description: "\nRequired. The database in which the new session is created.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.Session}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function CreateSessionAsync(database As String, callSettings As CallSettings = Nothing) As Task(Of Session)
  overload: Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync(System.String,System.Threading.CancellationToken)
  id: CreateSessionAsync(System.String,System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: CreateSessionAsync(String, CancellationToken)
  nameWithType: SpannerClient.CreateSessionAsync(String, CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: CreateSessionAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 605
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCreates a new session. A session can be used to perform\ntransactions that read and/or modify data in a Cloud Spanner database.\nSessions are meant to be reused for many consecutive\ntransactions.\n\nSessions can only execute one transaction at a time. To execute\nmultiple concurrent read-write/write-only transactions, create\nmultiple sessions. Note that standalone reads and queries use a\ntransaction internally, and count toward the one transaction\nlimit.\n\nActive sessions use additional server resources, so it is a good idea to\ndelete idle and unneeded sessions.\nAside from explicit deletes, Cloud Spanner may delete sessions for which no\noperations are sent for more than an hour. If a session is deleted,\nrequests to it return `NOT_FOUND`.\n\nIdle sessions can be kept alive by sending a trivial SQL query\nperiodically, e.g., `&quot;SELECT 1&quot;`.\n"
  example: []
  syntax:
    content: public virtual Task<Session> CreateSessionAsync(string database, CancellationToken cancellationToken)
    parameters:
    - id: database
      type: System.String
      description: "\nRequired. The database in which the new session is created.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to use for this RPC.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.Session}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function CreateSessionAsync(database As String, cancellationToken As CancellationToken) As Task(Of Session)
  overload: Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.CreateSession(Google.Cloud.Spanner.Common.V1.DatabaseName,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.CreateSession(Google.Cloud.Spanner.Common.V1.DatabaseName,Google.Api.Gax.Grpc.CallSettings)
  id: CreateSession(Google.Cloud.Spanner.Common.V1.DatabaseName,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: CreateSession(DatabaseName, CallSettings)
  nameWithType: SpannerClient.CreateSession(DatabaseName, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.CreateSession(Google.Cloud.Spanner.Common.V1.DatabaseName, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: CreateSession
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 634
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCreates a new session. A session can be used to perform\ntransactions that read and/or modify data in a Cloud Spanner database.\nSessions are meant to be reused for many consecutive\ntransactions.\n\nSessions can only execute one transaction at a time. To execute\nmultiple concurrent read-write/write-only transactions, create\nmultiple sessions. Note that standalone reads and queries use a\ntransaction internally, and count toward the one transaction\nlimit.\n\nActive sessions use additional server resources, so it is a good idea to\ndelete idle and unneeded sessions.\nAside from explicit deletes, Cloud Spanner may delete sessions for which no\noperations are sent for more than an hour. If a session is deleted,\nrequests to it return `NOT_FOUND`.\n\nIdle sessions can be kept alive by sending a trivial SQL query\nperiodically, e.g., `&quot;SELECT 1&quot;`.\n"
  example: []
  syntax:
    content: public virtual Session CreateSession(DatabaseName database, CallSettings callSettings = null)
    parameters:
    - id: database
      type: Google.Cloud.Spanner.Common.V1.DatabaseName
      description: "\nRequired. The database in which the new session is created.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Cloud.Spanner.V1.Session
      description: The RPC response.
    content.vb: Public Overridable Function CreateSession(database As DatabaseName, callSettings As CallSettings = Nothing) As Session
  overload: Google.Cloud.Spanner.V1.SpannerClient.CreateSession*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync(Google.Cloud.Spanner.Common.V1.DatabaseName,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync(Google.Cloud.Spanner.Common.V1.DatabaseName,Google.Api.Gax.Grpc.CallSettings)
  id: CreateSessionAsync(Google.Cloud.Spanner.Common.V1.DatabaseName,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: CreateSessionAsync(DatabaseName, CallSettings)
  nameWithType: SpannerClient.CreateSessionAsync(DatabaseName, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync(Google.Cloud.Spanner.Common.V1.DatabaseName, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: CreateSessionAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 666
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCreates a new session. A session can be used to perform\ntransactions that read and/or modify data in a Cloud Spanner database.\nSessions are meant to be reused for many consecutive\ntransactions.\n\nSessions can only execute one transaction at a time. To execute\nmultiple concurrent read-write/write-only transactions, create\nmultiple sessions. Note that standalone reads and queries use a\ntransaction internally, and count toward the one transaction\nlimit.\n\nActive sessions use additional server resources, so it is a good idea to\ndelete idle and unneeded sessions.\nAside from explicit deletes, Cloud Spanner may delete sessions for which no\noperations are sent for more than an hour. If a session is deleted,\nrequests to it return `NOT_FOUND`.\n\nIdle sessions can be kept alive by sending a trivial SQL query\nperiodically, e.g., `&quot;SELECT 1&quot;`.\n"
  example: []
  syntax:
    content: public virtual Task<Session> CreateSessionAsync(DatabaseName database, CallSettings callSettings = null)
    parameters:
    - id: database
      type: Google.Cloud.Spanner.Common.V1.DatabaseName
      description: "\nRequired. The database in which the new session is created.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.Session}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function CreateSessionAsync(database As DatabaseName, callSettings As CallSettings = Nothing) As Task(Of Session)
  overload: Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync(Google.Cloud.Spanner.Common.V1.DatabaseName,System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync(Google.Cloud.Spanner.Common.V1.DatabaseName,System.Threading.CancellationToken)
  id: CreateSessionAsync(Google.Cloud.Spanner.Common.V1.DatabaseName,System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: CreateSessionAsync(DatabaseName, CancellationToken)
  nameWithType: SpannerClient.CreateSessionAsync(DatabaseName, CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync(Google.Cloud.Spanner.Common.V1.DatabaseName, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: CreateSessionAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 698
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCreates a new session. A session can be used to perform\ntransactions that read and/or modify data in a Cloud Spanner database.\nSessions are meant to be reused for many consecutive\ntransactions.\n\nSessions can only execute one transaction at a time. To execute\nmultiple concurrent read-write/write-only transactions, create\nmultiple sessions. Note that standalone reads and queries use a\ntransaction internally, and count toward the one transaction\nlimit.\n\nActive sessions use additional server resources, so it is a good idea to\ndelete idle and unneeded sessions.\nAside from explicit deletes, Cloud Spanner may delete sessions for which no\noperations are sent for more than an hour. If a session is deleted,\nrequests to it return `NOT_FOUND`.\n\nIdle sessions can be kept alive by sending a trivial SQL query\nperiodically, e.g., `&quot;SELECT 1&quot;`.\n"
  example: []
  syntax:
    content: public virtual Task<Session> CreateSessionAsync(DatabaseName database, CancellationToken cancellationToken)
    parameters:
    - id: database
      type: Google.Cloud.Spanner.Common.V1.DatabaseName
      description: "\nRequired. The database in which the new session is created.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to use for this RPC.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.Session}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function CreateSessionAsync(database As DatabaseName, cancellationToken As CancellationToken) As Task(Of Session)
  overload: Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessions(Google.Cloud.Spanner.V1.BatchCreateSessionsRequest,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessions(Google.Cloud.Spanner.V1.BatchCreateSessionsRequest,Google.Api.Gax.Grpc.CallSettings)
  id: BatchCreateSessions(Google.Cloud.Spanner.V1.BatchCreateSessionsRequest,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: BatchCreateSessions(BatchCreateSessionsRequest, CallSettings)
  nameWithType: SpannerClient.BatchCreateSessions(BatchCreateSessionsRequest, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessions(Google.Cloud.Spanner.V1.BatchCreateSessionsRequest, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: BatchCreateSessions
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 710
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCreates multiple new sessions.\n\nThis API can be used to initialize a session cache on the clients.\nSee https://goo.gl/TgSFN2 for best practices on session cache management.\n"
  example: []
  syntax:
    content: public virtual BatchCreateSessionsResponse BatchCreateSessions(BatchCreateSessionsRequest request, CallSettings callSettings = null)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.BatchCreateSessionsRequest
      description: The request object containing all of the parameters for the API call.
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Cloud.Spanner.V1.BatchCreateSessionsResponse
      description: The RPC response.
    content.vb: Public Overridable Function BatchCreateSessions(request As BatchCreateSessionsRequest, callSettings As CallSettings = Nothing) As BatchCreateSessionsResponse
  overload: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessions*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync(Google.Cloud.Spanner.V1.BatchCreateSessionsRequest,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync(Google.Cloud.Spanner.V1.BatchCreateSessionsRequest,Google.Api.Gax.Grpc.CallSettings)
  id: BatchCreateSessionsAsync(Google.Cloud.Spanner.V1.BatchCreateSessionsRequest,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: BatchCreateSessionsAsync(BatchCreateSessionsRequest, CallSettings)
  nameWithType: SpannerClient.BatchCreateSessionsAsync(BatchCreateSessionsRequest, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync(Google.Cloud.Spanner.V1.BatchCreateSessionsRequest, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: BatchCreateSessionsAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 722
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCreates multiple new sessions.\n\nThis API can be used to initialize a session cache on the clients.\nSee https://goo.gl/TgSFN2 for best practices on session cache management.\n"
  example: []
  syntax:
    content: public virtual Task<BatchCreateSessionsResponse> BatchCreateSessionsAsync(BatchCreateSessionsRequest request, CallSettings callSettings = null)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.BatchCreateSessionsRequest
      description: The request object containing all of the parameters for the API call.
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.BatchCreateSessionsResponse}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function BatchCreateSessionsAsync(request As BatchCreateSessionsRequest, callSettings As CallSettings = Nothing) As Task(Of BatchCreateSessionsResponse)
  overload: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync(Google.Cloud.Spanner.V1.BatchCreateSessionsRequest,System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync(Google.Cloud.Spanner.V1.BatchCreateSessionsRequest,System.Threading.CancellationToken)
  id: BatchCreateSessionsAsync(Google.Cloud.Spanner.V1.BatchCreateSessionsRequest,System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: BatchCreateSessionsAsync(BatchCreateSessionsRequest, CancellationToken)
  nameWithType: SpannerClient.BatchCreateSessionsAsync(BatchCreateSessionsRequest, CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync(Google.Cloud.Spanner.V1.BatchCreateSessionsRequest, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: BatchCreateSessionsAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 734
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCreates multiple new sessions.\n\nThis API can be used to initialize a session cache on the clients.\nSee https://goo.gl/TgSFN2 for best practices on session cache management.\n"
  example: []
  syntax:
    content: public virtual Task<BatchCreateSessionsResponse> BatchCreateSessionsAsync(BatchCreateSessionsRequest request, CancellationToken cancellationToken)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.BatchCreateSessionsRequest
      description: The request object containing all of the parameters for the API call.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to use for this RPC.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.BatchCreateSessionsResponse}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function BatchCreateSessionsAsync(request As BatchCreateSessionsRequest, cancellationToken As CancellationToken) As Task(Of BatchCreateSessionsResponse)
  overload: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessions(System.String,System.Int32,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessions(System.String,System.Int32,Google.Api.Gax.Grpc.CallSettings)
  id: BatchCreateSessions(System.String,System.Int32,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: BatchCreateSessions(String, Int32, CallSettings)
  nameWithType: SpannerClient.BatchCreateSessions(String, Int32, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessions(System.String, System.Int32, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: BatchCreateSessions
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 755
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCreates multiple new sessions.\n\nThis API can be used to initialize a session cache on the clients.\nSee https://goo.gl/TgSFN2 for best practices on session cache management.\n"
  example: []
  syntax:
    content: public virtual BatchCreateSessionsResponse BatchCreateSessions(string database, int sessionCount, CallSettings callSettings = null)
    parameters:
    - id: database
      type: System.String
      description: "\nRequired. The database in which the new sessions are created.\n"
    - id: sessionCount
      type: System.Int32
      description: "\nRequired. The number of sessions to be created in this batch call.\nThe API may return fewer than the requested number of sessions. If a\nspecific number of sessions are desired, the client can make additional\ncalls to BatchCreateSessions (adjusting\n[session_count][google.spanner.v1.BatchCreateSessionsRequest.session_count] as necessary).\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Cloud.Spanner.V1.BatchCreateSessionsResponse
      description: The RPC response.
    content.vb: Public Overridable Function BatchCreateSessions(database As String, sessionCount As Integer, callSettings As CallSettings = Nothing) As BatchCreateSessionsResponse
  overload: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessions*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync(System.String,System.Int32,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync(System.String,System.Int32,Google.Api.Gax.Grpc.CallSettings)
  id: BatchCreateSessionsAsync(System.String,System.Int32,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: BatchCreateSessionsAsync(String, Int32, CallSettings)
  nameWithType: SpannerClient.BatchCreateSessionsAsync(String, Int32, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync(System.String, System.Int32, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: BatchCreateSessionsAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 780
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCreates multiple new sessions.\n\nThis API can be used to initialize a session cache on the clients.\nSee https://goo.gl/TgSFN2 for best practices on session cache management.\n"
  example: []
  syntax:
    content: public virtual Task<BatchCreateSessionsResponse> BatchCreateSessionsAsync(string database, int sessionCount, CallSettings callSettings = null)
    parameters:
    - id: database
      type: System.String
      description: "\nRequired. The database in which the new sessions are created.\n"
    - id: sessionCount
      type: System.Int32
      description: "\nRequired. The number of sessions to be created in this batch call.\nThe API may return fewer than the requested number of sessions. If a\nspecific number of sessions are desired, the client can make additional\ncalls to BatchCreateSessions (adjusting\n[session_count][google.spanner.v1.BatchCreateSessionsRequest.session_count] as necessary).\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.BatchCreateSessionsResponse}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function BatchCreateSessionsAsync(database As String, sessionCount As Integer, callSettings As CallSettings = Nothing) As Task(Of BatchCreateSessionsResponse)
  overload: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync(System.String,System.Int32,System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync(System.String,System.Int32,System.Threading.CancellationToken)
  id: BatchCreateSessionsAsync(System.String,System.Int32,System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: BatchCreateSessionsAsync(String, Int32, CancellationToken)
  nameWithType: SpannerClient.BatchCreateSessionsAsync(String, Int32, CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync(System.String, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: BatchCreateSessionsAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 805
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCreates multiple new sessions.\n\nThis API can be used to initialize a session cache on the clients.\nSee https://goo.gl/TgSFN2 for best practices on session cache management.\n"
  example: []
  syntax:
    content: public virtual Task<BatchCreateSessionsResponse> BatchCreateSessionsAsync(string database, int sessionCount, CancellationToken cancellationToken)
    parameters:
    - id: database
      type: System.String
      description: "\nRequired. The database in which the new sessions are created.\n"
    - id: sessionCount
      type: System.Int32
      description: "\nRequired. The number of sessions to be created in this batch call.\nThe API may return fewer than the requested number of sessions. If a\nspecific number of sessions are desired, the client can make additional\ncalls to BatchCreateSessions (adjusting\n[session_count][google.spanner.v1.BatchCreateSessionsRequest.session_count] as necessary).\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to use for this RPC.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.BatchCreateSessionsResponse}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function BatchCreateSessionsAsync(database As String, sessionCount As Integer, cancellationToken As CancellationToken) As Task(Of BatchCreateSessionsResponse)
  overload: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessions(Google.Cloud.Spanner.Common.V1.DatabaseName,System.Int32,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessions(Google.Cloud.Spanner.Common.V1.DatabaseName,System.Int32,Google.Api.Gax.Grpc.CallSettings)
  id: BatchCreateSessions(Google.Cloud.Spanner.Common.V1.DatabaseName,System.Int32,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: BatchCreateSessions(DatabaseName, Int32, CallSettings)
  nameWithType: SpannerClient.BatchCreateSessions(DatabaseName, Int32, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessions(Google.Cloud.Spanner.Common.V1.DatabaseName, System.Int32, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: BatchCreateSessions
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 826
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCreates multiple new sessions.\n\nThis API can be used to initialize a session cache on the clients.\nSee https://goo.gl/TgSFN2 for best practices on session cache management.\n"
  example: []
  syntax:
    content: public virtual BatchCreateSessionsResponse BatchCreateSessions(DatabaseName database, int sessionCount, CallSettings callSettings = null)
    parameters:
    - id: database
      type: Google.Cloud.Spanner.Common.V1.DatabaseName
      description: "\nRequired. The database in which the new sessions are created.\n"
    - id: sessionCount
      type: System.Int32
      description: "\nRequired. The number of sessions to be created in this batch call.\nThe API may return fewer than the requested number of sessions. If a\nspecific number of sessions are desired, the client can make additional\ncalls to BatchCreateSessions (adjusting\n[session_count][google.spanner.v1.BatchCreateSessionsRequest.session_count] as necessary).\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Cloud.Spanner.V1.BatchCreateSessionsResponse
      description: The RPC response.
    content.vb: Public Overridable Function BatchCreateSessions(database As DatabaseName, sessionCount As Integer, callSettings As CallSettings = Nothing) As BatchCreateSessionsResponse
  overload: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessions*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync(Google.Cloud.Spanner.Common.V1.DatabaseName,System.Int32,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync(Google.Cloud.Spanner.Common.V1.DatabaseName,System.Int32,Google.Api.Gax.Grpc.CallSettings)
  id: BatchCreateSessionsAsync(Google.Cloud.Spanner.Common.V1.DatabaseName,System.Int32,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: BatchCreateSessionsAsync(DatabaseName, Int32, CallSettings)
  nameWithType: SpannerClient.BatchCreateSessionsAsync(DatabaseName, Int32, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync(Google.Cloud.Spanner.Common.V1.DatabaseName, System.Int32, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: BatchCreateSessionsAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 851
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCreates multiple new sessions.\n\nThis API can be used to initialize a session cache on the clients.\nSee https://goo.gl/TgSFN2 for best practices on session cache management.\n"
  example: []
  syntax:
    content: public virtual Task<BatchCreateSessionsResponse> BatchCreateSessionsAsync(DatabaseName database, int sessionCount, CallSettings callSettings = null)
    parameters:
    - id: database
      type: Google.Cloud.Spanner.Common.V1.DatabaseName
      description: "\nRequired. The database in which the new sessions are created.\n"
    - id: sessionCount
      type: System.Int32
      description: "\nRequired. The number of sessions to be created in this batch call.\nThe API may return fewer than the requested number of sessions. If a\nspecific number of sessions are desired, the client can make additional\ncalls to BatchCreateSessions (adjusting\n[session_count][google.spanner.v1.BatchCreateSessionsRequest.session_count] as necessary).\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.BatchCreateSessionsResponse}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function BatchCreateSessionsAsync(database As DatabaseName, sessionCount As Integer, callSettings As CallSettings = Nothing) As Task(Of BatchCreateSessionsResponse)
  overload: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync(Google.Cloud.Spanner.Common.V1.DatabaseName,System.Int32,System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync(Google.Cloud.Spanner.Common.V1.DatabaseName,System.Int32,System.Threading.CancellationToken)
  id: BatchCreateSessionsAsync(Google.Cloud.Spanner.Common.V1.DatabaseName,System.Int32,System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: BatchCreateSessionsAsync(DatabaseName, Int32, CancellationToken)
  nameWithType: SpannerClient.BatchCreateSessionsAsync(DatabaseName, Int32, CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync(Google.Cloud.Spanner.Common.V1.DatabaseName, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: BatchCreateSessionsAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 876
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCreates multiple new sessions.\n\nThis API can be used to initialize a session cache on the clients.\nSee https://goo.gl/TgSFN2 for best practices on session cache management.\n"
  example: []
  syntax:
    content: public virtual Task<BatchCreateSessionsResponse> BatchCreateSessionsAsync(DatabaseName database, int sessionCount, CancellationToken cancellationToken)
    parameters:
    - id: database
      type: Google.Cloud.Spanner.Common.V1.DatabaseName
      description: "\nRequired. The database in which the new sessions are created.\n"
    - id: sessionCount
      type: System.Int32
      description: "\nRequired. The number of sessions to be created in this batch call.\nThe API may return fewer than the requested number of sessions. If a\nspecific number of sessions are desired, the client can make additional\ncalls to BatchCreateSessions (adjusting\n[session_count][google.spanner.v1.BatchCreateSessionsRequest.session_count] as necessary).\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to use for this RPC.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.BatchCreateSessionsResponse}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function BatchCreateSessionsAsync(database As DatabaseName, sessionCount As Integer, cancellationToken As CancellationToken) As Task(Of BatchCreateSessionsResponse)
  overload: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.GetSession(Google.Cloud.Spanner.V1.GetSessionRequest,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.GetSession(Google.Cloud.Spanner.V1.GetSessionRequest,Google.Api.Gax.Grpc.CallSettings)
  id: GetSession(Google.Cloud.Spanner.V1.GetSessionRequest,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: GetSession(GetSessionRequest, CallSettings)
  nameWithType: SpannerClient.GetSession(GetSessionRequest, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.GetSession(Google.Cloud.Spanner.V1.GetSessionRequest, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: GetSession
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 887
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nGets a session. Returns `NOT_FOUND` if the session does not exist.\nThis is mainly useful for determining whether a session is still\nalive.\n"
  example: []
  syntax:
    content: public virtual Session GetSession(GetSessionRequest request, CallSettings callSettings = null)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.GetSessionRequest
      description: The request object containing all of the parameters for the API call.
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Cloud.Spanner.V1.Session
      description: The RPC response.
    content.vb: Public Overridable Function GetSession(request As GetSessionRequest, callSettings As CallSettings = Nothing) As Session
  overload: Google.Cloud.Spanner.V1.SpannerClient.GetSession*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync(Google.Cloud.Spanner.V1.GetSessionRequest,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync(Google.Cloud.Spanner.V1.GetSessionRequest,Google.Api.Gax.Grpc.CallSettings)
  id: GetSessionAsync(Google.Cloud.Spanner.V1.GetSessionRequest,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: GetSessionAsync(GetSessionRequest, CallSettings)
  nameWithType: SpannerClient.GetSessionAsync(GetSessionRequest, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync(Google.Cloud.Spanner.V1.GetSessionRequest, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: GetSessionAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 898
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nGets a session. Returns `NOT_FOUND` if the session does not exist.\nThis is mainly useful for determining whether a session is still\nalive.\n"
  example: []
  syntax:
    content: public virtual Task<Session> GetSessionAsync(GetSessionRequest request, CallSettings callSettings = null)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.GetSessionRequest
      description: The request object containing all of the parameters for the API call.
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.Session}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function GetSessionAsync(request As GetSessionRequest, callSettings As CallSettings = Nothing) As Task(Of Session)
  overload: Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync(Google.Cloud.Spanner.V1.GetSessionRequest,System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync(Google.Cloud.Spanner.V1.GetSessionRequest,System.Threading.CancellationToken)
  id: GetSessionAsync(Google.Cloud.Spanner.V1.GetSessionRequest,System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: GetSessionAsync(GetSessionRequest, CancellationToken)
  nameWithType: SpannerClient.GetSessionAsync(GetSessionRequest, CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync(Google.Cloud.Spanner.V1.GetSessionRequest, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: GetSessionAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 909
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nGets a session. Returns `NOT_FOUND` if the session does not exist.\nThis is mainly useful for determining whether a session is still\nalive.\n"
  example: []
  syntax:
    content: public virtual Task<Session> GetSessionAsync(GetSessionRequest request, CancellationToken cancellationToken)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.GetSessionRequest
      description: The request object containing all of the parameters for the API call.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to use for this RPC.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.Session}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function GetSessionAsync(request As GetSessionRequest, cancellationToken As CancellationToken) As Task(Of Session)
  overload: Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.GetSession(System.String,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.GetSession(System.String,Google.Api.Gax.Grpc.CallSettings)
  id: GetSession(System.String,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: GetSession(String, CallSettings)
  nameWithType: SpannerClient.GetSession(String, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.GetSession(System.String, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: GetSession
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 922
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nGets a session. Returns `NOT_FOUND` if the session does not exist.\nThis is mainly useful for determining whether a session is still\nalive.\n"
  example: []
  syntax:
    content: public virtual Session GetSession(string name, CallSettings callSettings = null)
    parameters:
    - id: name
      type: System.String
      description: "\nRequired. The name of the session to retrieve.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Cloud.Spanner.V1.Session
      description: The RPC response.
    content.vb: Public Overridable Function GetSession(name As String, callSettings As CallSettings = Nothing) As Session
  overload: Google.Cloud.Spanner.V1.SpannerClient.GetSession*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync(System.String,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync(System.String,Google.Api.Gax.Grpc.CallSettings)
  id: GetSessionAsync(System.String,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: GetSessionAsync(String, CallSettings)
  nameWithType: SpannerClient.GetSessionAsync(String, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync(System.String, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: GetSessionAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 938
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nGets a session. Returns `NOT_FOUND` if the session does not exist.\nThis is mainly useful for determining whether a session is still\nalive.\n"
  example: []
  syntax:
    content: public virtual Task<Session> GetSessionAsync(string name, CallSettings callSettings = null)
    parameters:
    - id: name
      type: System.String
      description: "\nRequired. The name of the session to retrieve.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.Session}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function GetSessionAsync(name As String, callSettings As CallSettings = Nothing) As Task(Of Session)
  overload: Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync(System.String,System.Threading.CancellationToken)
  id: GetSessionAsync(System.String,System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: GetSessionAsync(String, CancellationToken)
  nameWithType: SpannerClient.GetSessionAsync(String, CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: GetSessionAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 954
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nGets a session. Returns `NOT_FOUND` if the session does not exist.\nThis is mainly useful for determining whether a session is still\nalive.\n"
  example: []
  syntax:
    content: public virtual Task<Session> GetSessionAsync(string name, CancellationToken cancellationToken)
    parameters:
    - id: name
      type: System.String
      description: "\nRequired. The name of the session to retrieve.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to use for this RPC.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.Session}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function GetSessionAsync(name As String, cancellationToken As CancellationToken) As Task(Of Session)
  overload: Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.GetSession(Google.Cloud.Spanner.V1.SessionName,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.GetSession(Google.Cloud.Spanner.V1.SessionName,Google.Api.Gax.Grpc.CallSettings)
  id: GetSession(Google.Cloud.Spanner.V1.SessionName,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: GetSession(SessionName, CallSettings)
  nameWithType: SpannerClient.GetSession(SessionName, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.GetSession(Google.Cloud.Spanner.V1.SessionName, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: GetSession
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 967
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nGets a session. Returns `NOT_FOUND` if the session does not exist.\nThis is mainly useful for determining whether a session is still\nalive.\n"
  example: []
  syntax:
    content: public virtual Session GetSession(SessionName name, CallSettings callSettings = null)
    parameters:
    - id: name
      type: Google.Cloud.Spanner.V1.SessionName
      description: "\nRequired. The name of the session to retrieve.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Cloud.Spanner.V1.Session
      description: The RPC response.
    content.vb: Public Overridable Function GetSession(name As SessionName, callSettings As CallSettings = Nothing) As Session
  overload: Google.Cloud.Spanner.V1.SpannerClient.GetSession*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync(Google.Cloud.Spanner.V1.SessionName,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync(Google.Cloud.Spanner.V1.SessionName,Google.Api.Gax.Grpc.CallSettings)
  id: GetSessionAsync(Google.Cloud.Spanner.V1.SessionName,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: GetSessionAsync(SessionName, CallSettings)
  nameWithType: SpannerClient.GetSessionAsync(SessionName, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync(Google.Cloud.Spanner.V1.SessionName, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: GetSessionAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 983
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nGets a session. Returns `NOT_FOUND` if the session does not exist.\nThis is mainly useful for determining whether a session is still\nalive.\n"
  example: []
  syntax:
    content: public virtual Task<Session> GetSessionAsync(SessionName name, CallSettings callSettings = null)
    parameters:
    - id: name
      type: Google.Cloud.Spanner.V1.SessionName
      description: "\nRequired. The name of the session to retrieve.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.Session}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function GetSessionAsync(name As SessionName, callSettings As CallSettings = Nothing) As Task(Of Session)
  overload: Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync(Google.Cloud.Spanner.V1.SessionName,System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync(Google.Cloud.Spanner.V1.SessionName,System.Threading.CancellationToken)
  id: GetSessionAsync(Google.Cloud.Spanner.V1.SessionName,System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: GetSessionAsync(SessionName, CancellationToken)
  nameWithType: SpannerClient.GetSessionAsync(SessionName, CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync(Google.Cloud.Spanner.V1.SessionName, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: GetSessionAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 999
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nGets a session. Returns `NOT_FOUND` if the session does not exist.\nThis is mainly useful for determining whether a session is still\nalive.\n"
  example: []
  syntax:
    content: public virtual Task<Session> GetSessionAsync(SessionName name, CancellationToken cancellationToken)
    parameters:
    - id: name
      type: Google.Cloud.Spanner.V1.SessionName
      description: "\nRequired. The name of the session to retrieve.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to use for this RPC.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.Session}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function GetSessionAsync(name As SessionName, cancellationToken As CancellationToken) As Task(Of Session)
  overload: Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.ListSessions(Google.Cloud.Spanner.V1.ListSessionsRequest,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.ListSessions(Google.Cloud.Spanner.V1.ListSessionsRequest,Google.Api.Gax.Grpc.CallSettings)
  id: ListSessions(Google.Cloud.Spanner.V1.ListSessionsRequest,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: ListSessions(ListSessionsRequest, CallSettings)
  nameWithType: SpannerClient.ListSessions(ListSessionsRequest, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.ListSessions(Google.Cloud.Spanner.V1.ListSessionsRequest, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: ListSessions
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1008
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nLists all sessions in a given database.\n"
  example: []
  syntax:
    content: public virtual PagedEnumerable<ListSessionsResponse, Session> ListSessions(ListSessionsRequest request, CallSettings callSettings = null)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.ListSessionsRequest
      description: The request object containing all of the parameters for the API call.
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Api.Gax.PagedEnumerable{Google.Cloud.Spanner.V1.ListSessionsResponse,Google.Cloud.Spanner.V1.Session}
      description: A pageable sequence of <xref href="Google.Cloud.Spanner.V1.Session" data-throw-if-not-resolved="false"></xref> resources.
    content.vb: Public Overridable Function ListSessions(request As ListSessionsRequest, callSettings As CallSettings = Nothing) As PagedEnumerable(Of ListSessionsResponse, Session)
  overload: Google.Cloud.Spanner.V1.SpannerClient.ListSessions*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.ListSessionsAsync(Google.Cloud.Spanner.V1.ListSessionsRequest,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.ListSessionsAsync(Google.Cloud.Spanner.V1.ListSessionsRequest,Google.Api.Gax.Grpc.CallSettings)
  id: ListSessionsAsync(Google.Cloud.Spanner.V1.ListSessionsRequest,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: ListSessionsAsync(ListSessionsRequest, CallSettings)
  nameWithType: SpannerClient.ListSessionsAsync(ListSessionsRequest, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.ListSessionsAsync(Google.Cloud.Spanner.V1.ListSessionsRequest, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: ListSessionsAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1017
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nLists all sessions in a given database.\n"
  example: []
  syntax:
    content: public virtual PagedAsyncEnumerable<ListSessionsResponse, Session> ListSessionsAsync(ListSessionsRequest request, CallSettings callSettings = null)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.ListSessionsRequest
      description: The request object containing all of the parameters for the API call.
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Api.Gax.PagedAsyncEnumerable{Google.Cloud.Spanner.V1.ListSessionsResponse,Google.Cloud.Spanner.V1.Session}
      description: A pageable asynchronous sequence of <xref href="Google.Cloud.Spanner.V1.Session" data-throw-if-not-resolved="false"></xref> resources.
    content.vb: Public Overridable Function ListSessionsAsync(request As ListSessionsRequest, callSettings As CallSettings = Nothing) As PagedAsyncEnumerable(Of ListSessionsResponse, Session)
  overload: Google.Cloud.Spanner.V1.SpannerClient.ListSessionsAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.ListSessions(System.String,System.String,System.Nullable{System.Int32},Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.ListSessions(System.String,System.String,System.Nullable{System.Int32},Google.Api.Gax.Grpc.CallSettings)
  id: ListSessions(System.String,System.String,System.Nullable{System.Int32},Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: ListSessions(String, String, Nullable<Int32>, CallSettings)
  nameWithType: SpannerClient.ListSessions(String, String, Nullable<Int32>, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.ListSessions(System.String, System.String, System.Nullable<System.Int32>, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: ListSessions
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1036
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nLists all sessions in a given database.\n"
  example: []
  syntax:
    content: public virtual PagedEnumerable<ListSessionsResponse, Session> ListSessions(string database, string pageToken = null, int? pageSize = default(int? ), CallSettings callSettings = null)
    parameters:
    - id: database
      type: System.String
      description: "\nRequired. The database in which to list sessions.\n"
    - id: pageToken
      type: System.String
      description: "\nThe token returned from the previous request. A value of <code>null</code> or an empty string retrieves the first\npage.\n"
    - id: pageSize
      type: System.Nullable{System.Int32}
      description: "\nThe size of page to request. The response will not be larger than this, but may be smaller. A value of\n<code>null</code> or <code>0</code> uses a server-defined page size.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Api.Gax.PagedEnumerable{Google.Cloud.Spanner.V1.ListSessionsResponse,Google.Cloud.Spanner.V1.Session}
      description: A pageable sequence of <xref href="Google.Cloud.Spanner.V1.Session" data-throw-if-not-resolved="false"></xref> resources.
    content.vb: Public Overridable Function ListSessions(database As String, pageToken As String = Nothing, pageSize As Integer? = Nothing, callSettings As CallSettings = Nothing) As PagedEnumerable(Of ListSessionsResponse, Session)
  overload: Google.Cloud.Spanner.V1.SpannerClient.ListSessions*
  nameWithType.vb: SpannerClient.ListSessions(String, String, Nullable(Of Int32), CallSettings)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Google.Cloud.Spanner.V1.SpannerClient.ListSessions(System.String, System.String, System.Nullable(Of System.Int32), Google.Api.Gax.Grpc.CallSettings)
  name.vb: ListSessions(String, String, Nullable(Of Int32), CallSettings)
- uid: Google.Cloud.Spanner.V1.SpannerClient.ListSessionsAsync(System.String,System.String,System.Nullable{System.Int32},Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.ListSessionsAsync(System.String,System.String,System.Nullable{System.Int32},Google.Api.Gax.Grpc.CallSettings)
  id: ListSessionsAsync(System.String,System.String,System.Nullable{System.Int32},Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: ListSessionsAsync(String, String, Nullable<Int32>, CallSettings)
  nameWithType: SpannerClient.ListSessionsAsync(String, String, Nullable<Int32>, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.ListSessionsAsync(System.String, System.String, System.Nullable<System.Int32>, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: ListSessionsAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1060
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nLists all sessions in a given database.\n"
  example: []
  syntax:
    content: public virtual PagedAsyncEnumerable<ListSessionsResponse, Session> ListSessionsAsync(string database, string pageToken = null, int? pageSize = default(int? ), CallSettings callSettings = null)
    parameters:
    - id: database
      type: System.String
      description: "\nRequired. The database in which to list sessions.\n"
    - id: pageToken
      type: System.String
      description: "\nThe token returned from the previous request. A value of <code>null</code> or an empty string retrieves the first\npage.\n"
    - id: pageSize
      type: System.Nullable{System.Int32}
      description: "\nThe size of page to request. The response will not be larger than this, but may be smaller. A value of\n<code>null</code> or <code>0</code> uses a server-defined page size.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Api.Gax.PagedAsyncEnumerable{Google.Cloud.Spanner.V1.ListSessionsResponse,Google.Cloud.Spanner.V1.Session}
      description: A pageable asynchronous sequence of <xref href="Google.Cloud.Spanner.V1.Session" data-throw-if-not-resolved="false"></xref> resources.
    content.vb: Public Overridable Function ListSessionsAsync(database As String, pageToken As String = Nothing, pageSize As Integer? = Nothing, callSettings As CallSettings = Nothing) As PagedAsyncEnumerable(Of ListSessionsResponse, Session)
  overload: Google.Cloud.Spanner.V1.SpannerClient.ListSessionsAsync*
  nameWithType.vb: SpannerClient.ListSessionsAsync(String, String, Nullable(Of Int32), CallSettings)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Google.Cloud.Spanner.V1.SpannerClient.ListSessionsAsync(System.String, System.String, System.Nullable(Of System.Int32), Google.Api.Gax.Grpc.CallSettings)
  name.vb: ListSessionsAsync(String, String, Nullable(Of Int32), CallSettings)
- uid: Google.Cloud.Spanner.V1.SpannerClient.ListSessions(Google.Cloud.Spanner.Common.V1.DatabaseName,System.String,System.Nullable{System.Int32},Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.ListSessions(Google.Cloud.Spanner.Common.V1.DatabaseName,System.String,System.Nullable{System.Int32},Google.Api.Gax.Grpc.CallSettings)
  id: ListSessions(Google.Cloud.Spanner.Common.V1.DatabaseName,System.String,System.Nullable{System.Int32},Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: ListSessions(DatabaseName, String, Nullable<Int32>, CallSettings)
  nameWithType: SpannerClient.ListSessions(DatabaseName, String, Nullable<Int32>, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.ListSessions(Google.Cloud.Spanner.Common.V1.DatabaseName, System.String, System.Nullable<System.Int32>, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: ListSessions
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1084
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nLists all sessions in a given database.\n"
  example: []
  syntax:
    content: public virtual PagedEnumerable<ListSessionsResponse, Session> ListSessions(DatabaseName database, string pageToken = null, int? pageSize = default(int? ), CallSettings callSettings = null)
    parameters:
    - id: database
      type: Google.Cloud.Spanner.Common.V1.DatabaseName
      description: "\nRequired. The database in which to list sessions.\n"
    - id: pageToken
      type: System.String
      description: "\nThe token returned from the previous request. A value of <code>null</code> or an empty string retrieves the first\npage.\n"
    - id: pageSize
      type: System.Nullable{System.Int32}
      description: "\nThe size of page to request. The response will not be larger than this, but may be smaller. A value of\n<code>null</code> or <code>0</code> uses a server-defined page size.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Api.Gax.PagedEnumerable{Google.Cloud.Spanner.V1.ListSessionsResponse,Google.Cloud.Spanner.V1.Session}
      description: A pageable sequence of <xref href="Google.Cloud.Spanner.V1.Session" data-throw-if-not-resolved="false"></xref> resources.
    content.vb: Public Overridable Function ListSessions(database As DatabaseName, pageToken As String = Nothing, pageSize As Integer? = Nothing, callSettings As CallSettings = Nothing) As PagedEnumerable(Of ListSessionsResponse, Session)
  overload: Google.Cloud.Spanner.V1.SpannerClient.ListSessions*
  nameWithType.vb: SpannerClient.ListSessions(DatabaseName, String, Nullable(Of Int32), CallSettings)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Google.Cloud.Spanner.V1.SpannerClient.ListSessions(Google.Cloud.Spanner.Common.V1.DatabaseName, System.String, System.Nullable(Of System.Int32), Google.Api.Gax.Grpc.CallSettings)
  name.vb: ListSessions(DatabaseName, String, Nullable(Of Int32), CallSettings)
- uid: Google.Cloud.Spanner.V1.SpannerClient.ListSessionsAsync(Google.Cloud.Spanner.Common.V1.DatabaseName,System.String,System.Nullable{System.Int32},Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.ListSessionsAsync(Google.Cloud.Spanner.Common.V1.DatabaseName,System.String,System.Nullable{System.Int32},Google.Api.Gax.Grpc.CallSettings)
  id: ListSessionsAsync(Google.Cloud.Spanner.Common.V1.DatabaseName,System.String,System.Nullable{System.Int32},Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: ListSessionsAsync(DatabaseName, String, Nullable<Int32>, CallSettings)
  nameWithType: SpannerClient.ListSessionsAsync(DatabaseName, String, Nullable<Int32>, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.ListSessionsAsync(Google.Cloud.Spanner.Common.V1.DatabaseName, System.String, System.Nullable<System.Int32>, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: ListSessionsAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1108
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nLists all sessions in a given database.\n"
  example: []
  syntax:
    content: public virtual PagedAsyncEnumerable<ListSessionsResponse, Session> ListSessionsAsync(DatabaseName database, string pageToken = null, int? pageSize = default(int? ), CallSettings callSettings = null)
    parameters:
    - id: database
      type: Google.Cloud.Spanner.Common.V1.DatabaseName
      description: "\nRequired. The database in which to list sessions.\n"
    - id: pageToken
      type: System.String
      description: "\nThe token returned from the previous request. A value of <code>null</code> or an empty string retrieves the first\npage.\n"
    - id: pageSize
      type: System.Nullable{System.Int32}
      description: "\nThe size of page to request. The response will not be larger than this, but may be smaller. A value of\n<code>null</code> or <code>0</code> uses a server-defined page size.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Api.Gax.PagedAsyncEnumerable{Google.Cloud.Spanner.V1.ListSessionsResponse,Google.Cloud.Spanner.V1.Session}
      description: A pageable asynchronous sequence of <xref href="Google.Cloud.Spanner.V1.Session" data-throw-if-not-resolved="false"></xref> resources.
    content.vb: Public Overridable Function ListSessionsAsync(database As DatabaseName, pageToken As String = Nothing, pageSize As Integer? = Nothing, callSettings As CallSettings = Nothing) As PagedAsyncEnumerable(Of ListSessionsResponse, Session)
  overload: Google.Cloud.Spanner.V1.SpannerClient.ListSessionsAsync*
  nameWithType.vb: SpannerClient.ListSessionsAsync(DatabaseName, String, Nullable(Of Int32), CallSettings)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Google.Cloud.Spanner.V1.SpannerClient.ListSessionsAsync(Google.Cloud.Spanner.Common.V1.DatabaseName, System.String, System.Nullable(Of System.Int32), Google.Api.Gax.Grpc.CallSettings)
  name.vb: ListSessionsAsync(DatabaseName, String, Nullable(Of Int32), CallSettings)
- uid: Google.Cloud.Spanner.V1.SpannerClient.DeleteSession(Google.Cloud.Spanner.V1.DeleteSessionRequest,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.DeleteSession(Google.Cloud.Spanner.V1.DeleteSessionRequest,Google.Api.Gax.Grpc.CallSettings)
  id: DeleteSession(Google.Cloud.Spanner.V1.DeleteSessionRequest,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: DeleteSession(DeleteSessionRequest, CallSettings)
  nameWithType: SpannerClient.DeleteSession(DeleteSessionRequest, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.DeleteSession(Google.Cloud.Spanner.V1.DeleteSessionRequest, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: DeleteSession
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1124
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nEnds a session, releasing server resources associated with it. This will\nasynchronously trigger cancellation of any operations that are running with\nthis session.\n"
  example: []
  syntax:
    content: public virtual void DeleteSession(DeleteSessionRequest request, CallSettings callSettings = null)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.DeleteSessionRequest
      description: The request object containing all of the parameters for the API call.
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    content.vb: Public Overridable Sub DeleteSession(request As DeleteSessionRequest, callSettings As CallSettings = Nothing)
  overload: Google.Cloud.Spanner.V1.SpannerClient.DeleteSession*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync(Google.Cloud.Spanner.V1.DeleteSessionRequest,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync(Google.Cloud.Spanner.V1.DeleteSessionRequest,Google.Api.Gax.Grpc.CallSettings)
  id: DeleteSessionAsync(Google.Cloud.Spanner.V1.DeleteSessionRequest,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: DeleteSessionAsync(DeleteSessionRequest, CallSettings)
  nameWithType: SpannerClient.DeleteSessionAsync(DeleteSessionRequest, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync(Google.Cloud.Spanner.V1.DeleteSessionRequest, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: DeleteSessionAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1135
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nEnds a session, releasing server resources associated with it. This will\nasynchronously trigger cancellation of any operations that are running with\nthis session.\n"
  example: []
  syntax:
    content: public virtual Task DeleteSessionAsync(DeleteSessionRequest request, CallSettings callSettings = null)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.DeleteSessionRequest
      description: The request object containing all of the parameters for the API call.
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: System.Threading.Tasks.Task
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function DeleteSessionAsync(request As DeleteSessionRequest, callSettings As CallSettings = Nothing) As Task
  overload: Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync(Google.Cloud.Spanner.V1.DeleteSessionRequest,System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync(Google.Cloud.Spanner.V1.DeleteSessionRequest,System.Threading.CancellationToken)
  id: DeleteSessionAsync(Google.Cloud.Spanner.V1.DeleteSessionRequest,System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: DeleteSessionAsync(DeleteSessionRequest, CancellationToken)
  nameWithType: SpannerClient.DeleteSessionAsync(DeleteSessionRequest, CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync(Google.Cloud.Spanner.V1.DeleteSessionRequest, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: DeleteSessionAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1146
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nEnds a session, releasing server resources associated with it. This will\nasynchronously trigger cancellation of any operations that are running with\nthis session.\n"
  example: []
  syntax:
    content: public virtual Task DeleteSessionAsync(DeleteSessionRequest request, CancellationToken cancellationToken)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.DeleteSessionRequest
      description: The request object containing all of the parameters for the API call.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to use for this RPC.
    return:
      type: System.Threading.Tasks.Task
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function DeleteSessionAsync(request As DeleteSessionRequest, cancellationToken As CancellationToken) As Task
  overload: Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.DeleteSession(System.String,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.DeleteSession(System.String,Google.Api.Gax.Grpc.CallSettings)
  id: DeleteSession(System.String,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: DeleteSession(String, CallSettings)
  nameWithType: SpannerClient.DeleteSession(String, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.DeleteSession(System.String, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: DeleteSession
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1159
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nEnds a session, releasing server resources associated with it. This will\nasynchronously trigger cancellation of any operations that are running with\nthis session.\n"
  example: []
  syntax:
    content: public virtual void DeleteSession(string name, CallSettings callSettings = null)
    parameters:
    - id: name
      type: System.String
      description: "\nRequired. The name of the session to delete.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    content.vb: Public Overridable Sub DeleteSession(name As String, callSettings As CallSettings = Nothing)
  overload: Google.Cloud.Spanner.V1.SpannerClient.DeleteSession*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync(System.String,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync(System.String,Google.Api.Gax.Grpc.CallSettings)
  id: DeleteSessionAsync(System.String,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: DeleteSessionAsync(String, CallSettings)
  nameWithType: SpannerClient.DeleteSessionAsync(String, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync(System.String, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: DeleteSessionAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1175
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nEnds a session, releasing server resources associated with it. This will\nasynchronously trigger cancellation of any operations that are running with\nthis session.\n"
  example: []
  syntax:
    content: public virtual Task DeleteSessionAsync(string name, CallSettings callSettings = null)
    parameters:
    - id: name
      type: System.String
      description: "\nRequired. The name of the session to delete.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: System.Threading.Tasks.Task
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function DeleteSessionAsync(name As String, callSettings As CallSettings = Nothing) As Task
  overload: Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync(System.String,System.Threading.CancellationToken)
  id: DeleteSessionAsync(System.String,System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: DeleteSessionAsync(String, CancellationToken)
  nameWithType: SpannerClient.DeleteSessionAsync(String, CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: DeleteSessionAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1191
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nEnds a session, releasing server resources associated with it. This will\nasynchronously trigger cancellation of any operations that are running with\nthis session.\n"
  example: []
  syntax:
    content: public virtual Task DeleteSessionAsync(string name, CancellationToken cancellationToken)
    parameters:
    - id: name
      type: System.String
      description: "\nRequired. The name of the session to delete.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to use for this RPC.
    return:
      type: System.Threading.Tasks.Task
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function DeleteSessionAsync(name As String, cancellationToken As CancellationToken) As Task
  overload: Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.DeleteSession(Google.Cloud.Spanner.V1.SessionName,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.DeleteSession(Google.Cloud.Spanner.V1.SessionName,Google.Api.Gax.Grpc.CallSettings)
  id: DeleteSession(Google.Cloud.Spanner.V1.SessionName,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: DeleteSession(SessionName, CallSettings)
  nameWithType: SpannerClient.DeleteSession(SessionName, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.DeleteSession(Google.Cloud.Spanner.V1.SessionName, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: DeleteSession
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1204
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nEnds a session, releasing server resources associated with it. This will\nasynchronously trigger cancellation of any operations that are running with\nthis session.\n"
  example: []
  syntax:
    content: public virtual void DeleteSession(SessionName name, CallSettings callSettings = null)
    parameters:
    - id: name
      type: Google.Cloud.Spanner.V1.SessionName
      description: "\nRequired. The name of the session to delete.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    content.vb: Public Overridable Sub DeleteSession(name As SessionName, callSettings As CallSettings = Nothing)
  overload: Google.Cloud.Spanner.V1.SpannerClient.DeleteSession*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync(Google.Cloud.Spanner.V1.SessionName,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync(Google.Cloud.Spanner.V1.SessionName,Google.Api.Gax.Grpc.CallSettings)
  id: DeleteSessionAsync(Google.Cloud.Spanner.V1.SessionName,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: DeleteSessionAsync(SessionName, CallSettings)
  nameWithType: SpannerClient.DeleteSessionAsync(SessionName, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync(Google.Cloud.Spanner.V1.SessionName, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: DeleteSessionAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1220
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nEnds a session, releasing server resources associated with it. This will\nasynchronously trigger cancellation of any operations that are running with\nthis session.\n"
  example: []
  syntax:
    content: public virtual Task DeleteSessionAsync(SessionName name, CallSettings callSettings = null)
    parameters:
    - id: name
      type: Google.Cloud.Spanner.V1.SessionName
      description: "\nRequired. The name of the session to delete.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: System.Threading.Tasks.Task
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function DeleteSessionAsync(name As SessionName, callSettings As CallSettings = Nothing) As Task
  overload: Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync(Google.Cloud.Spanner.V1.SessionName,System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync(Google.Cloud.Spanner.V1.SessionName,System.Threading.CancellationToken)
  id: DeleteSessionAsync(Google.Cloud.Spanner.V1.SessionName,System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: DeleteSessionAsync(SessionName, CancellationToken)
  nameWithType: SpannerClient.DeleteSessionAsync(SessionName, CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync(Google.Cloud.Spanner.V1.SessionName, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: DeleteSessionAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1236
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nEnds a session, releasing server resources associated with it. This will\nasynchronously trigger cancellation of any operations that are running with\nthis session.\n"
  example: []
  syntax:
    content: public virtual Task DeleteSessionAsync(SessionName name, CancellationToken cancellationToken)
    parameters:
    - id: name
      type: Google.Cloud.Spanner.V1.SessionName
      description: "\nRequired. The name of the session to delete.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to use for this RPC.
    return:
      type: System.Threading.Tasks.Task
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function DeleteSessionAsync(name As SessionName, cancellationToken As CancellationToken) As Task
  overload: Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.ExecuteSql(Google.Cloud.Spanner.V1.ExecuteSqlRequest,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.ExecuteSql(Google.Cloud.Spanner.V1.ExecuteSqlRequest,Google.Api.Gax.Grpc.CallSettings)
  id: ExecuteSql(Google.Cloud.Spanner.V1.ExecuteSqlRequest,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: ExecuteSql(ExecuteSqlRequest, CallSettings)
  nameWithType: SpannerClient.ExecuteSql(ExecuteSqlRequest, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.ExecuteSql(Google.Cloud.Spanner.V1.ExecuteSqlRequest, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: ExecuteSql
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1255
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nExecutes an SQL statement, returning all results in a single reply. This\nmethod cannot be used to return a result set larger than 10 MiB;\nif the query yields more data than that, the query fails with\na `FAILED_PRECONDITION` error.\n\nOperations inside read-write transactions might return `ABORTED`. If\nthis occurs, the application should restart the transaction from\nthe beginning. See [Transaction][google.spanner.v1.Transaction] for more details.\n\nLarger result sets can be fetched in streaming fashion by calling\n[ExecuteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql] instead.\n"
  example: []
  syntax:
    content: public virtual ResultSet ExecuteSql(ExecuteSqlRequest request, CallSettings callSettings = null)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.ExecuteSqlRequest
      description: The request object containing all of the parameters for the API call.
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Cloud.Spanner.V1.ResultSet
      description: The RPC response.
    content.vb: Public Overridable Function ExecuteSql(request As ExecuteSqlRequest, callSettings As CallSettings = Nothing) As ResultSet
  overload: Google.Cloud.Spanner.V1.SpannerClient.ExecuteSql*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.ExecuteSqlAsync(Google.Cloud.Spanner.V1.ExecuteSqlRequest,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.ExecuteSqlAsync(Google.Cloud.Spanner.V1.ExecuteSqlRequest,Google.Api.Gax.Grpc.CallSettings)
  id: ExecuteSqlAsync(Google.Cloud.Spanner.V1.ExecuteSqlRequest,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: ExecuteSqlAsync(ExecuteSqlRequest, CallSettings)
  nameWithType: SpannerClient.ExecuteSqlAsync(ExecuteSqlRequest, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.ExecuteSqlAsync(Google.Cloud.Spanner.V1.ExecuteSqlRequest, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: ExecuteSqlAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1274
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nExecutes an SQL statement, returning all results in a single reply. This\nmethod cannot be used to return a result set larger than 10 MiB;\nif the query yields more data than that, the query fails with\na `FAILED_PRECONDITION` error.\n\nOperations inside read-write transactions might return `ABORTED`. If\nthis occurs, the application should restart the transaction from\nthe beginning. See [Transaction][google.spanner.v1.Transaction] for more details.\n\nLarger result sets can be fetched in streaming fashion by calling\n[ExecuteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql] instead.\n"
  example: []
  syntax:
    content: public virtual Task<ResultSet> ExecuteSqlAsync(ExecuteSqlRequest request, CallSettings callSettings = null)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.ExecuteSqlRequest
      description: The request object containing all of the parameters for the API call.
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.ResultSet}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function ExecuteSqlAsync(request As ExecuteSqlRequest, callSettings As CallSettings = Nothing) As Task(Of ResultSet)
  overload: Google.Cloud.Spanner.V1.SpannerClient.ExecuteSqlAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.ExecuteSqlAsync(Google.Cloud.Spanner.V1.ExecuteSqlRequest,System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.ExecuteSqlAsync(Google.Cloud.Spanner.V1.ExecuteSqlRequest,System.Threading.CancellationToken)
  id: ExecuteSqlAsync(Google.Cloud.Spanner.V1.ExecuteSqlRequest,System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: ExecuteSqlAsync(ExecuteSqlRequest, CancellationToken)
  nameWithType: SpannerClient.ExecuteSqlAsync(ExecuteSqlRequest, CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.ExecuteSqlAsync(Google.Cloud.Spanner.V1.ExecuteSqlRequest, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: ExecuteSqlAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1293
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nExecutes an SQL statement, returning all results in a single reply. This\nmethod cannot be used to return a result set larger than 10 MiB;\nif the query yields more data than that, the query fails with\na `FAILED_PRECONDITION` error.\n\nOperations inside read-write transactions might return `ABORTED`. If\nthis occurs, the application should restart the transaction from\nthe beginning. See [Transaction][google.spanner.v1.Transaction] for more details.\n\nLarger result sets can be fetched in streaming fashion by calling\n[ExecuteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql] instead.\n"
  example: []
  syntax:
    content: public virtual Task<ResultSet> ExecuteSqlAsync(ExecuteSqlRequest request, CancellationToken cancellationToken)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.ExecuteSqlRequest
      description: The request object containing all of the parameters for the API call.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to use for this RPC.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.ResultSet}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function ExecuteSqlAsync(request As ExecuteSqlRequest, cancellationToken As CancellationToken) As Task(Of ResultSet)
  overload: Google.Cloud.Spanner.V1.SpannerClient.ExecuteSqlAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.ExecuteStreamingSql(Google.Cloud.Spanner.V1.ExecuteSqlRequest,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.ExecuteStreamingSql(Google.Cloud.Spanner.V1.ExecuteSqlRequest,Google.Api.Gax.Grpc.CallSettings)
  id: ExecuteStreamingSql(Google.Cloud.Spanner.V1.ExecuteSqlRequest,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: ExecuteStreamingSql(ExecuteSqlRequest, CallSettings)
  nameWithType: SpannerClient.ExecuteStreamingSql(ExecuteSqlRequest, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.ExecuteStreamingSql(Google.Cloud.Spanner.V1.ExecuteSqlRequest, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: ExecuteStreamingSql
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1313
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nLike [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql], except returns the result\nset as a stream. Unlike [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql], there\nis no limit on the size of the returned result set. However, no\nindividual row in the result set can exceed 100 MiB, and no\ncolumn value can exceed 10 MiB.\n"
  example: []
  syntax:
    content: public virtual SpannerClient.ExecuteStreamingSqlStream ExecuteStreamingSql(ExecuteSqlRequest request, CallSettings callSettings = null)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.ExecuteSqlRequest
      description: The request object containing all of the parameters for the API call.
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Cloud.Spanner.V1.SpannerClient.ExecuteStreamingSqlStream
      description: The server stream.
    content.vb: Public Overridable Function ExecuteStreamingSql(request As ExecuteSqlRequest, callSettings As CallSettings = Nothing) As SpannerClient.ExecuteStreamingSqlStream
  overload: Google.Cloud.Spanner.V1.SpannerClient.ExecuteStreamingSql*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.ExecuteBatchDml(Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.ExecuteBatchDml(Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest,Google.Api.Gax.Grpc.CallSettings)
  id: ExecuteBatchDml(Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: ExecuteBatchDml(ExecuteBatchDmlRequest, CallSettings)
  nameWithType: SpannerClient.ExecuteBatchDml(ExecuteBatchDmlRequest, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.ExecuteBatchDml(Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: ExecuteBatchDml
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1332
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nExecutes a batch of SQL DML statements. This method allows many statements\nto be run with lower latency than submitting them sequentially with\n[ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].\n\nStatements are executed in sequential order. A request can succeed even if\na statement fails. The [ExecuteBatchDmlResponse.status][google.spanner.v1.ExecuteBatchDmlResponse.status] field in the\nresponse provides information about the statement that failed. Clients must\ninspect this field to determine whether an error occurred.\n\nExecution stops after the first failed statement; the remaining statements\nare not executed.\n"
  example: []
  syntax:
    content: public virtual ExecuteBatchDmlResponse ExecuteBatchDml(ExecuteBatchDmlRequest request, CallSettings callSettings = null)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest
      description: The request object containing all of the parameters for the API call.
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Cloud.Spanner.V1.ExecuteBatchDmlResponse
      description: The RPC response.
    content.vb: Public Overridable Function ExecuteBatchDml(request As ExecuteBatchDmlRequest, callSettings As CallSettings = Nothing) As ExecuteBatchDmlResponse
  overload: Google.Cloud.Spanner.V1.SpannerClient.ExecuteBatchDml*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.ExecuteBatchDmlAsync(Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.ExecuteBatchDmlAsync(Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest,Google.Api.Gax.Grpc.CallSettings)
  id: ExecuteBatchDmlAsync(Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: ExecuteBatchDmlAsync(ExecuteBatchDmlRequest, CallSettings)
  nameWithType: SpannerClient.ExecuteBatchDmlAsync(ExecuteBatchDmlRequest, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.ExecuteBatchDmlAsync(Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: ExecuteBatchDmlAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1351
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nExecutes a batch of SQL DML statements. This method allows many statements\nto be run with lower latency than submitting them sequentially with\n[ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].\n\nStatements are executed in sequential order. A request can succeed even if\na statement fails. The [ExecuteBatchDmlResponse.status][google.spanner.v1.ExecuteBatchDmlResponse.status] field in the\nresponse provides information about the statement that failed. Clients must\ninspect this field to determine whether an error occurred.\n\nExecution stops after the first failed statement; the remaining statements\nare not executed.\n"
  example: []
  syntax:
    content: public virtual Task<ExecuteBatchDmlResponse> ExecuteBatchDmlAsync(ExecuteBatchDmlRequest request, CallSettings callSettings = null)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest
      description: The request object containing all of the parameters for the API call.
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.ExecuteBatchDmlResponse}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function ExecuteBatchDmlAsync(request As ExecuteBatchDmlRequest, callSettings As CallSettings = Nothing) As Task(Of ExecuteBatchDmlResponse)
  overload: Google.Cloud.Spanner.V1.SpannerClient.ExecuteBatchDmlAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.ExecuteBatchDmlAsync(Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest,System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.ExecuteBatchDmlAsync(Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest,System.Threading.CancellationToken)
  id: ExecuteBatchDmlAsync(Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest,System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: ExecuteBatchDmlAsync(ExecuteBatchDmlRequest, CancellationToken)
  nameWithType: SpannerClient.ExecuteBatchDmlAsync(ExecuteBatchDmlRequest, CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.ExecuteBatchDmlAsync(Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: ExecuteBatchDmlAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1370
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nExecutes a batch of SQL DML statements. This method allows many statements\nto be run with lower latency than submitting them sequentially with\n[ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].\n\nStatements are executed in sequential order. A request can succeed even if\na statement fails. The [ExecuteBatchDmlResponse.status][google.spanner.v1.ExecuteBatchDmlResponse.status] field in the\nresponse provides information about the statement that failed. Clients must\ninspect this field to determine whether an error occurred.\n\nExecution stops after the first failed statement; the remaining statements\nare not executed.\n"
  example: []
  syntax:
    content: public virtual Task<ExecuteBatchDmlResponse> ExecuteBatchDmlAsync(ExecuteBatchDmlRequest request, CancellationToken cancellationToken)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest
      description: The request object containing all of the parameters for the API call.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to use for this RPC.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.ExecuteBatchDmlResponse}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function ExecuteBatchDmlAsync(request As ExecuteBatchDmlRequest, cancellationToken As CancellationToken) As Task(Of ExecuteBatchDmlResponse)
  overload: Google.Cloud.Spanner.V1.SpannerClient.ExecuteBatchDmlAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.Read(Google.Cloud.Spanner.V1.ReadRequest,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.Read(Google.Cloud.Spanner.V1.ReadRequest,Google.Api.Gax.Grpc.CallSettings)
  id: Read(Google.Cloud.Spanner.V1.ReadRequest,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: Read(ReadRequest, CallSettings)
  nameWithType: SpannerClient.Read(ReadRequest, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.Read(Google.Cloud.Spanner.V1.ReadRequest, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: Read
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1391
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nReads rows from the database using key lookups and scans, as a\nsimple key/value style alternative to\n[ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].  This method cannot be used to\nreturn a result set larger than 10 MiB; if the read matches more\ndata than that, the read fails with a `FAILED_PRECONDITION`\nerror.\n\nReads inside read-write transactions might return `ABORTED`. If\nthis occurs, the application should restart the transaction from\nthe beginning. See [Transaction][google.spanner.v1.Transaction] for more details.\n\nLarger result sets can be yielded in streaming fashion by calling\n[StreamingRead][google.spanner.v1.Spanner.StreamingRead] instead.\n"
  example: []
  syntax:
    content: public virtual ResultSet Read(ReadRequest request, CallSettings callSettings = null)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.ReadRequest
      description: The request object containing all of the parameters for the API call.
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Cloud.Spanner.V1.ResultSet
      description: The RPC response.
    content.vb: Public Overridable Function Read(request As ReadRequest, callSettings As CallSettings = Nothing) As ResultSet
  overload: Google.Cloud.Spanner.V1.SpannerClient.Read*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.ReadAsync(Google.Cloud.Spanner.V1.ReadRequest,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.ReadAsync(Google.Cloud.Spanner.V1.ReadRequest,Google.Api.Gax.Grpc.CallSettings)
  id: ReadAsync(Google.Cloud.Spanner.V1.ReadRequest,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: ReadAsync(ReadRequest, CallSettings)
  nameWithType: SpannerClient.ReadAsync(ReadRequest, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.ReadAsync(Google.Cloud.Spanner.V1.ReadRequest, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: ReadAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1412
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nReads rows from the database using key lookups and scans, as a\nsimple key/value style alternative to\n[ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].  This method cannot be used to\nreturn a result set larger than 10 MiB; if the read matches more\ndata than that, the read fails with a `FAILED_PRECONDITION`\nerror.\n\nReads inside read-write transactions might return `ABORTED`. If\nthis occurs, the application should restart the transaction from\nthe beginning. See [Transaction][google.spanner.v1.Transaction] for more details.\n\nLarger result sets can be yielded in streaming fashion by calling\n[StreamingRead][google.spanner.v1.Spanner.StreamingRead] instead.\n"
  example: []
  syntax:
    content: public virtual Task<ResultSet> ReadAsync(ReadRequest request, CallSettings callSettings = null)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.ReadRequest
      description: The request object containing all of the parameters for the API call.
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.ResultSet}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function ReadAsync(request As ReadRequest, callSettings As CallSettings = Nothing) As Task(Of ResultSet)
  overload: Google.Cloud.Spanner.V1.SpannerClient.ReadAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.ReadAsync(Google.Cloud.Spanner.V1.ReadRequest,System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.ReadAsync(Google.Cloud.Spanner.V1.ReadRequest,System.Threading.CancellationToken)
  id: ReadAsync(Google.Cloud.Spanner.V1.ReadRequest,System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: ReadAsync(ReadRequest, CancellationToken)
  nameWithType: SpannerClient.ReadAsync(ReadRequest, CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.ReadAsync(Google.Cloud.Spanner.V1.ReadRequest, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: ReadAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1433
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nReads rows from the database using key lookups and scans, as a\nsimple key/value style alternative to\n[ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].  This method cannot be used to\nreturn a result set larger than 10 MiB; if the read matches more\ndata than that, the read fails with a `FAILED_PRECONDITION`\nerror.\n\nReads inside read-write transactions might return `ABORTED`. If\nthis occurs, the application should restart the transaction from\nthe beginning. See [Transaction][google.spanner.v1.Transaction] for more details.\n\nLarger result sets can be yielded in streaming fashion by calling\n[StreamingRead][google.spanner.v1.Spanner.StreamingRead] instead.\n"
  example: []
  syntax:
    content: public virtual Task<ResultSet> ReadAsync(ReadRequest request, CancellationToken cancellationToken)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.ReadRequest
      description: The request object containing all of the parameters for the API call.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to use for this RPC.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.ResultSet}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function ReadAsync(request As ReadRequest, cancellationToken As CancellationToken) As Task(Of ResultSet)
  overload: Google.Cloud.Spanner.V1.SpannerClient.ReadAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.StreamingRead(Google.Cloud.Spanner.V1.ReadRequest,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.StreamingRead(Google.Cloud.Spanner.V1.ReadRequest,Google.Api.Gax.Grpc.CallSettings)
  id: StreamingRead(Google.Cloud.Spanner.V1.ReadRequest,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: StreamingRead(ReadRequest, CallSettings)
  nameWithType: SpannerClient.StreamingRead(ReadRequest, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.StreamingRead(Google.Cloud.Spanner.V1.ReadRequest, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: StreamingRead
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1453
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nLike [Read][google.spanner.v1.Spanner.Read], except returns the result set as a\nstream. Unlike [Read][google.spanner.v1.Spanner.Read], there is no limit on the\nsize of the returned result set. However, no individual row in\nthe result set can exceed 100 MiB, and no column value can exceed\n10 MiB.\n"
  example: []
  syntax:
    content: public virtual SpannerClient.StreamingReadStream StreamingRead(ReadRequest request, CallSettings callSettings = null)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.ReadRequest
      description: The request object containing all of the parameters for the API call.
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Cloud.Spanner.V1.SpannerClient.StreamingReadStream
      description: The server stream.
    content.vb: Public Overridable Function StreamingRead(request As ReadRequest, callSettings As CallSettings = Nothing) As SpannerClient.StreamingReadStream
  overload: Google.Cloud.Spanner.V1.SpannerClient.StreamingRead*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.BeginTransaction(Google.Cloud.Spanner.V1.BeginTransactionRequest,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.BeginTransaction(Google.Cloud.Spanner.V1.BeginTransactionRequest,Google.Api.Gax.Grpc.CallSettings)
  id: BeginTransaction(Google.Cloud.Spanner.V1.BeginTransactionRequest,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: BeginTransaction(BeginTransactionRequest, CallSettings)
  nameWithType: SpannerClient.BeginTransaction(BeginTransactionRequest, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.BeginTransaction(Google.Cloud.Spanner.V1.BeginTransactionRequest, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: BeginTransaction
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1465
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nBegins a new transaction. This step can often be skipped:\n[Read][google.spanner.v1.Spanner.Read], [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] and\n[Commit][google.spanner.v1.Spanner.Commit] can begin a new transaction as a\nside-effect.\n"
  example: []
  syntax:
    content: public virtual Transaction BeginTransaction(BeginTransactionRequest request, CallSettings callSettings = null)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.BeginTransactionRequest
      description: The request object containing all of the parameters for the API call.
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Cloud.Spanner.V1.Transaction
      description: The RPC response.
    content.vb: Public Overridable Function BeginTransaction(request As BeginTransactionRequest, callSettings As CallSettings = Nothing) As Transaction
  overload: Google.Cloud.Spanner.V1.SpannerClient.BeginTransaction*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync(Google.Cloud.Spanner.V1.BeginTransactionRequest,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync(Google.Cloud.Spanner.V1.BeginTransactionRequest,Google.Api.Gax.Grpc.CallSettings)
  id: BeginTransactionAsync(Google.Cloud.Spanner.V1.BeginTransactionRequest,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: BeginTransactionAsync(BeginTransactionRequest, CallSettings)
  nameWithType: SpannerClient.BeginTransactionAsync(BeginTransactionRequest, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync(Google.Cloud.Spanner.V1.BeginTransactionRequest, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: BeginTransactionAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1477
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nBegins a new transaction. This step can often be skipped:\n[Read][google.spanner.v1.Spanner.Read], [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] and\n[Commit][google.spanner.v1.Spanner.Commit] can begin a new transaction as a\nside-effect.\n"
  example: []
  syntax:
    content: public virtual Task<Transaction> BeginTransactionAsync(BeginTransactionRequest request, CallSettings callSettings = null)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.BeginTransactionRequest
      description: The request object containing all of the parameters for the API call.
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.Transaction}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function BeginTransactionAsync(request As BeginTransactionRequest, callSettings As CallSettings = Nothing) As Task(Of Transaction)
  overload: Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync(Google.Cloud.Spanner.V1.BeginTransactionRequest,System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync(Google.Cloud.Spanner.V1.BeginTransactionRequest,System.Threading.CancellationToken)
  id: BeginTransactionAsync(Google.Cloud.Spanner.V1.BeginTransactionRequest,System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: BeginTransactionAsync(BeginTransactionRequest, CancellationToken)
  nameWithType: SpannerClient.BeginTransactionAsync(BeginTransactionRequest, CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync(Google.Cloud.Spanner.V1.BeginTransactionRequest, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: BeginTransactionAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1489
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nBegins a new transaction. This step can often be skipped:\n[Read][google.spanner.v1.Spanner.Read], [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] and\n[Commit][google.spanner.v1.Spanner.Commit] can begin a new transaction as a\nside-effect.\n"
  example: []
  syntax:
    content: public virtual Task<Transaction> BeginTransactionAsync(BeginTransactionRequest request, CancellationToken cancellationToken)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.BeginTransactionRequest
      description: The request object containing all of the parameters for the API call.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to use for this RPC.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.Transaction}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function BeginTransactionAsync(request As BeginTransactionRequest, cancellationToken As CancellationToken) As Task(Of Transaction)
  overload: Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.BeginTransaction(System.String,Google.Cloud.Spanner.V1.TransactionOptions,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.BeginTransaction(System.String,Google.Cloud.Spanner.V1.TransactionOptions,Google.Api.Gax.Grpc.CallSettings)
  id: BeginTransaction(System.String,Google.Cloud.Spanner.V1.TransactionOptions,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: BeginTransaction(String, TransactionOptions, CallSettings)
  nameWithType: SpannerClient.BeginTransaction(String, TransactionOptions, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.BeginTransaction(System.String, Google.Cloud.Spanner.V1.TransactionOptions, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: BeginTransaction
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1506
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nBegins a new transaction. This step can often be skipped:\n[Read][google.spanner.v1.Spanner.Read], [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] and\n[Commit][google.spanner.v1.Spanner.Commit] can begin a new transaction as a\nside-effect.\n"
  example: []
  syntax:
    content: public virtual Transaction BeginTransaction(string session, TransactionOptions options, CallSettings callSettings = null)
    parameters:
    - id: session
      type: System.String
      description: "\nRequired. The session in which the transaction runs.\n"
    - id: options
      type: Google.Cloud.Spanner.V1.TransactionOptions
      description: "\nRequired. Options for the new transaction.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Cloud.Spanner.V1.Transaction
      description: The RPC response.
    content.vb: Public Overridable Function BeginTransaction(session As String, options As TransactionOptions, callSettings As CallSettings = Nothing) As Transaction
  overload: Google.Cloud.Spanner.V1.SpannerClient.BeginTransaction*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync(System.String,Google.Cloud.Spanner.V1.TransactionOptions,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync(System.String,Google.Cloud.Spanner.V1.TransactionOptions,Google.Api.Gax.Grpc.CallSettings)
  id: BeginTransactionAsync(System.String,Google.Cloud.Spanner.V1.TransactionOptions,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: BeginTransactionAsync(String, TransactionOptions, CallSettings)
  nameWithType: SpannerClient.BeginTransactionAsync(String, TransactionOptions, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync(System.String, Google.Cloud.Spanner.V1.TransactionOptions, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: BeginTransactionAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1527
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nBegins a new transaction. This step can often be skipped:\n[Read][google.spanner.v1.Spanner.Read], [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] and\n[Commit][google.spanner.v1.Spanner.Commit] can begin a new transaction as a\nside-effect.\n"
  example: []
  syntax:
    content: public virtual Task<Transaction> BeginTransactionAsync(string session, TransactionOptions options, CallSettings callSettings = null)
    parameters:
    - id: session
      type: System.String
      description: "\nRequired. The session in which the transaction runs.\n"
    - id: options
      type: Google.Cloud.Spanner.V1.TransactionOptions
      description: "\nRequired. Options for the new transaction.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.Transaction}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function BeginTransactionAsync(session As String, options As TransactionOptions, callSettings As CallSettings = Nothing) As Task(Of Transaction)
  overload: Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync(System.String,Google.Cloud.Spanner.V1.TransactionOptions,System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync(System.String,Google.Cloud.Spanner.V1.TransactionOptions,System.Threading.CancellationToken)
  id: BeginTransactionAsync(System.String,Google.Cloud.Spanner.V1.TransactionOptions,System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: BeginTransactionAsync(String, TransactionOptions, CancellationToken)
  nameWithType: SpannerClient.BeginTransactionAsync(String, TransactionOptions, CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync(System.String, Google.Cloud.Spanner.V1.TransactionOptions, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: BeginTransactionAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1548
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nBegins a new transaction. This step can often be skipped:\n[Read][google.spanner.v1.Spanner.Read], [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] and\n[Commit][google.spanner.v1.Spanner.Commit] can begin a new transaction as a\nside-effect.\n"
  example: []
  syntax:
    content: public virtual Task<Transaction> BeginTransactionAsync(string session, TransactionOptions options, CancellationToken cancellationToken)
    parameters:
    - id: session
      type: System.String
      description: "\nRequired. The session in which the transaction runs.\n"
    - id: options
      type: Google.Cloud.Spanner.V1.TransactionOptions
      description: "\nRequired. Options for the new transaction.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to use for this RPC.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.Transaction}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function BeginTransactionAsync(session As String, options As TransactionOptions, cancellationToken As CancellationToken) As Task(Of Transaction)
  overload: Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.BeginTransaction(Google.Cloud.Spanner.V1.SessionName,Google.Cloud.Spanner.V1.TransactionOptions,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.BeginTransaction(Google.Cloud.Spanner.V1.SessionName,Google.Cloud.Spanner.V1.TransactionOptions,Google.Api.Gax.Grpc.CallSettings)
  id: BeginTransaction(Google.Cloud.Spanner.V1.SessionName,Google.Cloud.Spanner.V1.TransactionOptions,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: BeginTransaction(SessionName, TransactionOptions, CallSettings)
  nameWithType: SpannerClient.BeginTransaction(SessionName, TransactionOptions, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.BeginTransaction(Google.Cloud.Spanner.V1.SessionName, Google.Cloud.Spanner.V1.TransactionOptions, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: BeginTransaction
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1565
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nBegins a new transaction. This step can often be skipped:\n[Read][google.spanner.v1.Spanner.Read], [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] and\n[Commit][google.spanner.v1.Spanner.Commit] can begin a new transaction as a\nside-effect.\n"
  example: []
  syntax:
    content: public virtual Transaction BeginTransaction(SessionName session, TransactionOptions options, CallSettings callSettings = null)
    parameters:
    - id: session
      type: Google.Cloud.Spanner.V1.SessionName
      description: "\nRequired. The session in which the transaction runs.\n"
    - id: options
      type: Google.Cloud.Spanner.V1.TransactionOptions
      description: "\nRequired. Options for the new transaction.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Cloud.Spanner.V1.Transaction
      description: The RPC response.
    content.vb: Public Overridable Function BeginTransaction(session As SessionName, options As TransactionOptions, callSettings As CallSettings = Nothing) As Transaction
  overload: Google.Cloud.Spanner.V1.SpannerClient.BeginTransaction*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync(Google.Cloud.Spanner.V1.SessionName,Google.Cloud.Spanner.V1.TransactionOptions,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync(Google.Cloud.Spanner.V1.SessionName,Google.Cloud.Spanner.V1.TransactionOptions,Google.Api.Gax.Grpc.CallSettings)
  id: BeginTransactionAsync(Google.Cloud.Spanner.V1.SessionName,Google.Cloud.Spanner.V1.TransactionOptions,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: BeginTransactionAsync(SessionName, TransactionOptions, CallSettings)
  nameWithType: SpannerClient.BeginTransactionAsync(SessionName, TransactionOptions, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync(Google.Cloud.Spanner.V1.SessionName, Google.Cloud.Spanner.V1.TransactionOptions, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: BeginTransactionAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1586
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nBegins a new transaction. This step can often be skipped:\n[Read][google.spanner.v1.Spanner.Read], [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] and\n[Commit][google.spanner.v1.Spanner.Commit] can begin a new transaction as a\nside-effect.\n"
  example: []
  syntax:
    content: public virtual Task<Transaction> BeginTransactionAsync(SessionName session, TransactionOptions options, CallSettings callSettings = null)
    parameters:
    - id: session
      type: Google.Cloud.Spanner.V1.SessionName
      description: "\nRequired. The session in which the transaction runs.\n"
    - id: options
      type: Google.Cloud.Spanner.V1.TransactionOptions
      description: "\nRequired. Options for the new transaction.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.Transaction}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function BeginTransactionAsync(session As SessionName, options As TransactionOptions, callSettings As CallSettings = Nothing) As Task(Of Transaction)
  overload: Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync(Google.Cloud.Spanner.V1.SessionName,Google.Cloud.Spanner.V1.TransactionOptions,System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync(Google.Cloud.Spanner.V1.SessionName,Google.Cloud.Spanner.V1.TransactionOptions,System.Threading.CancellationToken)
  id: BeginTransactionAsync(Google.Cloud.Spanner.V1.SessionName,Google.Cloud.Spanner.V1.TransactionOptions,System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: BeginTransactionAsync(SessionName, TransactionOptions, CancellationToken)
  nameWithType: SpannerClient.BeginTransactionAsync(SessionName, TransactionOptions, CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync(Google.Cloud.Spanner.V1.SessionName, Google.Cloud.Spanner.V1.TransactionOptions, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: BeginTransactionAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1607
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nBegins a new transaction. This step can often be skipped:\n[Read][google.spanner.v1.Spanner.Read], [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] and\n[Commit][google.spanner.v1.Spanner.Commit] can begin a new transaction as a\nside-effect.\n"
  example: []
  syntax:
    content: public virtual Task<Transaction> BeginTransactionAsync(SessionName session, TransactionOptions options, CancellationToken cancellationToken)
    parameters:
    - id: session
      type: Google.Cloud.Spanner.V1.SessionName
      description: "\nRequired. The session in which the transaction runs.\n"
    - id: options
      type: Google.Cloud.Spanner.V1.TransactionOptions
      description: "\nRequired. Options for the new transaction.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to use for this RPC.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.Transaction}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function BeginTransactionAsync(session As SessionName, options As TransactionOptions, cancellationToken As CancellationToken) As Task(Of Transaction)
  overload: Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.Commit(Google.Cloud.Spanner.V1.CommitRequest,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.Commit(Google.Cloud.Spanner.V1.CommitRequest,Google.Api.Gax.Grpc.CallSettings)
  id: Commit(Google.Cloud.Spanner.V1.CommitRequest,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: Commit(CommitRequest, CallSettings)
  nameWithType: SpannerClient.Commit(CommitRequest, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.Commit(Google.Cloud.Spanner.V1.CommitRequest, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: Commit
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1629
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCommits a transaction. The request includes the mutations to be\napplied to rows in the database.\n\n`Commit` might return an `ABORTED` error. This can occur at any time;\ncommonly, the cause is conflicts with concurrent\ntransactions. However, it can also happen for a variety of other\nreasons. If `Commit` returns `ABORTED`, the caller should re-attempt\nthe transaction from the beginning, re-using the same session.\n\nOn very rare occasions, `Commit` might return `UNKNOWN`. This can happen,\nfor example, if the client job experiences a 1+ hour networking failure.\nAt that point, Cloud Spanner has lost track of the transaction outcome and\nwe recommend that you perform another read from the database to see the\nstate of things as they are now.\n"
  example: []
  syntax:
    content: public virtual CommitResponse Commit(CommitRequest request, CallSettings callSettings = null)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.CommitRequest
      description: The request object containing all of the parameters for the API call.
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Cloud.Spanner.V1.CommitResponse
      description: The RPC response.
    content.vb: Public Overridable Function Commit(request As CommitRequest, callSettings As CallSettings = Nothing) As CommitResponse
  overload: Google.Cloud.Spanner.V1.SpannerClient.Commit*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(Google.Cloud.Spanner.V1.CommitRequest,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(Google.Cloud.Spanner.V1.CommitRequest,Google.Api.Gax.Grpc.CallSettings)
  id: CommitAsync(Google.Cloud.Spanner.V1.CommitRequest,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: CommitAsync(CommitRequest, CallSettings)
  nameWithType: SpannerClient.CommitAsync(CommitRequest, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(Google.Cloud.Spanner.V1.CommitRequest, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: CommitAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1651
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCommits a transaction. The request includes the mutations to be\napplied to rows in the database.\n\n`Commit` might return an `ABORTED` error. This can occur at any time;\ncommonly, the cause is conflicts with concurrent\ntransactions. However, it can also happen for a variety of other\nreasons. If `Commit` returns `ABORTED`, the caller should re-attempt\nthe transaction from the beginning, re-using the same session.\n\nOn very rare occasions, `Commit` might return `UNKNOWN`. This can happen,\nfor example, if the client job experiences a 1+ hour networking failure.\nAt that point, Cloud Spanner has lost track of the transaction outcome and\nwe recommend that you perform another read from the database to see the\nstate of things as they are now.\n"
  example: []
  syntax:
    content: public virtual Task<CommitResponse> CommitAsync(CommitRequest request, CallSettings callSettings = null)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.CommitRequest
      description: The request object containing all of the parameters for the API call.
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.CommitResponse}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function CommitAsync(request As CommitRequest, callSettings As CallSettings = Nothing) As Task(Of CommitResponse)
  overload: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(Google.Cloud.Spanner.V1.CommitRequest,System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(Google.Cloud.Spanner.V1.CommitRequest,System.Threading.CancellationToken)
  id: CommitAsync(Google.Cloud.Spanner.V1.CommitRequest,System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: CommitAsync(CommitRequest, CancellationToken)
  nameWithType: SpannerClient.CommitAsync(CommitRequest, CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(Google.Cloud.Spanner.V1.CommitRequest, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: CommitAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1673
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCommits a transaction. The request includes the mutations to be\napplied to rows in the database.\n\n`Commit` might return an `ABORTED` error. This can occur at any time;\ncommonly, the cause is conflicts with concurrent\ntransactions. However, it can also happen for a variety of other\nreasons. If `Commit` returns `ABORTED`, the caller should re-attempt\nthe transaction from the beginning, re-using the same session.\n\nOn very rare occasions, `Commit` might return `UNKNOWN`. This can happen,\nfor example, if the client job experiences a 1+ hour networking failure.\nAt that point, Cloud Spanner has lost track of the transaction outcome and\nwe recommend that you perform another read from the database to see the\nstate of things as they are now.\n"
  example: []
  syntax:
    content: public virtual Task<CommitResponse> CommitAsync(CommitRequest request, CancellationToken cancellationToken)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.CommitRequest
      description: The request object containing all of the parameters for the API call.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to use for this RPC.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.CommitResponse}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function CommitAsync(request As CommitRequest, cancellationToken As CancellationToken) As Task(Of CommitResponse)
  overload: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.Commit(System.String,Google.Protobuf.ByteString,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.Commit(System.String,Google.Protobuf.ByteString,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  id: Commit(System.String,Google.Protobuf.ByteString,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: Commit(String, ByteString, IEnumerable<Mutation>, CallSettings)
  nameWithType: SpannerClient.Commit(String, ByteString, IEnumerable<Mutation>, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.Commit(System.String, Google.Protobuf.ByteString, System.Collections.Generic.IEnumerable<Google.Cloud.Spanner.V1.Mutation>, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: Commit
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1705
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCommits a transaction. The request includes the mutations to be\napplied to rows in the database.\n\n`Commit` might return an `ABORTED` error. This can occur at any time;\ncommonly, the cause is conflicts with concurrent\ntransactions. However, it can also happen for a variety of other\nreasons. If `Commit` returns `ABORTED`, the caller should re-attempt\nthe transaction from the beginning, re-using the same session.\n\nOn very rare occasions, `Commit` might return `UNKNOWN`. This can happen,\nfor example, if the client job experiences a 1+ hour networking failure.\nAt that point, Cloud Spanner has lost track of the transaction outcome and\nwe recommend that you perform another read from the database to see the\nstate of things as they are now.\n"
  example: []
  syntax:
    content: public virtual CommitResponse Commit(string session, ByteString transactionId, IEnumerable<Mutation> mutations, CallSettings callSettings = null)
    parameters:
    - id: session
      type: System.String
      description: "\nRequired. The session in which the transaction to be committed is running.\n"
    - id: transactionId
      type: Google.Protobuf.ByteString
      description: "\nCommit a previously-started transaction.\n"
    - id: mutations
      type: System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation}
      description: "\nThe mutations to be executed when this transaction commits. All\nmutations are applied atomically, in the order they appear in\nthis list.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Cloud.Spanner.V1.CommitResponse
      description: The RPC response.
    content.vb: Public Overridable Function Commit(session As String, transactionId As ByteString, mutations As IEnumerable(Of Mutation), callSettings As CallSettings = Nothing) As CommitResponse
  overload: Google.Cloud.Spanner.V1.SpannerClient.Commit*
  nameWithType.vb: SpannerClient.Commit(String, ByteString, IEnumerable(Of Mutation), CallSettings)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Google.Cloud.Spanner.V1.SpannerClient.Commit(System.String, Google.Protobuf.ByteString, System.Collections.Generic.IEnumerable(Of Google.Cloud.Spanner.V1.Mutation), Google.Api.Gax.Grpc.CallSettings)
  name.vb: Commit(String, ByteString, IEnumerable(Of Mutation), CallSettings)
- uid: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(System.String,Google.Protobuf.ByteString,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(System.String,Google.Protobuf.ByteString,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  id: CommitAsync(System.String,Google.Protobuf.ByteString,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: CommitAsync(String, ByteString, IEnumerable<Mutation>, CallSettings)
  nameWithType: SpannerClient.CommitAsync(String, ByteString, IEnumerable<Mutation>, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(System.String, Google.Protobuf.ByteString, System.Collections.Generic.IEnumerable<Google.Cloud.Spanner.V1.Mutation>, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: CommitAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1745
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCommits a transaction. The request includes the mutations to be\napplied to rows in the database.\n\n`Commit` might return an `ABORTED` error. This can occur at any time;\ncommonly, the cause is conflicts with concurrent\ntransactions. However, it can also happen for a variety of other\nreasons. If `Commit` returns `ABORTED`, the caller should re-attempt\nthe transaction from the beginning, re-using the same session.\n\nOn very rare occasions, `Commit` might return `UNKNOWN`. This can happen,\nfor example, if the client job experiences a 1+ hour networking failure.\nAt that point, Cloud Spanner has lost track of the transaction outcome and\nwe recommend that you perform another read from the database to see the\nstate of things as they are now.\n"
  example: []
  syntax:
    content: public virtual Task<CommitResponse> CommitAsync(string session, ByteString transactionId, IEnumerable<Mutation> mutations, CallSettings callSettings = null)
    parameters:
    - id: session
      type: System.String
      description: "\nRequired. The session in which the transaction to be committed is running.\n"
    - id: transactionId
      type: Google.Protobuf.ByteString
      description: "\nCommit a previously-started transaction.\n"
    - id: mutations
      type: System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation}
      description: "\nThe mutations to be executed when this transaction commits. All\nmutations are applied atomically, in the order they appear in\nthis list.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.CommitResponse}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function CommitAsync(session As String, transactionId As ByteString, mutations As IEnumerable(Of Mutation), callSettings As CallSettings = Nothing) As Task(Of CommitResponse)
  overload: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync*
  nameWithType.vb: SpannerClient.CommitAsync(String, ByteString, IEnumerable(Of Mutation), CallSettings)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(System.String, Google.Protobuf.ByteString, System.Collections.Generic.IEnumerable(Of Google.Cloud.Spanner.V1.Mutation), Google.Api.Gax.Grpc.CallSettings)
  name.vb: CommitAsync(String, ByteString, IEnumerable(Of Mutation), CallSettings)
- uid: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(System.String,Google.Protobuf.ByteString,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(System.String,Google.Protobuf.ByteString,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},System.Threading.CancellationToken)
  id: CommitAsync(System.String,Google.Protobuf.ByteString,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: CommitAsync(String, ByteString, IEnumerable<Mutation>, CancellationToken)
  nameWithType: SpannerClient.CommitAsync(String, ByteString, IEnumerable<Mutation>, CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(System.String, Google.Protobuf.ByteString, System.Collections.Generic.IEnumerable<Google.Cloud.Spanner.V1.Mutation>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: CommitAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1785
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCommits a transaction. The request includes the mutations to be\napplied to rows in the database.\n\n`Commit` might return an `ABORTED` error. This can occur at any time;\ncommonly, the cause is conflicts with concurrent\ntransactions. However, it can also happen for a variety of other\nreasons. If `Commit` returns `ABORTED`, the caller should re-attempt\nthe transaction from the beginning, re-using the same session.\n\nOn very rare occasions, `Commit` might return `UNKNOWN`. This can happen,\nfor example, if the client job experiences a 1+ hour networking failure.\nAt that point, Cloud Spanner has lost track of the transaction outcome and\nwe recommend that you perform another read from the database to see the\nstate of things as they are now.\n"
  example: []
  syntax:
    content: public virtual Task<CommitResponse> CommitAsync(string session, ByteString transactionId, IEnumerable<Mutation> mutations, CancellationToken cancellationToken)
    parameters:
    - id: session
      type: System.String
      description: "\nRequired. The session in which the transaction to be committed is running.\n"
    - id: transactionId
      type: Google.Protobuf.ByteString
      description: "\nCommit a previously-started transaction.\n"
    - id: mutations
      type: System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation}
      description: "\nThe mutations to be executed when this transaction commits. All\nmutations are applied atomically, in the order they appear in\nthis list.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to use for this RPC.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.CommitResponse}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function CommitAsync(session As String, transactionId As ByteString, mutations As IEnumerable(Of Mutation), cancellationToken As CancellationToken) As Task(Of CommitResponse)
  overload: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync*
  nameWithType.vb: SpannerClient.CommitAsync(String, ByteString, IEnumerable(Of Mutation), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(System.String, Google.Protobuf.ByteString, System.Collections.Generic.IEnumerable(Of Google.Cloud.Spanner.V1.Mutation), System.Threading.CancellationToken)
  name.vb: CommitAsync(String, ByteString, IEnumerable(Of Mutation), CancellationToken)
- uid: Google.Cloud.Spanner.V1.SpannerClient.Commit(Google.Cloud.Spanner.V1.SessionName,Google.Protobuf.ByteString,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.Commit(Google.Cloud.Spanner.V1.SessionName,Google.Protobuf.ByteString,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  id: Commit(Google.Cloud.Spanner.V1.SessionName,Google.Protobuf.ByteString,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: Commit(SessionName, ByteString, IEnumerable<Mutation>, CallSettings)
  nameWithType: SpannerClient.Commit(SessionName, ByteString, IEnumerable<Mutation>, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.Commit(Google.Cloud.Spanner.V1.SessionName, Google.Protobuf.ByteString, System.Collections.Generic.IEnumerable<Google.Cloud.Spanner.V1.Mutation>, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: Commit
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1817
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCommits a transaction. The request includes the mutations to be\napplied to rows in the database.\n\n`Commit` might return an `ABORTED` error. This can occur at any time;\ncommonly, the cause is conflicts with concurrent\ntransactions. However, it can also happen for a variety of other\nreasons. If `Commit` returns `ABORTED`, the caller should re-attempt\nthe transaction from the beginning, re-using the same session.\n\nOn very rare occasions, `Commit` might return `UNKNOWN`. This can happen,\nfor example, if the client job experiences a 1+ hour networking failure.\nAt that point, Cloud Spanner has lost track of the transaction outcome and\nwe recommend that you perform another read from the database to see the\nstate of things as they are now.\n"
  example: []
  syntax:
    content: public virtual CommitResponse Commit(SessionName session, ByteString transactionId, IEnumerable<Mutation> mutations, CallSettings callSettings = null)
    parameters:
    - id: session
      type: Google.Cloud.Spanner.V1.SessionName
      description: "\nRequired. The session in which the transaction to be committed is running.\n"
    - id: transactionId
      type: Google.Protobuf.ByteString
      description: "\nCommit a previously-started transaction.\n"
    - id: mutations
      type: System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation}
      description: "\nThe mutations to be executed when this transaction commits. All\nmutations are applied atomically, in the order they appear in\nthis list.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Cloud.Spanner.V1.CommitResponse
      description: The RPC response.
    content.vb: Public Overridable Function Commit(session As SessionName, transactionId As ByteString, mutations As IEnumerable(Of Mutation), callSettings As CallSettings = Nothing) As CommitResponse
  overload: Google.Cloud.Spanner.V1.SpannerClient.Commit*
  nameWithType.vb: SpannerClient.Commit(SessionName, ByteString, IEnumerable(Of Mutation), CallSettings)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Google.Cloud.Spanner.V1.SpannerClient.Commit(Google.Cloud.Spanner.V1.SessionName, Google.Protobuf.ByteString, System.Collections.Generic.IEnumerable(Of Google.Cloud.Spanner.V1.Mutation), Google.Api.Gax.Grpc.CallSettings)
  name.vb: Commit(SessionName, ByteString, IEnumerable(Of Mutation), CallSettings)
- uid: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(Google.Cloud.Spanner.V1.SessionName,Google.Protobuf.ByteString,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(Google.Cloud.Spanner.V1.SessionName,Google.Protobuf.ByteString,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  id: CommitAsync(Google.Cloud.Spanner.V1.SessionName,Google.Protobuf.ByteString,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: CommitAsync(SessionName, ByteString, IEnumerable<Mutation>, CallSettings)
  nameWithType: SpannerClient.CommitAsync(SessionName, ByteString, IEnumerable<Mutation>, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(Google.Cloud.Spanner.V1.SessionName, Google.Protobuf.ByteString, System.Collections.Generic.IEnumerable<Google.Cloud.Spanner.V1.Mutation>, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: CommitAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1857
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCommits a transaction. The request includes the mutations to be\napplied to rows in the database.\n\n`Commit` might return an `ABORTED` error. This can occur at any time;\ncommonly, the cause is conflicts with concurrent\ntransactions. However, it can also happen for a variety of other\nreasons. If `Commit` returns `ABORTED`, the caller should re-attempt\nthe transaction from the beginning, re-using the same session.\n\nOn very rare occasions, `Commit` might return `UNKNOWN`. This can happen,\nfor example, if the client job experiences a 1+ hour networking failure.\nAt that point, Cloud Spanner has lost track of the transaction outcome and\nwe recommend that you perform another read from the database to see the\nstate of things as they are now.\n"
  example: []
  syntax:
    content: public virtual Task<CommitResponse> CommitAsync(SessionName session, ByteString transactionId, IEnumerable<Mutation> mutations, CallSettings callSettings = null)
    parameters:
    - id: session
      type: Google.Cloud.Spanner.V1.SessionName
      description: "\nRequired. The session in which the transaction to be committed is running.\n"
    - id: transactionId
      type: Google.Protobuf.ByteString
      description: "\nCommit a previously-started transaction.\n"
    - id: mutations
      type: System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation}
      description: "\nThe mutations to be executed when this transaction commits. All\nmutations are applied atomically, in the order they appear in\nthis list.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.CommitResponse}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function CommitAsync(session As SessionName, transactionId As ByteString, mutations As IEnumerable(Of Mutation), callSettings As CallSettings = Nothing) As Task(Of CommitResponse)
  overload: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync*
  nameWithType.vb: SpannerClient.CommitAsync(SessionName, ByteString, IEnumerable(Of Mutation), CallSettings)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(Google.Cloud.Spanner.V1.SessionName, Google.Protobuf.ByteString, System.Collections.Generic.IEnumerable(Of Google.Cloud.Spanner.V1.Mutation), Google.Api.Gax.Grpc.CallSettings)
  name.vb: CommitAsync(SessionName, ByteString, IEnumerable(Of Mutation), CallSettings)
- uid: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(Google.Cloud.Spanner.V1.SessionName,Google.Protobuf.ByteString,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(Google.Cloud.Spanner.V1.SessionName,Google.Protobuf.ByteString,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},System.Threading.CancellationToken)
  id: CommitAsync(Google.Cloud.Spanner.V1.SessionName,Google.Protobuf.ByteString,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: CommitAsync(SessionName, ByteString, IEnumerable<Mutation>, CancellationToken)
  nameWithType: SpannerClient.CommitAsync(SessionName, ByteString, IEnumerable<Mutation>, CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(Google.Cloud.Spanner.V1.SessionName, Google.Protobuf.ByteString, System.Collections.Generic.IEnumerable<Google.Cloud.Spanner.V1.Mutation>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: CommitAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1897
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCommits a transaction. The request includes the mutations to be\napplied to rows in the database.\n\n`Commit` might return an `ABORTED` error. This can occur at any time;\ncommonly, the cause is conflicts with concurrent\ntransactions. However, it can also happen for a variety of other\nreasons. If `Commit` returns `ABORTED`, the caller should re-attempt\nthe transaction from the beginning, re-using the same session.\n\nOn very rare occasions, `Commit` might return `UNKNOWN`. This can happen,\nfor example, if the client job experiences a 1+ hour networking failure.\nAt that point, Cloud Spanner has lost track of the transaction outcome and\nwe recommend that you perform another read from the database to see the\nstate of things as they are now.\n"
  example: []
  syntax:
    content: public virtual Task<CommitResponse> CommitAsync(SessionName session, ByteString transactionId, IEnumerable<Mutation> mutations, CancellationToken cancellationToken)
    parameters:
    - id: session
      type: Google.Cloud.Spanner.V1.SessionName
      description: "\nRequired. The session in which the transaction to be committed is running.\n"
    - id: transactionId
      type: Google.Protobuf.ByteString
      description: "\nCommit a previously-started transaction.\n"
    - id: mutations
      type: System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation}
      description: "\nThe mutations to be executed when this transaction commits. All\nmutations are applied atomically, in the order they appear in\nthis list.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to use for this RPC.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.CommitResponse}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function CommitAsync(session As SessionName, transactionId As ByteString, mutations As IEnumerable(Of Mutation), cancellationToken As CancellationToken) As Task(Of CommitResponse)
  overload: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync*
  nameWithType.vb: SpannerClient.CommitAsync(SessionName, ByteString, IEnumerable(Of Mutation), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(Google.Cloud.Spanner.V1.SessionName, Google.Protobuf.ByteString, System.Collections.Generic.IEnumerable(Of Google.Cloud.Spanner.V1.Mutation), System.Threading.CancellationToken)
  name.vb: CommitAsync(SessionName, ByteString, IEnumerable(Of Mutation), CancellationToken)
- uid: Google.Cloud.Spanner.V1.SpannerClient.Commit(System.String,Google.Cloud.Spanner.V1.TransactionOptions,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.Commit(System.String,Google.Cloud.Spanner.V1.TransactionOptions,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  id: Commit(System.String,Google.Cloud.Spanner.V1.TransactionOptions,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: Commit(String, TransactionOptions, IEnumerable<Mutation>, CallSettings)
  nameWithType: SpannerClient.Commit(String, TransactionOptions, IEnumerable<Mutation>, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.Commit(System.String, Google.Cloud.Spanner.V1.TransactionOptions, System.Collections.Generic.IEnumerable<Google.Cloud.Spanner.V1.Mutation>, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: Commit
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1937
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCommits a transaction. The request includes the mutations to be\napplied to rows in the database.\n\n`Commit` might return an `ABORTED` error. This can occur at any time;\ncommonly, the cause is conflicts with concurrent\ntransactions. However, it can also happen for a variety of other\nreasons. If `Commit` returns `ABORTED`, the caller should re-attempt\nthe transaction from the beginning, re-using the same session.\n\nOn very rare occasions, `Commit` might return `UNKNOWN`. This can happen,\nfor example, if the client job experiences a 1+ hour networking failure.\nAt that point, Cloud Spanner has lost track of the transaction outcome and\nwe recommend that you perform another read from the database to see the\nstate of things as they are now.\n"
  example: []
  syntax:
    content: public virtual CommitResponse Commit(string session, TransactionOptions singleUseTransaction, IEnumerable<Mutation> mutations, CallSettings callSettings = null)
    parameters:
    - id: session
      type: System.String
      description: "\nRequired. The session in which the transaction to be committed is running.\n"
    - id: singleUseTransaction
      type: Google.Cloud.Spanner.V1.TransactionOptions
      description: "\nExecute mutations in a temporary transaction. Note that unlike\ncommit of a previously-started transaction, commit with a\ntemporary transaction is non-idempotent. That is, if the\n`CommitRequest` is sent to Cloud Spanner more than once (for\ninstance, due to retries in the application, or in the\ntransport library), it is possible that the mutations are\nexecuted more than once. If this is undesirable, use\n[BeginTransaction][google.spanner.v1.Spanner.BeginTransaction] and\n[Commit][google.spanner.v1.Spanner.Commit] instead.\n"
    - id: mutations
      type: System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation}
      description: "\nThe mutations to be executed when this transaction commits. All\nmutations are applied atomically, in the order they appear in\nthis list.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Cloud.Spanner.V1.CommitResponse
      description: The RPC response.
    content.vb: Public Overridable Function Commit(session As String, singleUseTransaction As TransactionOptions, mutations As IEnumerable(Of Mutation), callSettings As CallSettings = Nothing) As CommitResponse
  overload: Google.Cloud.Spanner.V1.SpannerClient.Commit*
  nameWithType.vb: SpannerClient.Commit(String, TransactionOptions, IEnumerable(Of Mutation), CallSettings)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Google.Cloud.Spanner.V1.SpannerClient.Commit(System.String, Google.Cloud.Spanner.V1.TransactionOptions, System.Collections.Generic.IEnumerable(Of Google.Cloud.Spanner.V1.Mutation), Google.Api.Gax.Grpc.CallSettings)
  name.vb: Commit(String, TransactionOptions, IEnumerable(Of Mutation), CallSettings)
- uid: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(System.String,Google.Cloud.Spanner.V1.TransactionOptions,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(System.String,Google.Cloud.Spanner.V1.TransactionOptions,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  id: CommitAsync(System.String,Google.Cloud.Spanner.V1.TransactionOptions,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: CommitAsync(String, TransactionOptions, IEnumerable<Mutation>, CallSettings)
  nameWithType: SpannerClient.CommitAsync(String, TransactionOptions, IEnumerable<Mutation>, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(System.String, Google.Cloud.Spanner.V1.TransactionOptions, System.Collections.Generic.IEnumerable<Google.Cloud.Spanner.V1.Mutation>, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: CommitAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 1985
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCommits a transaction. The request includes the mutations to be\napplied to rows in the database.\n\n`Commit` might return an `ABORTED` error. This can occur at any time;\ncommonly, the cause is conflicts with concurrent\ntransactions. However, it can also happen for a variety of other\nreasons. If `Commit` returns `ABORTED`, the caller should re-attempt\nthe transaction from the beginning, re-using the same session.\n\nOn very rare occasions, `Commit` might return `UNKNOWN`. This can happen,\nfor example, if the client job experiences a 1+ hour networking failure.\nAt that point, Cloud Spanner has lost track of the transaction outcome and\nwe recommend that you perform another read from the database to see the\nstate of things as they are now.\n"
  example: []
  syntax:
    content: public virtual Task<CommitResponse> CommitAsync(string session, TransactionOptions singleUseTransaction, IEnumerable<Mutation> mutations, CallSettings callSettings = null)
    parameters:
    - id: session
      type: System.String
      description: "\nRequired. The session in which the transaction to be committed is running.\n"
    - id: singleUseTransaction
      type: Google.Cloud.Spanner.V1.TransactionOptions
      description: "\nExecute mutations in a temporary transaction. Note that unlike\ncommit of a previously-started transaction, commit with a\ntemporary transaction is non-idempotent. That is, if the\n`CommitRequest` is sent to Cloud Spanner more than once (for\ninstance, due to retries in the application, or in the\ntransport library), it is possible that the mutations are\nexecuted more than once. If this is undesirable, use\n[BeginTransaction][google.spanner.v1.Spanner.BeginTransaction] and\n[Commit][google.spanner.v1.Spanner.Commit] instead.\n"
    - id: mutations
      type: System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation}
      description: "\nThe mutations to be executed when this transaction commits. All\nmutations are applied atomically, in the order they appear in\nthis list.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.CommitResponse}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function CommitAsync(session As String, singleUseTransaction As TransactionOptions, mutations As IEnumerable(Of Mutation), callSettings As CallSettings = Nothing) As Task(Of CommitResponse)
  overload: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync*
  nameWithType.vb: SpannerClient.CommitAsync(String, TransactionOptions, IEnumerable(Of Mutation), CallSettings)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(System.String, Google.Cloud.Spanner.V1.TransactionOptions, System.Collections.Generic.IEnumerable(Of Google.Cloud.Spanner.V1.Mutation), Google.Api.Gax.Grpc.CallSettings)
  name.vb: CommitAsync(String, TransactionOptions, IEnumerable(Of Mutation), CallSettings)
- uid: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(System.String,Google.Cloud.Spanner.V1.TransactionOptions,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(System.String,Google.Cloud.Spanner.V1.TransactionOptions,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},System.Threading.CancellationToken)
  id: CommitAsync(System.String,Google.Cloud.Spanner.V1.TransactionOptions,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: CommitAsync(String, TransactionOptions, IEnumerable<Mutation>, CancellationToken)
  nameWithType: SpannerClient.CommitAsync(String, TransactionOptions, IEnumerable<Mutation>, CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(System.String, Google.Cloud.Spanner.V1.TransactionOptions, System.Collections.Generic.IEnumerable<Google.Cloud.Spanner.V1.Mutation>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: CommitAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 2033
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCommits a transaction. The request includes the mutations to be\napplied to rows in the database.\n\n`Commit` might return an `ABORTED` error. This can occur at any time;\ncommonly, the cause is conflicts with concurrent\ntransactions. However, it can also happen for a variety of other\nreasons. If `Commit` returns `ABORTED`, the caller should re-attempt\nthe transaction from the beginning, re-using the same session.\n\nOn very rare occasions, `Commit` might return `UNKNOWN`. This can happen,\nfor example, if the client job experiences a 1+ hour networking failure.\nAt that point, Cloud Spanner has lost track of the transaction outcome and\nwe recommend that you perform another read from the database to see the\nstate of things as they are now.\n"
  example: []
  syntax:
    content: public virtual Task<CommitResponse> CommitAsync(string session, TransactionOptions singleUseTransaction, IEnumerable<Mutation> mutations, CancellationToken cancellationToken)
    parameters:
    - id: session
      type: System.String
      description: "\nRequired. The session in which the transaction to be committed is running.\n"
    - id: singleUseTransaction
      type: Google.Cloud.Spanner.V1.TransactionOptions
      description: "\nExecute mutations in a temporary transaction. Note that unlike\ncommit of a previously-started transaction, commit with a\ntemporary transaction is non-idempotent. That is, if the\n`CommitRequest` is sent to Cloud Spanner more than once (for\ninstance, due to retries in the application, or in the\ntransport library), it is possible that the mutations are\nexecuted more than once. If this is undesirable, use\n[BeginTransaction][google.spanner.v1.Spanner.BeginTransaction] and\n[Commit][google.spanner.v1.Spanner.Commit] instead.\n"
    - id: mutations
      type: System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation}
      description: "\nThe mutations to be executed when this transaction commits. All\nmutations are applied atomically, in the order they appear in\nthis list.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to use for this RPC.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.CommitResponse}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function CommitAsync(session As String, singleUseTransaction As TransactionOptions, mutations As IEnumerable(Of Mutation), cancellationToken As CancellationToken) As Task(Of CommitResponse)
  overload: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync*
  nameWithType.vb: SpannerClient.CommitAsync(String, TransactionOptions, IEnumerable(Of Mutation), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(System.String, Google.Cloud.Spanner.V1.TransactionOptions, System.Collections.Generic.IEnumerable(Of Google.Cloud.Spanner.V1.Mutation), System.Threading.CancellationToken)
  name.vb: CommitAsync(String, TransactionOptions, IEnumerable(Of Mutation), CancellationToken)
- uid: Google.Cloud.Spanner.V1.SpannerClient.Commit(Google.Cloud.Spanner.V1.SessionName,Google.Cloud.Spanner.V1.TransactionOptions,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.Commit(Google.Cloud.Spanner.V1.SessionName,Google.Cloud.Spanner.V1.TransactionOptions,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  id: Commit(Google.Cloud.Spanner.V1.SessionName,Google.Cloud.Spanner.V1.TransactionOptions,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: Commit(SessionName, TransactionOptions, IEnumerable<Mutation>, CallSettings)
  nameWithType: SpannerClient.Commit(SessionName, TransactionOptions, IEnumerable<Mutation>, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.Commit(Google.Cloud.Spanner.V1.SessionName, Google.Cloud.Spanner.V1.TransactionOptions, System.Collections.Generic.IEnumerable<Google.Cloud.Spanner.V1.Mutation>, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: Commit
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 2073
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCommits a transaction. The request includes the mutations to be\napplied to rows in the database.\n\n`Commit` might return an `ABORTED` error. This can occur at any time;\ncommonly, the cause is conflicts with concurrent\ntransactions. However, it can also happen for a variety of other\nreasons. If `Commit` returns `ABORTED`, the caller should re-attempt\nthe transaction from the beginning, re-using the same session.\n\nOn very rare occasions, `Commit` might return `UNKNOWN`. This can happen,\nfor example, if the client job experiences a 1+ hour networking failure.\nAt that point, Cloud Spanner has lost track of the transaction outcome and\nwe recommend that you perform another read from the database to see the\nstate of things as they are now.\n"
  example: []
  syntax:
    content: public virtual CommitResponse Commit(SessionName session, TransactionOptions singleUseTransaction, IEnumerable<Mutation> mutations, CallSettings callSettings = null)
    parameters:
    - id: session
      type: Google.Cloud.Spanner.V1.SessionName
      description: "\nRequired. The session in which the transaction to be committed is running.\n"
    - id: singleUseTransaction
      type: Google.Cloud.Spanner.V1.TransactionOptions
      description: "\nExecute mutations in a temporary transaction. Note that unlike\ncommit of a previously-started transaction, commit with a\ntemporary transaction is non-idempotent. That is, if the\n`CommitRequest` is sent to Cloud Spanner more than once (for\ninstance, due to retries in the application, or in the\ntransport library), it is possible that the mutations are\nexecuted more than once. If this is undesirable, use\n[BeginTransaction][google.spanner.v1.Spanner.BeginTransaction] and\n[Commit][google.spanner.v1.Spanner.Commit] instead.\n"
    - id: mutations
      type: System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation}
      description: "\nThe mutations to be executed when this transaction commits. All\nmutations are applied atomically, in the order they appear in\nthis list.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Cloud.Spanner.V1.CommitResponse
      description: The RPC response.
    content.vb: Public Overridable Function Commit(session As SessionName, singleUseTransaction As TransactionOptions, mutations As IEnumerable(Of Mutation), callSettings As CallSettings = Nothing) As CommitResponse
  overload: Google.Cloud.Spanner.V1.SpannerClient.Commit*
  nameWithType.vb: SpannerClient.Commit(SessionName, TransactionOptions, IEnumerable(Of Mutation), CallSettings)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Google.Cloud.Spanner.V1.SpannerClient.Commit(Google.Cloud.Spanner.V1.SessionName, Google.Cloud.Spanner.V1.TransactionOptions, System.Collections.Generic.IEnumerable(Of Google.Cloud.Spanner.V1.Mutation), Google.Api.Gax.Grpc.CallSettings)
  name.vb: Commit(SessionName, TransactionOptions, IEnumerable(Of Mutation), CallSettings)
- uid: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(Google.Cloud.Spanner.V1.SessionName,Google.Cloud.Spanner.V1.TransactionOptions,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(Google.Cloud.Spanner.V1.SessionName,Google.Cloud.Spanner.V1.TransactionOptions,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  id: CommitAsync(Google.Cloud.Spanner.V1.SessionName,Google.Cloud.Spanner.V1.TransactionOptions,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: CommitAsync(SessionName, TransactionOptions, IEnumerable<Mutation>, CallSettings)
  nameWithType: SpannerClient.CommitAsync(SessionName, TransactionOptions, IEnumerable<Mutation>, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(Google.Cloud.Spanner.V1.SessionName, Google.Cloud.Spanner.V1.TransactionOptions, System.Collections.Generic.IEnumerable<Google.Cloud.Spanner.V1.Mutation>, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: CommitAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 2121
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCommits a transaction. The request includes the mutations to be\napplied to rows in the database.\n\n`Commit` might return an `ABORTED` error. This can occur at any time;\ncommonly, the cause is conflicts with concurrent\ntransactions. However, it can also happen for a variety of other\nreasons. If `Commit` returns `ABORTED`, the caller should re-attempt\nthe transaction from the beginning, re-using the same session.\n\nOn very rare occasions, `Commit` might return `UNKNOWN`. This can happen,\nfor example, if the client job experiences a 1+ hour networking failure.\nAt that point, Cloud Spanner has lost track of the transaction outcome and\nwe recommend that you perform another read from the database to see the\nstate of things as they are now.\n"
  example: []
  syntax:
    content: public virtual Task<CommitResponse> CommitAsync(SessionName session, TransactionOptions singleUseTransaction, IEnumerable<Mutation> mutations, CallSettings callSettings = null)
    parameters:
    - id: session
      type: Google.Cloud.Spanner.V1.SessionName
      description: "\nRequired. The session in which the transaction to be committed is running.\n"
    - id: singleUseTransaction
      type: Google.Cloud.Spanner.V1.TransactionOptions
      description: "\nExecute mutations in a temporary transaction. Note that unlike\ncommit of a previously-started transaction, commit with a\ntemporary transaction is non-idempotent. That is, if the\n`CommitRequest` is sent to Cloud Spanner more than once (for\ninstance, due to retries in the application, or in the\ntransport library), it is possible that the mutations are\nexecuted more than once. If this is undesirable, use\n[BeginTransaction][google.spanner.v1.Spanner.BeginTransaction] and\n[Commit][google.spanner.v1.Spanner.Commit] instead.\n"
    - id: mutations
      type: System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation}
      description: "\nThe mutations to be executed when this transaction commits. All\nmutations are applied atomically, in the order they appear in\nthis list.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.CommitResponse}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function CommitAsync(session As SessionName, singleUseTransaction As TransactionOptions, mutations As IEnumerable(Of Mutation), callSettings As CallSettings = Nothing) As Task(Of CommitResponse)
  overload: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync*
  nameWithType.vb: SpannerClient.CommitAsync(SessionName, TransactionOptions, IEnumerable(Of Mutation), CallSettings)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(Google.Cloud.Spanner.V1.SessionName, Google.Cloud.Spanner.V1.TransactionOptions, System.Collections.Generic.IEnumerable(Of Google.Cloud.Spanner.V1.Mutation), Google.Api.Gax.Grpc.CallSettings)
  name.vb: CommitAsync(SessionName, TransactionOptions, IEnumerable(Of Mutation), CallSettings)
- uid: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(Google.Cloud.Spanner.V1.SessionName,Google.Cloud.Spanner.V1.TransactionOptions,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(Google.Cloud.Spanner.V1.SessionName,Google.Cloud.Spanner.V1.TransactionOptions,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},System.Threading.CancellationToken)
  id: CommitAsync(Google.Cloud.Spanner.V1.SessionName,Google.Cloud.Spanner.V1.TransactionOptions,System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation},System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: CommitAsync(SessionName, TransactionOptions, IEnumerable<Mutation>, CancellationToken)
  nameWithType: SpannerClient.CommitAsync(SessionName, TransactionOptions, IEnumerable<Mutation>, CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(Google.Cloud.Spanner.V1.SessionName, Google.Cloud.Spanner.V1.TransactionOptions, System.Collections.Generic.IEnumerable<Google.Cloud.Spanner.V1.Mutation>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: CommitAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 2169
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCommits a transaction. The request includes the mutations to be\napplied to rows in the database.\n\n`Commit` might return an `ABORTED` error. This can occur at any time;\ncommonly, the cause is conflicts with concurrent\ntransactions. However, it can also happen for a variety of other\nreasons. If `Commit` returns `ABORTED`, the caller should re-attempt\nthe transaction from the beginning, re-using the same session.\n\nOn very rare occasions, `Commit` might return `UNKNOWN`. This can happen,\nfor example, if the client job experiences a 1+ hour networking failure.\nAt that point, Cloud Spanner has lost track of the transaction outcome and\nwe recommend that you perform another read from the database to see the\nstate of things as they are now.\n"
  example: []
  syntax:
    content: public virtual Task<CommitResponse> CommitAsync(SessionName session, TransactionOptions singleUseTransaction, IEnumerable<Mutation> mutations, CancellationToken cancellationToken)
    parameters:
    - id: session
      type: Google.Cloud.Spanner.V1.SessionName
      description: "\nRequired. The session in which the transaction to be committed is running.\n"
    - id: singleUseTransaction
      type: Google.Cloud.Spanner.V1.TransactionOptions
      description: "\nExecute mutations in a temporary transaction. Note that unlike\ncommit of a previously-started transaction, commit with a\ntemporary transaction is non-idempotent. That is, if the\n`CommitRequest` is sent to Cloud Spanner more than once (for\ninstance, due to retries in the application, or in the\ntransport library), it is possible that the mutations are\nexecuted more than once. If this is undesirable, use\n[BeginTransaction][google.spanner.v1.Spanner.BeginTransaction] and\n[Commit][google.spanner.v1.Spanner.Commit] instead.\n"
    - id: mutations
      type: System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation}
      description: "\nThe mutations to be executed when this transaction commits. All\nmutations are applied atomically, in the order they appear in\nthis list.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to use for this RPC.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.CommitResponse}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function CommitAsync(session As SessionName, singleUseTransaction As TransactionOptions, mutations As IEnumerable(Of Mutation), cancellationToken As CancellationToken) As Task(Of CommitResponse)
  overload: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync*
  nameWithType.vb: SpannerClient.CommitAsync(SessionName, TransactionOptions, IEnumerable(Of Mutation), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync(Google.Cloud.Spanner.V1.SessionName, Google.Cloud.Spanner.V1.TransactionOptions, System.Collections.Generic.IEnumerable(Of Google.Cloud.Spanner.V1.Mutation), System.Threading.CancellationToken)
  name.vb: CommitAsync(SessionName, TransactionOptions, IEnumerable(Of Mutation), CancellationToken)
- uid: Google.Cloud.Spanner.V1.SpannerClient.Rollback(Google.Cloud.Spanner.V1.RollbackRequest,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.Rollback(Google.Cloud.Spanner.V1.RollbackRequest,Google.Api.Gax.Grpc.CallSettings)
  id: Rollback(Google.Cloud.Spanner.V1.RollbackRequest,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: Rollback(RollbackRequest, CallSettings)
  nameWithType: SpannerClient.Rollback(RollbackRequest, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.Rollback(Google.Cloud.Spanner.V1.RollbackRequest, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: Rollback
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 2185
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nRolls back a transaction, releasing any locks it holds. It is a good\nidea to call this for any transaction that includes one or more\n[Read][google.spanner.v1.Spanner.Read] or [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] requests and\nultimately decides not to commit.\n\n`Rollback` returns `OK` if it successfully aborts the transaction, the\ntransaction was already aborted, or the transaction is not\nfound. `Rollback` never returns `ABORTED`.\n"
  example: []
  syntax:
    content: public virtual void Rollback(RollbackRequest request, CallSettings callSettings = null)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.RollbackRequest
      description: The request object containing all of the parameters for the API call.
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    content.vb: Public Overridable Sub Rollback(request As RollbackRequest, callSettings As CallSettings = Nothing)
  overload: Google.Cloud.Spanner.V1.SpannerClient.Rollback*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync(Google.Cloud.Spanner.V1.RollbackRequest,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync(Google.Cloud.Spanner.V1.RollbackRequest,Google.Api.Gax.Grpc.CallSettings)
  id: RollbackAsync(Google.Cloud.Spanner.V1.RollbackRequest,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: RollbackAsync(RollbackRequest, CallSettings)
  nameWithType: SpannerClient.RollbackAsync(RollbackRequest, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync(Google.Cloud.Spanner.V1.RollbackRequest, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: RollbackAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 2201
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nRolls back a transaction, releasing any locks it holds. It is a good\nidea to call this for any transaction that includes one or more\n[Read][google.spanner.v1.Spanner.Read] or [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] requests and\nultimately decides not to commit.\n\n`Rollback` returns `OK` if it successfully aborts the transaction, the\ntransaction was already aborted, or the transaction is not\nfound. `Rollback` never returns `ABORTED`.\n"
  example: []
  syntax:
    content: public virtual Task RollbackAsync(RollbackRequest request, CallSettings callSettings = null)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.RollbackRequest
      description: The request object containing all of the parameters for the API call.
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: System.Threading.Tasks.Task
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function RollbackAsync(request As RollbackRequest, callSettings As CallSettings = Nothing) As Task
  overload: Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync(Google.Cloud.Spanner.V1.RollbackRequest,System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync(Google.Cloud.Spanner.V1.RollbackRequest,System.Threading.CancellationToken)
  id: RollbackAsync(Google.Cloud.Spanner.V1.RollbackRequest,System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: RollbackAsync(RollbackRequest, CancellationToken)
  nameWithType: SpannerClient.RollbackAsync(RollbackRequest, CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync(Google.Cloud.Spanner.V1.RollbackRequest, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: RollbackAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 2217
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nRolls back a transaction, releasing any locks it holds. It is a good\nidea to call this for any transaction that includes one or more\n[Read][google.spanner.v1.Spanner.Read] or [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] requests and\nultimately decides not to commit.\n\n`Rollback` returns `OK` if it successfully aborts the transaction, the\ntransaction was already aborted, or the transaction is not\nfound. `Rollback` never returns `ABORTED`.\n"
  example: []
  syntax:
    content: public virtual Task RollbackAsync(RollbackRequest request, CancellationToken cancellationToken)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.RollbackRequest
      description: The request object containing all of the parameters for the API call.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to use for this RPC.
    return:
      type: System.Threading.Tasks.Task
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function RollbackAsync(request As RollbackRequest, cancellationToken As CancellationToken) As Task
  overload: Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.Rollback(System.String,Google.Protobuf.ByteString,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.Rollback(System.String,Google.Protobuf.ByteString,Google.Api.Gax.Grpc.CallSettings)
  id: Rollback(System.String,Google.Protobuf.ByteString,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: Rollback(String, ByteString, CallSettings)
  nameWithType: SpannerClient.Rollback(String, ByteString, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.Rollback(System.String, Google.Protobuf.ByteString, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: Rollback
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 2238
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nRolls back a transaction, releasing any locks it holds. It is a good\nidea to call this for any transaction that includes one or more\n[Read][google.spanner.v1.Spanner.Read] or [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] requests and\nultimately decides not to commit.\n\n`Rollback` returns `OK` if it successfully aborts the transaction, the\ntransaction was already aborted, or the transaction is not\nfound. `Rollback` never returns `ABORTED`.\n"
  example: []
  syntax:
    content: public virtual void Rollback(string session, ByteString transactionId, CallSettings callSettings = null)
    parameters:
    - id: session
      type: System.String
      description: "\nRequired. The session in which the transaction to roll back is running.\n"
    - id: transactionId
      type: Google.Protobuf.ByteString
      description: "\nRequired. The transaction to roll back.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    content.vb: Public Overridable Sub Rollback(session As String, transactionId As ByteString, callSettings As CallSettings = Nothing)
  overload: Google.Cloud.Spanner.V1.SpannerClient.Rollback*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync(System.String,Google.Protobuf.ByteString,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync(System.String,Google.Protobuf.ByteString,Google.Api.Gax.Grpc.CallSettings)
  id: RollbackAsync(System.String,Google.Protobuf.ByteString,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: RollbackAsync(String, ByteString, CallSettings)
  nameWithType: SpannerClient.RollbackAsync(String, ByteString, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync(System.String, Google.Protobuf.ByteString, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: RollbackAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 2263
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nRolls back a transaction, releasing any locks it holds. It is a good\nidea to call this for any transaction that includes one or more\n[Read][google.spanner.v1.Spanner.Read] or [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] requests and\nultimately decides not to commit.\n\n`Rollback` returns `OK` if it successfully aborts the transaction, the\ntransaction was already aborted, or the transaction is not\nfound. `Rollback` never returns `ABORTED`.\n"
  example: []
  syntax:
    content: public virtual Task RollbackAsync(string session, ByteString transactionId, CallSettings callSettings = null)
    parameters:
    - id: session
      type: System.String
      description: "\nRequired. The session in which the transaction to roll back is running.\n"
    - id: transactionId
      type: Google.Protobuf.ByteString
      description: "\nRequired. The transaction to roll back.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: System.Threading.Tasks.Task
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function RollbackAsync(session As String, transactionId As ByteString, callSettings As CallSettings = Nothing) As Task
  overload: Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync(System.String,Google.Protobuf.ByteString,System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync(System.String,Google.Protobuf.ByteString,System.Threading.CancellationToken)
  id: RollbackAsync(System.String,Google.Protobuf.ByteString,System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: RollbackAsync(String, ByteString, CancellationToken)
  nameWithType: SpannerClient.RollbackAsync(String, ByteString, CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync(System.String, Google.Protobuf.ByteString, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: RollbackAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 2288
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nRolls back a transaction, releasing any locks it holds. It is a good\nidea to call this for any transaction that includes one or more\n[Read][google.spanner.v1.Spanner.Read] or [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] requests and\nultimately decides not to commit.\n\n`Rollback` returns `OK` if it successfully aborts the transaction, the\ntransaction was already aborted, or the transaction is not\nfound. `Rollback` never returns `ABORTED`.\n"
  example: []
  syntax:
    content: public virtual Task RollbackAsync(string session, ByteString transactionId, CancellationToken cancellationToken)
    parameters:
    - id: session
      type: System.String
      description: "\nRequired. The session in which the transaction to roll back is running.\n"
    - id: transactionId
      type: Google.Protobuf.ByteString
      description: "\nRequired. The transaction to roll back.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to use for this RPC.
    return:
      type: System.Threading.Tasks.Task
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function RollbackAsync(session As String, transactionId As ByteString, cancellationToken As CancellationToken) As Task
  overload: Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.Rollback(Google.Cloud.Spanner.V1.SessionName,Google.Protobuf.ByteString,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.Rollback(Google.Cloud.Spanner.V1.SessionName,Google.Protobuf.ByteString,Google.Api.Gax.Grpc.CallSettings)
  id: Rollback(Google.Cloud.Spanner.V1.SessionName,Google.Protobuf.ByteString,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: Rollback(SessionName, ByteString, CallSettings)
  nameWithType: SpannerClient.Rollback(SessionName, ByteString, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.Rollback(Google.Cloud.Spanner.V1.SessionName, Google.Protobuf.ByteString, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: Rollback
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 2309
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nRolls back a transaction, releasing any locks it holds. It is a good\nidea to call this for any transaction that includes one or more\n[Read][google.spanner.v1.Spanner.Read] or [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] requests and\nultimately decides not to commit.\n\n`Rollback` returns `OK` if it successfully aborts the transaction, the\ntransaction was already aborted, or the transaction is not\nfound. `Rollback` never returns `ABORTED`.\n"
  example: []
  syntax:
    content: public virtual void Rollback(SessionName session, ByteString transactionId, CallSettings callSettings = null)
    parameters:
    - id: session
      type: Google.Cloud.Spanner.V1.SessionName
      description: "\nRequired. The session in which the transaction to roll back is running.\n"
    - id: transactionId
      type: Google.Protobuf.ByteString
      description: "\nRequired. The transaction to roll back.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    content.vb: Public Overridable Sub Rollback(session As SessionName, transactionId As ByteString, callSettings As CallSettings = Nothing)
  overload: Google.Cloud.Spanner.V1.SpannerClient.Rollback*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync(Google.Cloud.Spanner.V1.SessionName,Google.Protobuf.ByteString,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync(Google.Cloud.Spanner.V1.SessionName,Google.Protobuf.ByteString,Google.Api.Gax.Grpc.CallSettings)
  id: RollbackAsync(Google.Cloud.Spanner.V1.SessionName,Google.Protobuf.ByteString,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: RollbackAsync(SessionName, ByteString, CallSettings)
  nameWithType: SpannerClient.RollbackAsync(SessionName, ByteString, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync(Google.Cloud.Spanner.V1.SessionName, Google.Protobuf.ByteString, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: RollbackAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 2334
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nRolls back a transaction, releasing any locks it holds. It is a good\nidea to call this for any transaction that includes one or more\n[Read][google.spanner.v1.Spanner.Read] or [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] requests and\nultimately decides not to commit.\n\n`Rollback` returns `OK` if it successfully aborts the transaction, the\ntransaction was already aborted, or the transaction is not\nfound. `Rollback` never returns `ABORTED`.\n"
  example: []
  syntax:
    content: public virtual Task RollbackAsync(SessionName session, ByteString transactionId, CallSettings callSettings = null)
    parameters:
    - id: session
      type: Google.Cloud.Spanner.V1.SessionName
      description: "\nRequired. The session in which the transaction to roll back is running.\n"
    - id: transactionId
      type: Google.Protobuf.ByteString
      description: "\nRequired. The transaction to roll back.\n"
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: System.Threading.Tasks.Task
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function RollbackAsync(session As SessionName, transactionId As ByteString, callSettings As CallSettings = Nothing) As Task
  overload: Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync(Google.Cloud.Spanner.V1.SessionName,Google.Protobuf.ByteString,System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync(Google.Cloud.Spanner.V1.SessionName,Google.Protobuf.ByteString,System.Threading.CancellationToken)
  id: RollbackAsync(Google.Cloud.Spanner.V1.SessionName,Google.Protobuf.ByteString,System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: RollbackAsync(SessionName, ByteString, CancellationToken)
  nameWithType: SpannerClient.RollbackAsync(SessionName, ByteString, CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync(Google.Cloud.Spanner.V1.SessionName, Google.Protobuf.ByteString, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: RollbackAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 2359
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nRolls back a transaction, releasing any locks it holds. It is a good\nidea to call this for any transaction that includes one or more\n[Read][google.spanner.v1.Spanner.Read] or [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] requests and\nultimately decides not to commit.\n\n`Rollback` returns `OK` if it successfully aborts the transaction, the\ntransaction was already aborted, or the transaction is not\nfound. `Rollback` never returns `ABORTED`.\n"
  example: []
  syntax:
    content: public virtual Task RollbackAsync(SessionName session, ByteString transactionId, CancellationToken cancellationToken)
    parameters:
    - id: session
      type: Google.Cloud.Spanner.V1.SessionName
      description: "\nRequired. The session in which the transaction to roll back is running.\n"
    - id: transactionId
      type: Google.Protobuf.ByteString
      description: "\nRequired. The transaction to roll back.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to use for this RPC.
    return:
      type: System.Threading.Tasks.Task
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function RollbackAsync(session As SessionName, transactionId As ByteString, cancellationToken As CancellationToken) As Task
  overload: Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.PartitionQuery(Google.Cloud.Spanner.V1.PartitionQueryRequest,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.PartitionQuery(Google.Cloud.Spanner.V1.PartitionQueryRequest,Google.Api.Gax.Grpc.CallSettings)
  id: PartitionQuery(Google.Cloud.Spanner.V1.PartitionQueryRequest,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: PartitionQuery(PartitionQueryRequest, CallSettings)
  nameWithType: SpannerClient.PartitionQuery(PartitionQueryRequest, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.PartitionQuery(Google.Cloud.Spanner.V1.PartitionQueryRequest, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: PartitionQuery
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 2378
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCreates a set of partition tokens that can be used to execute a query\noperation in parallel.  Each of the returned partition tokens can be used\nby [ExecuteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql] to specify a subset\nof the query result to read.  The same session and read-only transaction\nmust be used by the PartitionQueryRequest used to create the\npartition tokens and the ExecuteSqlRequests that use the partition tokens.\n\nPartition tokens become invalid when the session used to create them\nis deleted, is idle for too long, begins a new transaction, or becomes too\nold.  When any of these happen, it is not possible to resume the query, and\nthe whole operation must be restarted from the beginning.\n"
  example: []
  syntax:
    content: public virtual PartitionResponse PartitionQuery(PartitionQueryRequest request, CallSettings callSettings = null)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.PartitionQueryRequest
      description: The request object containing all of the parameters for the API call.
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Cloud.Spanner.V1.PartitionResponse
      description: The RPC response.
    content.vb: Public Overridable Function PartitionQuery(request As PartitionQueryRequest, callSettings As CallSettings = Nothing) As PartitionResponse
  overload: Google.Cloud.Spanner.V1.SpannerClient.PartitionQuery*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.PartitionQueryAsync(Google.Cloud.Spanner.V1.PartitionQueryRequest,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.PartitionQueryAsync(Google.Cloud.Spanner.V1.PartitionQueryRequest,Google.Api.Gax.Grpc.CallSettings)
  id: PartitionQueryAsync(Google.Cloud.Spanner.V1.PartitionQueryRequest,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: PartitionQueryAsync(PartitionQueryRequest, CallSettings)
  nameWithType: SpannerClient.PartitionQueryAsync(PartitionQueryRequest, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.PartitionQueryAsync(Google.Cloud.Spanner.V1.PartitionQueryRequest, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: PartitionQueryAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 2397
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCreates a set of partition tokens that can be used to execute a query\noperation in parallel.  Each of the returned partition tokens can be used\nby [ExecuteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql] to specify a subset\nof the query result to read.  The same session and read-only transaction\nmust be used by the PartitionQueryRequest used to create the\npartition tokens and the ExecuteSqlRequests that use the partition tokens.\n\nPartition tokens become invalid when the session used to create them\nis deleted, is idle for too long, begins a new transaction, or becomes too\nold.  When any of these happen, it is not possible to resume the query, and\nthe whole operation must be restarted from the beginning.\n"
  example: []
  syntax:
    content: public virtual Task<PartitionResponse> PartitionQueryAsync(PartitionQueryRequest request, CallSettings callSettings = null)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.PartitionQueryRequest
      description: The request object containing all of the parameters for the API call.
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.PartitionResponse}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function PartitionQueryAsync(request As PartitionQueryRequest, callSettings As CallSettings = Nothing) As Task(Of PartitionResponse)
  overload: Google.Cloud.Spanner.V1.SpannerClient.PartitionQueryAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.PartitionQueryAsync(Google.Cloud.Spanner.V1.PartitionQueryRequest,System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.PartitionQueryAsync(Google.Cloud.Spanner.V1.PartitionQueryRequest,System.Threading.CancellationToken)
  id: PartitionQueryAsync(Google.Cloud.Spanner.V1.PartitionQueryRequest,System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: PartitionQueryAsync(PartitionQueryRequest, CancellationToken)
  nameWithType: SpannerClient.PartitionQueryAsync(PartitionQueryRequest, CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.PartitionQueryAsync(Google.Cloud.Spanner.V1.PartitionQueryRequest, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: PartitionQueryAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 2416
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCreates a set of partition tokens that can be used to execute a query\noperation in parallel.  Each of the returned partition tokens can be used\nby [ExecuteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql] to specify a subset\nof the query result to read.  The same session and read-only transaction\nmust be used by the PartitionQueryRequest used to create the\npartition tokens and the ExecuteSqlRequests that use the partition tokens.\n\nPartition tokens become invalid when the session used to create them\nis deleted, is idle for too long, begins a new transaction, or becomes too\nold.  When any of these happen, it is not possible to resume the query, and\nthe whole operation must be restarted from the beginning.\n"
  example: []
  syntax:
    content: public virtual Task<PartitionResponse> PartitionQueryAsync(PartitionQueryRequest request, CancellationToken cancellationToken)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.PartitionQueryRequest
      description: The request object containing all of the parameters for the API call.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to use for this RPC.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.PartitionResponse}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function PartitionQueryAsync(request As PartitionQueryRequest, cancellationToken As CancellationToken) As Task(Of PartitionResponse)
  overload: Google.Cloud.Spanner.V1.SpannerClient.PartitionQueryAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.PartitionRead(Google.Cloud.Spanner.V1.PartitionReadRequest,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.PartitionRead(Google.Cloud.Spanner.V1.PartitionReadRequest,Google.Api.Gax.Grpc.CallSettings)
  id: PartitionRead(Google.Cloud.Spanner.V1.PartitionReadRequest,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: PartitionRead(PartitionReadRequest, CallSettings)
  nameWithType: SpannerClient.PartitionRead(PartitionReadRequest, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.PartitionRead(Google.Cloud.Spanner.V1.PartitionReadRequest, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: PartitionRead
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 2437
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCreates a set of partition tokens that can be used to execute a read\noperation in parallel.  Each of the returned partition tokens can be used\nby [StreamingRead][google.spanner.v1.Spanner.StreamingRead] to specify a subset of the read\nresult to read.  The same session and read-only transaction must be used by\nthe PartitionReadRequest used to create the partition tokens and the\nReadRequests that use the partition tokens.  There are no ordering\nguarantees on rows returned among the returned partition tokens, or even\nwithin each individual StreamingRead call issued with a partition_token.\n\nPartition tokens become invalid when the session used to create them\nis deleted, is idle for too long, begins a new transaction, or becomes too\nold.  When any of these happen, it is not possible to resume the read, and\nthe whole operation must be restarted from the beginning.\n"
  example: []
  syntax:
    content: public virtual PartitionResponse PartitionRead(PartitionReadRequest request, CallSettings callSettings = null)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.PartitionReadRequest
      description: The request object containing all of the parameters for the API call.
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: Google.Cloud.Spanner.V1.PartitionResponse
      description: The RPC response.
    content.vb: Public Overridable Function PartitionRead(request As PartitionReadRequest, callSettings As CallSettings = Nothing) As PartitionResponse
  overload: Google.Cloud.Spanner.V1.SpannerClient.PartitionRead*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.PartitionReadAsync(Google.Cloud.Spanner.V1.PartitionReadRequest,Google.Api.Gax.Grpc.CallSettings)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.PartitionReadAsync(Google.Cloud.Spanner.V1.PartitionReadRequest,Google.Api.Gax.Grpc.CallSettings)
  id: PartitionReadAsync(Google.Cloud.Spanner.V1.PartitionReadRequest,Google.Api.Gax.Grpc.CallSettings)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: PartitionReadAsync(PartitionReadRequest, CallSettings)
  nameWithType: SpannerClient.PartitionReadAsync(PartitionReadRequest, CallSettings)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.PartitionReadAsync(Google.Cloud.Spanner.V1.PartitionReadRequest, Google.Api.Gax.Grpc.CallSettings)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: PartitionReadAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 2458
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCreates a set of partition tokens that can be used to execute a read\noperation in parallel.  Each of the returned partition tokens can be used\nby [StreamingRead][google.spanner.v1.Spanner.StreamingRead] to specify a subset of the read\nresult to read.  The same session and read-only transaction must be used by\nthe PartitionReadRequest used to create the partition tokens and the\nReadRequests that use the partition tokens.  There are no ordering\nguarantees on rows returned among the returned partition tokens, or even\nwithin each individual StreamingRead call issued with a partition_token.\n\nPartition tokens become invalid when the session used to create them\nis deleted, is idle for too long, begins a new transaction, or becomes too\nold.  When any of these happen, it is not possible to resume the read, and\nthe whole operation must be restarted from the beginning.\n"
  example: []
  syntax:
    content: public virtual Task<PartitionResponse> PartitionReadAsync(PartitionReadRequest request, CallSettings callSettings = null)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.PartitionReadRequest
      description: The request object containing all of the parameters for the API call.
    - id: callSettings
      type: Google.Api.Gax.Grpc.CallSettings
      description: If not null, applies overrides to this RPC call.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.PartitionResponse}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function PartitionReadAsync(request As PartitionReadRequest, callSettings As CallSettings = Nothing) As Task(Of PartitionResponse)
  overload: Google.Cloud.Spanner.V1.SpannerClient.PartitionReadAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.PartitionReadAsync(Google.Cloud.Spanner.V1.PartitionReadRequest,System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.PartitionReadAsync(Google.Cloud.Spanner.V1.PartitionReadRequest,System.Threading.CancellationToken)
  id: PartitionReadAsync(Google.Cloud.Spanner.V1.PartitionReadRequest,System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: PartitionReadAsync(PartitionReadRequest, CancellationToken)
  nameWithType: SpannerClient.PartitionReadAsync(PartitionReadRequest, CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.PartitionReadAsync(Google.Cloud.Spanner.V1.PartitionReadRequest, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: PartitionReadAsync
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.g.cs
    startLine: 2479
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nCreates a set of partition tokens that can be used to execute a read\noperation in parallel.  Each of the returned partition tokens can be used\nby [StreamingRead][google.spanner.v1.Spanner.StreamingRead] to specify a subset of the read\nresult to read.  The same session and read-only transaction must be used by\nthe PartitionReadRequest used to create the partition tokens and the\nReadRequests that use the partition tokens.  There are no ordering\nguarantees on rows returned among the returned partition tokens, or even\nwithin each individual StreamingRead call issued with a partition_token.\n\nPartition tokens become invalid when the session used to create them\nis deleted, is idle for too long, begins a new transaction, or becomes too\nold.  When any of these happen, it is not possible to resume the read, and\nthe whole operation must be restarted from the beginning.\n"
  example: []
  syntax:
    content: public virtual Task<PartitionResponse> PartitionReadAsync(PartitionReadRequest request, CancellationToken cancellationToken)
    parameters:
    - id: request
      type: Google.Cloud.Spanner.V1.PartitionReadRequest
      description: The request object containing all of the parameters for the API call.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to use for this RPC.
    return:
      type: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.PartitionResponse}
      description: A Task containing the RPC response.
    content.vb: Public Overridable Function PartitionReadAsync(request As PartitionReadRequest, cancellationToken As CancellationToken) As Task(Of PartitionResponse)
  overload: Google.Cloud.Spanner.V1.SpannerClient.PartitionReadAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Cloud.Spanner.V1.SpannerClient.Settings
  commentId: P:Google.Cloud.Spanner.V1.SpannerClient.Settings
  id: Settings
  parent: Google.Cloud.Spanner.V1.SpannerClient
  langs:
  - csharp
  - vb
  name: Settings
  nameWithType: SpannerClient.Settings
  fullName: Google.Cloud.Spanner.V1.SpannerClient.Settings
  type: Property
  source:
    remote:
      path: apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.Streaming.cs
      branch: c0943b21872eacb5bb6cb8702a5ef26436cc6930
      repo: git@github.com:googleapis/google-cloud-dotnet.git
    id: Settings
    path: ../../../apis/Google.Cloud.Spanner.V1/Google.Cloud.Spanner.V1/SpannerClient.Streaming.cs
    startLine: 29
  assemblies:
  - Google.Cloud.Spanner.V1
  namespace: Google.Cloud.Spanner.V1
  summary: "\nReturns the effective <xref href=\"Google.Api.Gax.Grpc.CallSettings\" data-throw-if-not-resolved=\"false\"></xref> used for each API call.\nThis can be used to create a modified instance of <xref href=\"Google.Api.Gax.Grpc.CallSettings\" data-throw-if-not-resolved=\"false\"></xref> to pass\nfor a single API request.\n"
  example: []
  syntax:
    content: public virtual SpannerSettings Settings { get; protected set; }
    parameters: []
    return:
      type: Google.Cloud.Spanner.V1.SpannerSettings
    content.vb: Public Overridable Property Settings As SpannerSettings
  overload: Google.Cloud.Spanner.V1.SpannerClient.Settings*
  modifiers.csharp:
  - public
  - virtual
  - get
  - protected set
  modifiers.vb:
  - Public
  - Overridable
  - Get
  - Protected Set
references:
- uid: Google.Cloud.Spanner.V1
  commentId: N:Google.Cloud.Spanner.V1
  name: Google.Cloud.Spanner.V1
  nameWithType: Google.Cloud.Spanner.V1
  fullName: Google.Cloud.Spanner.V1
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Google.Cloud.Spanner.V1.SpannerClient.DefaultEndpoint*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.DefaultEndpoint
  name: DefaultEndpoint
  nameWithType: SpannerClient.DefaultEndpoint
  fullName: Google.Cloud.Spanner.V1.SpannerClient.DefaultEndpoint
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Google.Cloud.Spanner.V1.SpannerClient.DefaultScopes*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.DefaultScopes
  name: DefaultScopes
  nameWithType: SpannerClient.DefaultScopes
  fullName: Google.Cloud.Spanner.V1.SpannerClient.DefaultScopes
- uid: System.Collections.Generic.IReadOnlyList{System.String}
  commentId: T:System.Collections.Generic.IReadOnlyList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<String>
  nameWithType: IReadOnlyList<String>
  fullName: System.Collections.Generic.IReadOnlyList<System.String>
  nameWithType.vb: IReadOnlyList(Of String)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of System.String)
  name.vb: IReadOnlyList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Google.Cloud.Spanner.V1.SpannerClient
  commentId: T:Google.Cloud.Spanner.V1.SpannerClient
  parent: Google.Cloud.Spanner.V1
  name: SpannerClient
  nameWithType: SpannerClient
  fullName: Google.Cloud.Spanner.V1.SpannerClient
- uid: Google.Cloud.Spanner.V1.SpannerClientBuilder
  commentId: T:Google.Cloud.Spanner.V1.SpannerClientBuilder
  parent: Google.Cloud.Spanner.V1
  name: SpannerClientBuilder
  nameWithType: SpannerClientBuilder
  fullName: Google.Cloud.Spanner.V1.SpannerClientBuilder
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: Google.Cloud.Spanner.V1.SpannerClient.CreateAsync*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.CreateAsync
  name: CreateAsync
  nameWithType: SpannerClient.CreateAsync
  fullName: Google.Cloud.Spanner.V1.SpannerClient.CreateAsync
- uid: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.SpannerClient}
  commentId: T:System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.SpannerClient}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<SpannerClient>
  nameWithType: Task<SpannerClient>
  fullName: System.Threading.Tasks.Task<Google.Cloud.Spanner.V1.SpannerClient>
  nameWithType.vb: Task(Of SpannerClient)
  fullName.vb: System.Threading.Tasks.Task(Of Google.Cloud.Spanner.V1.SpannerClient)
  name.vb: Task(Of SpannerClient)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Cloud.Spanner.V1.SpannerClient
    name: SpannerClient
    nameWithType: SpannerClient
    fullName: Google.Cloud.Spanner.V1.SpannerClient
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Cloud.Spanner.V1.SpannerClient
    name: SpannerClient
    nameWithType: SpannerClient
    fullName: Google.Cloud.Spanner.V1.SpannerClient
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Google.Cloud.Spanner.V1.SpannerClient.Create*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.Create
  name: Create
  nameWithType: SpannerClient.Create
  fullName: Google.Cloud.Spanner.V1.SpannerClient.Create
- uid: Google.Cloud.Spanner.V1.SpannerClient.Create
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.Create
  parent: Google.Cloud.Spanner.V1.SpannerClient
  name: Create()
  nameWithType: SpannerClient.Create()
  fullName: Google.Cloud.Spanner.V1.SpannerClient.Create()
  spec.csharp:
  - uid: Google.Cloud.Spanner.V1.SpannerClient.Create
    name: Create
    nameWithType: SpannerClient.Create
    fullName: Google.Cloud.Spanner.V1.SpannerClient.Create
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Google.Cloud.Spanner.V1.SpannerClient.Create
    name: Create
    nameWithType: SpannerClient.Create
    fullName: Google.Cloud.Spanner.V1.SpannerClient.Create
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Cloud.Spanner.V1.SpannerClient.CreateAsync(System.Threading.CancellationToken)
  commentId: M:Google.Cloud.Spanner.V1.SpannerClient.CreateAsync(System.Threading.CancellationToken)
  parent: Google.Cloud.Spanner.V1.SpannerClient
  isExternal: true
  name: CreateAsync(CancellationToken)
  nameWithType: SpannerClient.CreateAsync(CancellationToken)
  fullName: Google.Cloud.Spanner.V1.SpannerClient.CreateAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Google.Cloud.Spanner.V1.SpannerClient.CreateAsync(System.Threading.CancellationToken)
    name: CreateAsync
    nameWithType: SpannerClient.CreateAsync
    fullName: Google.Cloud.Spanner.V1.SpannerClient.CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Google.Cloud.Spanner.V1.SpannerClient.CreateAsync(System.Threading.CancellationToken)
    name: CreateAsync
    nameWithType: SpannerClient.CreateAsync
    fullName: Google.Cloud.Spanner.V1.SpannerClient.CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Cloud.Spanner.V1.SpannerClient.ShutdownDefaultChannelsAsync*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.ShutdownDefaultChannelsAsync
  name: ShutdownDefaultChannelsAsync
  nameWithType: SpannerClient.ShutdownDefaultChannelsAsync
  fullName: Google.Cloud.Spanner.V1.SpannerClient.ShutdownDefaultChannelsAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Google.Cloud.Spanner.V1.SpannerClient.GrpcClient*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.GrpcClient
  name: GrpcClient
  nameWithType: SpannerClient.GrpcClient
  fullName: Google.Cloud.Spanner.V1.SpannerClient.GrpcClient
- uid: Google.Cloud.Spanner.V1.Spanner.SpannerClient
  commentId: T:Google.Cloud.Spanner.V1.Spanner.SpannerClient
  parent: Google.Cloud.Spanner.V1
  name: Spanner.SpannerClient
  nameWithType: Spanner.SpannerClient
  fullName: Google.Cloud.Spanner.V1.Spanner.SpannerClient
- uid: Google.Cloud.Spanner.V1.SpannerClient.CreateSession*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.CreateSession
  name: CreateSession
  nameWithType: SpannerClient.CreateSession
  fullName: Google.Cloud.Spanner.V1.SpannerClient.CreateSession
- uid: Google.Cloud.Spanner.V1.CreateSessionRequest
  commentId: T:Google.Cloud.Spanner.V1.CreateSessionRequest
  parent: Google.Cloud.Spanner.V1
  name: CreateSessionRequest
  nameWithType: CreateSessionRequest
  fullName: Google.Cloud.Spanner.V1.CreateSessionRequest
- uid: Google.Api.Gax.Grpc.CallSettings
  commentId: T:Google.Api.Gax.Grpc.CallSettings
  parent: Google.Api.Gax.Grpc
  isExternal: true
  name: CallSettings
  nameWithType: CallSettings
  fullName: Google.Api.Gax.Grpc.CallSettings
- uid: Google.Cloud.Spanner.V1.Session
  commentId: T:Google.Cloud.Spanner.V1.Session
  parent: Google.Cloud.Spanner.V1
  name: Session
  nameWithType: Session
  fullName: Google.Cloud.Spanner.V1.Session
- uid: Google.Api.Gax.Grpc
  commentId: N:Google.Api.Gax.Grpc
  isExternal: true
  name: Google.Api.Gax.Grpc
  nameWithType: Google.Api.Gax.Grpc
  fullName: Google.Api.Gax.Grpc
- uid: Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync
  name: CreateSessionAsync
  nameWithType: SpannerClient.CreateSessionAsync
  fullName: Google.Cloud.Spanner.V1.SpannerClient.CreateSessionAsync
- uid: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.Session}
  commentId: T:System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.Session}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Session>
  nameWithType: Task<Session>
  fullName: System.Threading.Tasks.Task<Google.Cloud.Spanner.V1.Session>
  nameWithType.vb: Task(Of Session)
  fullName.vb: System.Threading.Tasks.Task(Of Google.Cloud.Spanner.V1.Session)
  name.vb: Task(Of Session)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Cloud.Spanner.V1.Session
    name: Session
    nameWithType: Session
    fullName: Google.Cloud.Spanner.V1.Session
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Cloud.Spanner.V1.Session
    name: Session
    nameWithType: Session
    fullName: Google.Cloud.Spanner.V1.Session
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Cloud.Spanner.Common.V1.DatabaseName
  commentId: T:Google.Cloud.Spanner.Common.V1.DatabaseName
  parent: Google.Cloud.Spanner.Common.V1
  name: DatabaseName
  nameWithType: DatabaseName
  fullName: Google.Cloud.Spanner.Common.V1.DatabaseName
- uid: Google.Cloud.Spanner.Common.V1
  commentId: N:Google.Cloud.Spanner.Common.V1
  name: Google.Cloud.Spanner.Common.V1
  nameWithType: Google.Cloud.Spanner.Common.V1
  fullName: Google.Cloud.Spanner.Common.V1
- uid: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessions*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessions
  name: BatchCreateSessions
  nameWithType: SpannerClient.BatchCreateSessions
  fullName: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessions
- uid: Google.Cloud.Spanner.V1.BatchCreateSessionsRequest
  commentId: T:Google.Cloud.Spanner.V1.BatchCreateSessionsRequest
  parent: Google.Cloud.Spanner.V1
  name: BatchCreateSessionsRequest
  nameWithType: BatchCreateSessionsRequest
  fullName: Google.Cloud.Spanner.V1.BatchCreateSessionsRequest
- uid: Google.Cloud.Spanner.V1.BatchCreateSessionsResponse
  commentId: T:Google.Cloud.Spanner.V1.BatchCreateSessionsResponse
  parent: Google.Cloud.Spanner.V1
  name: BatchCreateSessionsResponse
  nameWithType: BatchCreateSessionsResponse
  fullName: Google.Cloud.Spanner.V1.BatchCreateSessionsResponse
- uid: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync
  name: BatchCreateSessionsAsync
  nameWithType: SpannerClient.BatchCreateSessionsAsync
  fullName: Google.Cloud.Spanner.V1.SpannerClient.BatchCreateSessionsAsync
- uid: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.BatchCreateSessionsResponse}
  commentId: T:System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.BatchCreateSessionsResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<BatchCreateSessionsResponse>
  nameWithType: Task<BatchCreateSessionsResponse>
  fullName: System.Threading.Tasks.Task<Google.Cloud.Spanner.V1.BatchCreateSessionsResponse>
  nameWithType.vb: Task(Of BatchCreateSessionsResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Google.Cloud.Spanner.V1.BatchCreateSessionsResponse)
  name.vb: Task(Of BatchCreateSessionsResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Cloud.Spanner.V1.BatchCreateSessionsResponse
    name: BatchCreateSessionsResponse
    nameWithType: BatchCreateSessionsResponse
    fullName: Google.Cloud.Spanner.V1.BatchCreateSessionsResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Cloud.Spanner.V1.BatchCreateSessionsResponse
    name: BatchCreateSessionsResponse
    nameWithType: BatchCreateSessionsResponse
    fullName: Google.Cloud.Spanner.V1.BatchCreateSessionsResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Google.Cloud.Spanner.V1.SpannerClient.GetSession*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.GetSession
  name: GetSession
  nameWithType: SpannerClient.GetSession
  fullName: Google.Cloud.Spanner.V1.SpannerClient.GetSession
- uid: Google.Cloud.Spanner.V1.GetSessionRequest
  commentId: T:Google.Cloud.Spanner.V1.GetSessionRequest
  parent: Google.Cloud.Spanner.V1
  name: GetSessionRequest
  nameWithType: GetSessionRequest
  fullName: Google.Cloud.Spanner.V1.GetSessionRequest
- uid: Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync
  name: GetSessionAsync
  nameWithType: SpannerClient.GetSessionAsync
  fullName: Google.Cloud.Spanner.V1.SpannerClient.GetSessionAsync
- uid: Google.Cloud.Spanner.V1.SessionName
  commentId: T:Google.Cloud.Spanner.V1.SessionName
  parent: Google.Cloud.Spanner.V1
  name: SessionName
  nameWithType: SessionName
  fullName: Google.Cloud.Spanner.V1.SessionName
- uid: Google.Cloud.Spanner.V1.SpannerClient.ListSessions*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.ListSessions
  name: ListSessions
  nameWithType: SpannerClient.ListSessions
  fullName: Google.Cloud.Spanner.V1.SpannerClient.ListSessions
- uid: Google.Cloud.Spanner.V1.ListSessionsRequest
  commentId: T:Google.Cloud.Spanner.V1.ListSessionsRequest
  parent: Google.Cloud.Spanner.V1
  name: ListSessionsRequest
  nameWithType: ListSessionsRequest
  fullName: Google.Cloud.Spanner.V1.ListSessionsRequest
- uid: Google.Api.Gax.PagedEnumerable{Google.Cloud.Spanner.V1.ListSessionsResponse,Google.Cloud.Spanner.V1.Session}
  commentId: T:Google.Api.Gax.PagedEnumerable{Google.Cloud.Spanner.V1.ListSessionsResponse,Google.Cloud.Spanner.V1.Session}
  parent: Google.Api.Gax
  definition: Google.Api.Gax.PagedEnumerable`2
  name: PagedEnumerable<ListSessionsResponse, Session>
  nameWithType: PagedEnumerable<ListSessionsResponse, Session>
  fullName: Google.Api.Gax.PagedEnumerable<Google.Cloud.Spanner.V1.ListSessionsResponse, Google.Cloud.Spanner.V1.Session>
  nameWithType.vb: PagedEnumerable(Of ListSessionsResponse, Session)
  fullName.vb: Google.Api.Gax.PagedEnumerable(Of Google.Cloud.Spanner.V1.ListSessionsResponse, Google.Cloud.Spanner.V1.Session)
  name.vb: PagedEnumerable(Of ListSessionsResponse, Session)
  spec.csharp:
  - uid: Google.Api.Gax.PagedEnumerable`2
    name: PagedEnumerable
    nameWithType: PagedEnumerable
    fullName: Google.Api.Gax.PagedEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Cloud.Spanner.V1.ListSessionsResponse
    name: ListSessionsResponse
    nameWithType: ListSessionsResponse
    fullName: Google.Cloud.Spanner.V1.ListSessionsResponse
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Google.Cloud.Spanner.V1.Session
    name: Session
    nameWithType: Session
    fullName: Google.Cloud.Spanner.V1.Session
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Api.Gax.PagedEnumerable`2
    name: PagedEnumerable
    nameWithType: PagedEnumerable
    fullName: Google.Api.Gax.PagedEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Cloud.Spanner.V1.ListSessionsResponse
    name: ListSessionsResponse
    nameWithType: ListSessionsResponse
    fullName: Google.Cloud.Spanner.V1.ListSessionsResponse
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Google.Cloud.Spanner.V1.Session
    name: Session
    nameWithType: Session
    fullName: Google.Cloud.Spanner.V1.Session
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Api.Gax.PagedEnumerable`2
  commentId: T:Google.Api.Gax.PagedEnumerable`2
  isExternal: true
  name: PagedEnumerable<TResponse, TResource>
  nameWithType: PagedEnumerable<TResponse, TResource>
  fullName: Google.Api.Gax.PagedEnumerable<TResponse, TResource>
  nameWithType.vb: PagedEnumerable(Of TResponse, TResource)
  fullName.vb: Google.Api.Gax.PagedEnumerable(Of TResponse, TResource)
  name.vb: PagedEnumerable(Of TResponse, TResource)
  spec.csharp:
  - uid: Google.Api.Gax.PagedEnumerable`2
    name: PagedEnumerable
    nameWithType: PagedEnumerable
    fullName: Google.Api.Gax.PagedEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Api.Gax.PagedEnumerable`2
    name: PagedEnumerable
    nameWithType: PagedEnumerable
    fullName: Google.Api.Gax.PagedEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Api.Gax
  commentId: N:Google.Api.Gax
  isExternal: true
  name: Google.Api.Gax
  nameWithType: Google.Api.Gax
  fullName: Google.Api.Gax
- uid: Google.Cloud.Spanner.V1.SpannerClient.ListSessionsAsync*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.ListSessionsAsync
  name: ListSessionsAsync
  nameWithType: SpannerClient.ListSessionsAsync
  fullName: Google.Cloud.Spanner.V1.SpannerClient.ListSessionsAsync
- uid: Google.Api.Gax.PagedAsyncEnumerable{Google.Cloud.Spanner.V1.ListSessionsResponse,Google.Cloud.Spanner.V1.Session}
  commentId: T:Google.Api.Gax.PagedAsyncEnumerable{Google.Cloud.Spanner.V1.ListSessionsResponse,Google.Cloud.Spanner.V1.Session}
  parent: Google.Api.Gax
  definition: Google.Api.Gax.PagedAsyncEnumerable`2
  name: PagedAsyncEnumerable<ListSessionsResponse, Session>
  nameWithType: PagedAsyncEnumerable<ListSessionsResponse, Session>
  fullName: Google.Api.Gax.PagedAsyncEnumerable<Google.Cloud.Spanner.V1.ListSessionsResponse, Google.Cloud.Spanner.V1.Session>
  nameWithType.vb: PagedAsyncEnumerable(Of ListSessionsResponse, Session)
  fullName.vb: Google.Api.Gax.PagedAsyncEnumerable(Of Google.Cloud.Spanner.V1.ListSessionsResponse, Google.Cloud.Spanner.V1.Session)
  name.vb: PagedAsyncEnumerable(Of ListSessionsResponse, Session)
  spec.csharp:
  - uid: Google.Api.Gax.PagedAsyncEnumerable`2
    name: PagedAsyncEnumerable
    nameWithType: PagedAsyncEnumerable
    fullName: Google.Api.Gax.PagedAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Cloud.Spanner.V1.ListSessionsResponse
    name: ListSessionsResponse
    nameWithType: ListSessionsResponse
    fullName: Google.Cloud.Spanner.V1.ListSessionsResponse
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Google.Cloud.Spanner.V1.Session
    name: Session
    nameWithType: Session
    fullName: Google.Cloud.Spanner.V1.Session
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Api.Gax.PagedAsyncEnumerable`2
    name: PagedAsyncEnumerable
    nameWithType: PagedAsyncEnumerable
    fullName: Google.Api.Gax.PagedAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Cloud.Spanner.V1.ListSessionsResponse
    name: ListSessionsResponse
    nameWithType: ListSessionsResponse
    fullName: Google.Cloud.Spanner.V1.ListSessionsResponse
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Google.Cloud.Spanner.V1.Session
    name: Session
    nameWithType: Session
    fullName: Google.Cloud.Spanner.V1.Session
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Api.Gax.PagedAsyncEnumerable`2
  commentId: T:Google.Api.Gax.PagedAsyncEnumerable`2
  isExternal: true
  name: PagedAsyncEnumerable<TResponse, TResource>
  nameWithType: PagedAsyncEnumerable<TResponse, TResource>
  fullName: Google.Api.Gax.PagedAsyncEnumerable<TResponse, TResource>
  nameWithType.vb: PagedAsyncEnumerable(Of TResponse, TResource)
  fullName.vb: Google.Api.Gax.PagedAsyncEnumerable(Of TResponse, TResource)
  name.vb: PagedAsyncEnumerable(Of TResponse, TResource)
  spec.csharp:
  - uid: Google.Api.Gax.PagedAsyncEnumerable`2
    name: PagedAsyncEnumerable
    nameWithType: PagedAsyncEnumerable
    fullName: Google.Api.Gax.PagedAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Api.Gax.PagedAsyncEnumerable`2
    name: PagedAsyncEnumerable
    nameWithType: PagedAsyncEnumerable
    fullName: Google.Api.Gax.PagedAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Cloud.Spanner.V1.SpannerClient.DeleteSession*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.DeleteSession
  name: DeleteSession
  nameWithType: SpannerClient.DeleteSession
  fullName: Google.Cloud.Spanner.V1.SpannerClient.DeleteSession
- uid: Google.Cloud.Spanner.V1.DeleteSessionRequest
  commentId: T:Google.Cloud.Spanner.V1.DeleteSessionRequest
  parent: Google.Cloud.Spanner.V1
  name: DeleteSessionRequest
  nameWithType: DeleteSessionRequest
  fullName: Google.Cloud.Spanner.V1.DeleteSessionRequest
- uid: Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync
  name: DeleteSessionAsync
  nameWithType: SpannerClient.DeleteSessionAsync
  fullName: Google.Cloud.Spanner.V1.SpannerClient.DeleteSessionAsync
- uid: Google.Cloud.Spanner.V1.SpannerClient.ExecuteSql*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.ExecuteSql
  name: ExecuteSql
  nameWithType: SpannerClient.ExecuteSql
  fullName: Google.Cloud.Spanner.V1.SpannerClient.ExecuteSql
- uid: Google.Cloud.Spanner.V1.ExecuteSqlRequest
  commentId: T:Google.Cloud.Spanner.V1.ExecuteSqlRequest
  parent: Google.Cloud.Spanner.V1
  name: ExecuteSqlRequest
  nameWithType: ExecuteSqlRequest
  fullName: Google.Cloud.Spanner.V1.ExecuteSqlRequest
- uid: Google.Cloud.Spanner.V1.ResultSet
  commentId: T:Google.Cloud.Spanner.V1.ResultSet
  parent: Google.Cloud.Spanner.V1
  name: ResultSet
  nameWithType: ResultSet
  fullName: Google.Cloud.Spanner.V1.ResultSet
- uid: Google.Cloud.Spanner.V1.SpannerClient.ExecuteSqlAsync*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.ExecuteSqlAsync
  name: ExecuteSqlAsync
  nameWithType: SpannerClient.ExecuteSqlAsync
  fullName: Google.Cloud.Spanner.V1.SpannerClient.ExecuteSqlAsync
- uid: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.ResultSet}
  commentId: T:System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.ResultSet}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ResultSet>
  nameWithType: Task<ResultSet>
  fullName: System.Threading.Tasks.Task<Google.Cloud.Spanner.V1.ResultSet>
  nameWithType.vb: Task(Of ResultSet)
  fullName.vb: System.Threading.Tasks.Task(Of Google.Cloud.Spanner.V1.ResultSet)
  name.vb: Task(Of ResultSet)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Cloud.Spanner.V1.ResultSet
    name: ResultSet
    nameWithType: ResultSet
    fullName: Google.Cloud.Spanner.V1.ResultSet
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Cloud.Spanner.V1.ResultSet
    name: ResultSet
    nameWithType: ResultSet
    fullName: Google.Cloud.Spanner.V1.ResultSet
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Cloud.Spanner.V1.SpannerClient.ExecuteStreamingSql*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.ExecuteStreamingSql
  name: ExecuteStreamingSql
  nameWithType: SpannerClient.ExecuteStreamingSql
  fullName: Google.Cloud.Spanner.V1.SpannerClient.ExecuteStreamingSql
- uid: Google.Cloud.Spanner.V1.SpannerClient.ExecuteStreamingSqlStream
  commentId: T:Google.Cloud.Spanner.V1.SpannerClient.ExecuteStreamingSqlStream
  parent: Google.Cloud.Spanner.V1
  name: SpannerClient.ExecuteStreamingSqlStream
  nameWithType: SpannerClient.ExecuteStreamingSqlStream
  fullName: Google.Cloud.Spanner.V1.SpannerClient.ExecuteStreamingSqlStream
- uid: Google.Cloud.Spanner.V1.SpannerClient.ExecuteBatchDml*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.ExecuteBatchDml
  name: ExecuteBatchDml
  nameWithType: SpannerClient.ExecuteBatchDml
  fullName: Google.Cloud.Spanner.V1.SpannerClient.ExecuteBatchDml
- uid: Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest
  commentId: T:Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest
  parent: Google.Cloud.Spanner.V1
  name: ExecuteBatchDmlRequest
  nameWithType: ExecuteBatchDmlRequest
  fullName: Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest
- uid: Google.Cloud.Spanner.V1.ExecuteBatchDmlResponse
  commentId: T:Google.Cloud.Spanner.V1.ExecuteBatchDmlResponse
  parent: Google.Cloud.Spanner.V1
  name: ExecuteBatchDmlResponse
  nameWithType: ExecuteBatchDmlResponse
  fullName: Google.Cloud.Spanner.V1.ExecuteBatchDmlResponse
- uid: Google.Cloud.Spanner.V1.SpannerClient.ExecuteBatchDmlAsync*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.ExecuteBatchDmlAsync
  name: ExecuteBatchDmlAsync
  nameWithType: SpannerClient.ExecuteBatchDmlAsync
  fullName: Google.Cloud.Spanner.V1.SpannerClient.ExecuteBatchDmlAsync
- uid: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.ExecuteBatchDmlResponse}
  commentId: T:System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.ExecuteBatchDmlResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ExecuteBatchDmlResponse>
  nameWithType: Task<ExecuteBatchDmlResponse>
  fullName: System.Threading.Tasks.Task<Google.Cloud.Spanner.V1.ExecuteBatchDmlResponse>
  nameWithType.vb: Task(Of ExecuteBatchDmlResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Google.Cloud.Spanner.V1.ExecuteBatchDmlResponse)
  name.vb: Task(Of ExecuteBatchDmlResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Cloud.Spanner.V1.ExecuteBatchDmlResponse
    name: ExecuteBatchDmlResponse
    nameWithType: ExecuteBatchDmlResponse
    fullName: Google.Cloud.Spanner.V1.ExecuteBatchDmlResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Cloud.Spanner.V1.ExecuteBatchDmlResponse
    name: ExecuteBatchDmlResponse
    nameWithType: ExecuteBatchDmlResponse
    fullName: Google.Cloud.Spanner.V1.ExecuteBatchDmlResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Cloud.Spanner.V1.SpannerClient.Read*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.Read
  name: Read
  nameWithType: SpannerClient.Read
  fullName: Google.Cloud.Spanner.V1.SpannerClient.Read
- uid: Google.Cloud.Spanner.V1.ReadRequest
  commentId: T:Google.Cloud.Spanner.V1.ReadRequest
  parent: Google.Cloud.Spanner.V1
  name: ReadRequest
  nameWithType: ReadRequest
  fullName: Google.Cloud.Spanner.V1.ReadRequest
- uid: Google.Cloud.Spanner.V1.SpannerClient.ReadAsync*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.ReadAsync
  name: ReadAsync
  nameWithType: SpannerClient.ReadAsync
  fullName: Google.Cloud.Spanner.V1.SpannerClient.ReadAsync
- uid: Google.Cloud.Spanner.V1.SpannerClient.StreamingRead*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.StreamingRead
  name: StreamingRead
  nameWithType: SpannerClient.StreamingRead
  fullName: Google.Cloud.Spanner.V1.SpannerClient.StreamingRead
- uid: Google.Cloud.Spanner.V1.SpannerClient.StreamingReadStream
  commentId: T:Google.Cloud.Spanner.V1.SpannerClient.StreamingReadStream
  parent: Google.Cloud.Spanner.V1
  name: SpannerClient.StreamingReadStream
  nameWithType: SpannerClient.StreamingReadStream
  fullName: Google.Cloud.Spanner.V1.SpannerClient.StreamingReadStream
- uid: Google.Cloud.Spanner.V1.SpannerClient.BeginTransaction*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.BeginTransaction
  name: BeginTransaction
  nameWithType: SpannerClient.BeginTransaction
  fullName: Google.Cloud.Spanner.V1.SpannerClient.BeginTransaction
- uid: Google.Cloud.Spanner.V1.BeginTransactionRequest
  commentId: T:Google.Cloud.Spanner.V1.BeginTransactionRequest
  parent: Google.Cloud.Spanner.V1
  name: BeginTransactionRequest
  nameWithType: BeginTransactionRequest
  fullName: Google.Cloud.Spanner.V1.BeginTransactionRequest
- uid: Google.Cloud.Spanner.V1.Transaction
  commentId: T:Google.Cloud.Spanner.V1.Transaction
  parent: Google.Cloud.Spanner.V1
  name: Transaction
  nameWithType: Transaction
  fullName: Google.Cloud.Spanner.V1.Transaction
- uid: Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync
  name: BeginTransactionAsync
  nameWithType: SpannerClient.BeginTransactionAsync
  fullName: Google.Cloud.Spanner.V1.SpannerClient.BeginTransactionAsync
- uid: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.Transaction}
  commentId: T:System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.Transaction}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Transaction>
  nameWithType: Task<Transaction>
  fullName: System.Threading.Tasks.Task<Google.Cloud.Spanner.V1.Transaction>
  nameWithType.vb: Task(Of Transaction)
  fullName.vb: System.Threading.Tasks.Task(Of Google.Cloud.Spanner.V1.Transaction)
  name.vb: Task(Of Transaction)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Cloud.Spanner.V1.Transaction
    name: Transaction
    nameWithType: Transaction
    fullName: Google.Cloud.Spanner.V1.Transaction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Cloud.Spanner.V1.Transaction
    name: Transaction
    nameWithType: Transaction
    fullName: Google.Cloud.Spanner.V1.Transaction
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Cloud.Spanner.V1.TransactionOptions
  commentId: T:Google.Cloud.Spanner.V1.TransactionOptions
  parent: Google.Cloud.Spanner.V1
  name: TransactionOptions
  nameWithType: TransactionOptions
  fullName: Google.Cloud.Spanner.V1.TransactionOptions
- uid: Google.Cloud.Spanner.V1.SpannerClient.Commit*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.Commit
  name: Commit
  nameWithType: SpannerClient.Commit
  fullName: Google.Cloud.Spanner.V1.SpannerClient.Commit
- uid: Google.Cloud.Spanner.V1.CommitRequest
  commentId: T:Google.Cloud.Spanner.V1.CommitRequest
  parent: Google.Cloud.Spanner.V1
  name: CommitRequest
  nameWithType: CommitRequest
  fullName: Google.Cloud.Spanner.V1.CommitRequest
- uid: Google.Cloud.Spanner.V1.CommitResponse
  commentId: T:Google.Cloud.Spanner.V1.CommitResponse
  parent: Google.Cloud.Spanner.V1
  name: CommitResponse
  nameWithType: CommitResponse
  fullName: Google.Cloud.Spanner.V1.CommitResponse
- uid: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.CommitAsync
  name: CommitAsync
  nameWithType: SpannerClient.CommitAsync
  fullName: Google.Cloud.Spanner.V1.SpannerClient.CommitAsync
- uid: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.CommitResponse}
  commentId: T:System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.CommitResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<CommitResponse>
  nameWithType: Task<CommitResponse>
  fullName: System.Threading.Tasks.Task<Google.Cloud.Spanner.V1.CommitResponse>
  nameWithType.vb: Task(Of CommitResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Google.Cloud.Spanner.V1.CommitResponse)
  name.vb: Task(Of CommitResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Cloud.Spanner.V1.CommitResponse
    name: CommitResponse
    nameWithType: CommitResponse
    fullName: Google.Cloud.Spanner.V1.CommitResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Cloud.Spanner.V1.CommitResponse
    name: CommitResponse
    nameWithType: CommitResponse
    fullName: Google.Cloud.Spanner.V1.CommitResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.ByteString
  commentId: T:Google.Protobuf.ByteString
  parent: Google.Protobuf
  isExternal: true
  name: ByteString
  nameWithType: ByteString
  fullName: Google.Protobuf.ByteString
- uid: System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation}
  commentId: T:System.Collections.Generic.IEnumerable{Google.Cloud.Spanner.V1.Mutation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Mutation>
  nameWithType: IEnumerable<Mutation>
  fullName: System.Collections.Generic.IEnumerable<Google.Cloud.Spanner.V1.Mutation>
  nameWithType.vb: IEnumerable(Of Mutation)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Google.Cloud.Spanner.V1.Mutation)
  name.vb: IEnumerable(Of Mutation)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Cloud.Spanner.V1.Mutation
    name: Mutation
    nameWithType: Mutation
    fullName: Google.Cloud.Spanner.V1.Mutation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Cloud.Spanner.V1.Mutation
    name: Mutation
    nameWithType: Mutation
    fullName: Google.Cloud.Spanner.V1.Mutation
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf
  commentId: N:Google.Protobuf
  isExternal: true
  name: Google.Protobuf
  nameWithType: Google.Protobuf
  fullName: Google.Protobuf
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Cloud.Spanner.V1.SpannerClient.Rollback*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.Rollback
  name: Rollback
  nameWithType: SpannerClient.Rollback
  fullName: Google.Cloud.Spanner.V1.SpannerClient.Rollback
- uid: Google.Cloud.Spanner.V1.RollbackRequest
  commentId: T:Google.Cloud.Spanner.V1.RollbackRequest
  parent: Google.Cloud.Spanner.V1
  name: RollbackRequest
  nameWithType: RollbackRequest
  fullName: Google.Cloud.Spanner.V1.RollbackRequest
- uid: Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync
  name: RollbackAsync
  nameWithType: SpannerClient.RollbackAsync
  fullName: Google.Cloud.Spanner.V1.SpannerClient.RollbackAsync
- uid: Google.Cloud.Spanner.V1.SpannerClient.PartitionQuery*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.PartitionQuery
  name: PartitionQuery
  nameWithType: SpannerClient.PartitionQuery
  fullName: Google.Cloud.Spanner.V1.SpannerClient.PartitionQuery
- uid: Google.Cloud.Spanner.V1.PartitionQueryRequest
  commentId: T:Google.Cloud.Spanner.V1.PartitionQueryRequest
  parent: Google.Cloud.Spanner.V1
  name: PartitionQueryRequest
  nameWithType: PartitionQueryRequest
  fullName: Google.Cloud.Spanner.V1.PartitionQueryRequest
- uid: Google.Cloud.Spanner.V1.PartitionResponse
  commentId: T:Google.Cloud.Spanner.V1.PartitionResponse
  parent: Google.Cloud.Spanner.V1
  name: PartitionResponse
  nameWithType: PartitionResponse
  fullName: Google.Cloud.Spanner.V1.PartitionResponse
- uid: Google.Cloud.Spanner.V1.SpannerClient.PartitionQueryAsync*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.PartitionQueryAsync
  name: PartitionQueryAsync
  nameWithType: SpannerClient.PartitionQueryAsync
  fullName: Google.Cloud.Spanner.V1.SpannerClient.PartitionQueryAsync
- uid: System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.PartitionResponse}
  commentId: T:System.Threading.Tasks.Task{Google.Cloud.Spanner.V1.PartitionResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<PartitionResponse>
  nameWithType: Task<PartitionResponse>
  fullName: System.Threading.Tasks.Task<Google.Cloud.Spanner.V1.PartitionResponse>
  nameWithType.vb: Task(Of PartitionResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Google.Cloud.Spanner.V1.PartitionResponse)
  name.vb: Task(Of PartitionResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Cloud.Spanner.V1.PartitionResponse
    name: PartitionResponse
    nameWithType: PartitionResponse
    fullName: Google.Cloud.Spanner.V1.PartitionResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Cloud.Spanner.V1.PartitionResponse
    name: PartitionResponse
    nameWithType: PartitionResponse
    fullName: Google.Cloud.Spanner.V1.PartitionResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Cloud.Spanner.V1.SpannerClient.PartitionRead*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.PartitionRead
  name: PartitionRead
  nameWithType: SpannerClient.PartitionRead
  fullName: Google.Cloud.Spanner.V1.SpannerClient.PartitionRead
- uid: Google.Cloud.Spanner.V1.PartitionReadRequest
  commentId: T:Google.Cloud.Spanner.V1.PartitionReadRequest
  parent: Google.Cloud.Spanner.V1
  name: PartitionReadRequest
  nameWithType: PartitionReadRequest
  fullName: Google.Cloud.Spanner.V1.PartitionReadRequest
- uid: Google.Cloud.Spanner.V1.SpannerClient.PartitionReadAsync*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.PartitionReadAsync
  name: PartitionReadAsync
  nameWithType: SpannerClient.PartitionReadAsync
  fullName: Google.Cloud.Spanner.V1.SpannerClient.PartitionReadAsync
- uid: Google.Cloud.Spanner.V1.SpannerClient.Settings*
  commentId: Overload:Google.Cloud.Spanner.V1.SpannerClient.Settings
  name: Settings
  nameWithType: SpannerClient.Settings
  fullName: Google.Cloud.Spanner.V1.SpannerClient.Settings
- uid: Google.Cloud.Spanner.V1.SpannerSettings
  commentId: T:Google.Cloud.Spanner.V1.SpannerSettings
  parent: Google.Cloud.Spanner.V1
  name: SpannerSettings
  nameWithType: SpannerSettings
  fullName: Google.Cloud.Spanner.V1.SpannerSettings
