### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.CsvOptions"
  id: "CsvOptions"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.CsvOptions.Builder"
  - "com.google.cloud.bigquery.CsvOptions.allowJaggedRows()"
  - "com.google.cloud.bigquery.CsvOptions.allowQuotedNewLines()"
  - "com.google.cloud.bigquery.CsvOptions.equals(java.lang.Object)"
  - "com.google.cloud.bigquery.CsvOptions.getEncoding()"
  - "com.google.cloud.bigquery.CsvOptions.getFieldDelimiter()"
  - "com.google.cloud.bigquery.CsvOptions.getQuote()"
  - "com.google.cloud.bigquery.CsvOptions.getSkipLeadingRows()"
  - "com.google.cloud.bigquery.CsvOptions.hashCode()"
  - "com.google.cloud.bigquery.CsvOptions.newBuilder()"
  - "com.google.cloud.bigquery.CsvOptions.toBuilder()"
  - "com.google.cloud.bigquery.CsvOptions.toString()"
  langs:
  - "java"
  name: "CsvOptions"
  nameWithType: "CsvOptions"
  fullName: "com.google.cloud.bigquery.CsvOptions"
  type: "Class"
  package: "com.google.cloud.bigquery"
  summary: "Google BigQuery options for CSV format. This class wraps some properties of CSV files used by BigQuery to parse external data."
  syntax:
    content: "public final class CsvOptions extends FormatOptions"
  inheritance:
  - "java.lang.Object"
  - "com.google.cloud.bigquery.FormatOptions"
  inheritedMembers:
  - "com.google.cloud.bigquery.FormatOptions.avro()"
  - "com.google.cloud.bigquery.FormatOptions.bigtable()"
  - "com.google.cloud.bigquery.FormatOptions.csv()"
  - "com.google.cloud.bigquery.FormatOptions.datastoreBackup()"
  - "com.google.cloud.bigquery.FormatOptions.equals(java.lang.Object)"
  - "com.google.cloud.bigquery.FormatOptions.getType()"
  - "com.google.cloud.bigquery.FormatOptions.googleSheets()"
  - "com.google.cloud.bigquery.FormatOptions.hashCode()"
  - "com.google.cloud.bigquery.FormatOptions.json()"
  - "com.google.cloud.bigquery.FormatOptions.of(java.lang.String)"
  - "com.google.cloud.bigquery.FormatOptions.orc()"
  - "com.google.cloud.bigquery.FormatOptions.parquet()"
  - "com.google.cloud.bigquery.FormatOptions.toString()"
  - "java.lang.Object.clone()"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.CsvOptions.CsvOptions(com.google.cloud.bigquery.CsvOptions.Builder)"
  id: "CsvOptions(com.google.cloud.bigquery.CsvOptions.Builder)"
  parent: "com.google.cloud.bigquery.CsvOptions"
  langs:
  - "java"
  name: "CsvOptions(CsvOptions.Builder builder)"
  nameWithType: "CsvOptions.CsvOptions(CsvOptions.Builder builder)"
  fullName: "com.google.cloud.bigquery.CsvOptions.CsvOptions(CsvOptions.Builder builder)"
  overload: "com.google.cloud.bigquery.CsvOptions.CsvOptions*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "private CsvOptions(CsvOptions.Builder builder)"
    parameters:
    - id: "builder"
      type: "com.google.cloud.bigquery.CsvOptions.Builder"
- uid: "com.google.cloud.bigquery.CsvOptions.allowJaggedRows()"
  id: "allowJaggedRows()"
  parent: "com.google.cloud.bigquery.CsvOptions"
  langs:
  - "java"
  name: "allowJaggedRows()"
  nameWithType: "CsvOptions.allowJaggedRows()"
  fullName: "com.google.cloud.bigquery.CsvOptions.allowJaggedRows()"
  overload: "com.google.cloud.bigquery.CsvOptions.allowJaggedRows*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns whether BigQuery should accept rows that are missing trailing optional columns. If `true`, BigQuery treats missing trailing columns as null values. If `false`, records with missing trailing columns are treated as bad records, and if the number of bad records exceeds <xref uid=\"com.google.cloud.bigquery.ExternalTableDefinition.getMaxBadRecords()\" data-throw-if-not-resolved=\"false\">ExternalTableDefinition#getMaxBadRecords()</xref>, an invalid error is returned in the job result."
  syntax:
    content: "public Boolean allowJaggedRows()"
    return:
      type: "java.lang.Boolean"
- uid: "com.google.cloud.bigquery.CsvOptions.allowQuotedNewLines()"
  id: "allowQuotedNewLines()"
  parent: "com.google.cloud.bigquery.CsvOptions"
  langs:
  - "java"
  name: "allowQuotedNewLines()"
  nameWithType: "CsvOptions.allowQuotedNewLines()"
  fullName: "com.google.cloud.bigquery.CsvOptions.allowQuotedNewLines()"
  overload: "com.google.cloud.bigquery.CsvOptions.allowQuotedNewLines*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns whether BigQuery should allow quoted data sections that contain newline characters in a CSV file."
  syntax:
    content: "public Boolean allowQuotedNewLines()"
    return:
      type: "java.lang.Boolean"
- uid: "com.google.cloud.bigquery.CsvOptions.equals(java.lang.Object)"
  id: "equals(java.lang.Object)"
  parent: "com.google.cloud.bigquery.CsvOptions"
  langs:
  - "java"
  name: "equals(Object obj)"
  nameWithType: "CsvOptions.equals(Object obj)"
  fullName: "com.google.cloud.bigquery.CsvOptions.equals(Object obj)"
  overload: "com.google.cloud.bigquery.CsvOptions.equals*"
  overridden: "com.google.cloud.bigquery.FormatOptions.equals(java.lang.Object)"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public boolean equals(Object obj)"
    parameters:
    - id: "obj"
      type: "java.lang.Object"
    return:
      type: "boolean"
- uid: "com.google.cloud.bigquery.CsvOptions.getEncoding()"
  id: "getEncoding()"
  parent: "com.google.cloud.bigquery.CsvOptions"
  langs:
  - "java"
  name: "getEncoding()"
  nameWithType: "CsvOptions.getEncoding()"
  fullName: "com.google.cloud.bigquery.CsvOptions.getEncoding()"
  overload: "com.google.cloud.bigquery.CsvOptions.getEncoding*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the character encoding of the data. The supported values are UTF-8 or ISO-8859-1. If not set, UTF-8 is used. BigQuery decodes the data after the raw, binary data has been split using the values set in <xref uid=\"com.google.cloud.bigquery.CsvOptions.getQuote()\" data-throw-if-not-resolved=\"false\">#getQuote()</xref> and <xref uid=\"com.google.cloud.bigquery.CsvOptions.getFieldDelimiter()\" data-throw-if-not-resolved=\"false\">#getFieldDelimiter()</xref>."
  syntax:
    content: "public String getEncoding()"
    return:
      type: "java.lang.String"
- uid: "com.google.cloud.bigquery.CsvOptions.getFieldDelimiter()"
  id: "getFieldDelimiter()"
  parent: "com.google.cloud.bigquery.CsvOptions"
  langs:
  - "java"
  name: "getFieldDelimiter()"
  nameWithType: "CsvOptions.getFieldDelimiter()"
  fullName: "com.google.cloud.bigquery.CsvOptions.getFieldDelimiter()"
  overload: "com.google.cloud.bigquery.CsvOptions.getFieldDelimiter*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the separator for fields in a CSV file."
  syntax:
    content: "public String getFieldDelimiter()"
    return:
      type: "java.lang.String"
- uid: "com.google.cloud.bigquery.CsvOptions.getQuote()"
  id: "getQuote()"
  parent: "com.google.cloud.bigquery.CsvOptions"
  langs:
  - "java"
  name: "getQuote()"
  nameWithType: "CsvOptions.getQuote()"
  fullName: "com.google.cloud.bigquery.CsvOptions.getQuote()"
  overload: "com.google.cloud.bigquery.CsvOptions.getQuote*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the value that is used to quote data sections in a CSV file."
  syntax:
    content: "public String getQuote()"
    return:
      type: "java.lang.String"
- uid: "com.google.cloud.bigquery.CsvOptions.getSkipLeadingRows()"
  id: "getSkipLeadingRows()"
  parent: "com.google.cloud.bigquery.CsvOptions"
  langs:
  - "java"
  name: "getSkipLeadingRows()"
  nameWithType: "CsvOptions.getSkipLeadingRows()"
  fullName: "com.google.cloud.bigquery.CsvOptions.getSkipLeadingRows()"
  overload: "com.google.cloud.bigquery.CsvOptions.getSkipLeadingRows*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the number of rows at the top of a CSV file that BigQuery will skip when reading the data."
  syntax:
    content: "public Long getSkipLeadingRows()"
    return:
      type: "java.lang.Long"
- uid: "com.google.cloud.bigquery.CsvOptions.hashCode()"
  id: "hashCode()"
  parent: "com.google.cloud.bigquery.CsvOptions"
  langs:
  - "java"
  name: "hashCode()"
  nameWithType: "CsvOptions.hashCode()"
  fullName: "com.google.cloud.bigquery.CsvOptions.hashCode()"
  overload: "com.google.cloud.bigquery.CsvOptions.hashCode*"
  overridden: "com.google.cloud.bigquery.FormatOptions.hashCode()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public int hashCode()"
    return:
      type: "int"
- uid: "com.google.cloud.bigquery.CsvOptions.newBuilder()"
  id: "newBuilder()"
  parent: "com.google.cloud.bigquery.CsvOptions"
  langs:
  - "java"
  name: "newBuilder()"
  nameWithType: "CsvOptions.newBuilder()"
  fullName: "com.google.cloud.bigquery.CsvOptions.newBuilder()"
  overload: "com.google.cloud.bigquery.CsvOptions.newBuilder*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a builder for a CsvOptions object."
  syntax:
    content: "public static CsvOptions.Builder newBuilder()"
    return:
      type: "com.google.cloud.bigquery.CsvOptions.Builder"
- uid: "com.google.cloud.bigquery.CsvOptions.toBuilder()"
  id: "toBuilder()"
  parent: "com.google.cloud.bigquery.CsvOptions"
  langs:
  - "java"
  name: "toBuilder()"
  nameWithType: "CsvOptions.toBuilder()"
  fullName: "com.google.cloud.bigquery.CsvOptions.toBuilder()"
  overload: "com.google.cloud.bigquery.CsvOptions.toBuilder*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a builder for the `CsvOptions` object."
  syntax:
    content: "public CsvOptions.Builder toBuilder()"
    return:
      type: "com.google.cloud.bigquery.CsvOptions.Builder"
- uid: "com.google.cloud.bigquery.CsvOptions.toString()"
  id: "toString()"
  parent: "com.google.cloud.bigquery.CsvOptions"
  langs:
  - "java"
  name: "toString()"
  nameWithType: "CsvOptions.toString()"
  fullName: "com.google.cloud.bigquery.CsvOptions.toString()"
  overload: "com.google.cloud.bigquery.CsvOptions.toString*"
  overridden: "com.google.cloud.bigquery.FormatOptions.toString()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public String toString()"
    return:
      type: "java.lang.String"
references:
- uid: "com.google.cloud.bigquery.CsvOptions.Builder"
  name: "CsvOptions.Builder"
  nameWithType: "CsvOptions.Builder"
  fullName: "com.google.cloud.bigquery.CsvOptions.Builder"
- uid: "com.google.cloud.bigquery.CsvOptions.CsvOptions*"
  name: "CsvOptions"
  nameWithType: "CsvOptions.CsvOptions"
  fullName: "com.google.cloud.bigquery.CsvOptions.CsvOptions"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Boolean"
  spec.java:
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
- uid: "com.google.cloud.bigquery.CsvOptions.allowJaggedRows*"
  name: "allowJaggedRows"
  nameWithType: "CsvOptions.allowJaggedRows"
  fullName: "com.google.cloud.bigquery.CsvOptions.allowJaggedRows"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.CsvOptions.allowQuotedNewLines*"
  name: "allowQuotedNewLines"
  nameWithType: "CsvOptions.allowQuotedNewLines"
  fullName: "com.google.cloud.bigquery.CsvOptions.allowQuotedNewLines"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.CsvOptions.getEncoding*"
  name: "getEncoding"
  nameWithType: "CsvOptions.getEncoding"
  fullName: "com.google.cloud.bigquery.CsvOptions.getEncoding"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.CsvOptions.getFieldDelimiter*"
  name: "getFieldDelimiter"
  nameWithType: "CsvOptions.getFieldDelimiter"
  fullName: "com.google.cloud.bigquery.CsvOptions.getFieldDelimiter"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.CsvOptions.getQuote*"
  name: "getQuote"
  nameWithType: "CsvOptions.getQuote"
  fullName: "com.google.cloud.bigquery.CsvOptions.getQuote"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Long"
  spec.java:
  - uid: "java.lang.Long"
    name: "Long"
    fullName: "java.lang.Long"
- uid: "com.google.cloud.bigquery.CsvOptions.getSkipLeadingRows*"
  name: "getSkipLeadingRows"
  nameWithType: "CsvOptions.getSkipLeadingRows"
  fullName: "com.google.cloud.bigquery.CsvOptions.getSkipLeadingRows"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.CsvOptions.toBuilder*"
  name: "toBuilder"
  nameWithType: "CsvOptions.toBuilder"
  fullName: "com.google.cloud.bigquery.CsvOptions.toBuilder"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.CsvOptions.toString*"
  name: "toString"
  nameWithType: "CsvOptions.toString"
  fullName: "com.google.cloud.bigquery.CsvOptions.toString"
  package: "com.google.cloud.bigquery"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.google.cloud.bigquery.CsvOptions.hashCode*"
  name: "hashCode"
  nameWithType: "CsvOptions.hashCode"
  fullName: "com.google.cloud.bigquery.CsvOptions.hashCode"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.google.cloud.bigquery.CsvOptions.equals*"
  name: "equals"
  nameWithType: "CsvOptions.equals"
  fullName: "com.google.cloud.bigquery.CsvOptions.equals"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.CsvOptions.newBuilder*"
  name: "newBuilder"
  nameWithType: "CsvOptions.newBuilder"
  fullName: "com.google.cloud.bigquery.CsvOptions.newBuilder"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.FormatOptions"
  name: "FormatOptions"
  nameWithType: "FormatOptions"
  fullName: "com.google.cloud.bigquery.FormatOptions"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "com.google.cloud.bigquery.FormatOptions.datastoreBackup()"
  name: "FormatOptions.datastoreBackup()"
  nameWithType: "FormatOptions.datastoreBackup()"
  fullName: "com.google.cloud.bigquery.FormatOptions.datastoreBackup()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "com.google.cloud.bigquery.FormatOptions.toString()"
  name: "FormatOptions.toString()"
  nameWithType: "FormatOptions.toString()"
  fullName: "com.google.cloud.bigquery.FormatOptions.toString()"
- uid: "com.google.cloud.bigquery.FormatOptions.orc()"
  name: "FormatOptions.orc()"
  nameWithType: "FormatOptions.orc()"
  fullName: "com.google.cloud.bigquery.FormatOptions.orc()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "com.google.cloud.bigquery.FormatOptions.avro()"
  name: "FormatOptions.avro()"
  nameWithType: "FormatOptions.avro()"
  fullName: "com.google.cloud.bigquery.FormatOptions.avro()"
- uid: "com.google.cloud.bigquery.FormatOptions.parquet()"
  name: "FormatOptions.parquet()"
  nameWithType: "FormatOptions.parquet()"
  fullName: "com.google.cloud.bigquery.FormatOptions.parquet()"
- uid: "com.google.cloud.bigquery.FormatOptions.of(java.lang.String)"
  name: "FormatOptions.of(String)"
  nameWithType: "FormatOptions.of(String)"
  fullName: "com.google.cloud.bigquery.FormatOptions.of(java.lang.String)"
- uid: "com.google.cloud.bigquery.FormatOptions.hashCode()"
  name: "FormatOptions.hashCode()"
  nameWithType: "FormatOptions.hashCode()"
  fullName: "com.google.cloud.bigquery.FormatOptions.hashCode()"
- uid: "com.google.cloud.bigquery.FormatOptions.equals(java.lang.Object)"
  name: "FormatOptions.equals(Object)"
  nameWithType: "FormatOptions.equals(Object)"
  fullName: "com.google.cloud.bigquery.FormatOptions.equals(java.lang.Object)"
- uid: "com.google.cloud.bigquery.FormatOptions.bigtable()"
  name: "FormatOptions.bigtable()"
  nameWithType: "FormatOptions.bigtable()"
  fullName: "com.google.cloud.bigquery.FormatOptions.bigtable()"
- uid: "com.google.cloud.bigquery.FormatOptions.csv()"
  name: "FormatOptions.csv()"
  nameWithType: "FormatOptions.csv()"
  fullName: "com.google.cloud.bigquery.FormatOptions.csv()"
- uid: "com.google.cloud.bigquery.FormatOptions.getType()"
  name: "FormatOptions.getType()"
  nameWithType: "FormatOptions.getType()"
  fullName: "com.google.cloud.bigquery.FormatOptions.getType()"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "com.google.cloud.bigquery.FormatOptions.googleSheets()"
  name: "FormatOptions.googleSheets()"
  nameWithType: "FormatOptions.googleSheets()"
  fullName: "com.google.cloud.bigquery.FormatOptions.googleSheets()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.FormatOptions.json()"
  name: "FormatOptions.json()"
  nameWithType: "FormatOptions.json()"
  fullName: "com.google.cloud.bigquery.FormatOptions.json()"
