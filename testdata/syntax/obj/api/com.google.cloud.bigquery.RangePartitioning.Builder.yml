### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.RangePartitioning.Builder"
  id: "Builder"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.RangePartitioning.Builder.build()"
  - "com.google.cloud.bigquery.RangePartitioning.Builder.setField(java.lang.String)"
  - "com.google.cloud.bigquery.RangePartitioning.Builder.setRange(com.google.cloud.bigquery.RangePartitioning.Range)"
  langs:
  - "java"
  name: "RangePartitioning.Builder"
  nameWithType: "RangePartitioning.Builder"
  fullName: "com.google.cloud.bigquery.RangePartitioning.Builder"
  type: "Class"
  package: "com.google.cloud.bigquery"
  summary: "A builder for `RangePartitioning` objects."
  syntax:
    content: "public static final class RangePartitioning.Builder"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.RangePartitioning.Builder.Builder()"
  id: "Builder()"
  parent: "com.google.cloud.bigquery.RangePartitioning.Builder"
  langs:
  - "java"
  name: "Builder()"
  nameWithType: "RangePartitioning.Builder.Builder()"
  fullName: "com.google.cloud.bigquery.RangePartitioning.Builder.Builder()"
  overload: "com.google.cloud.bigquery.RangePartitioning.Builder.Builder*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "private Builder()"
- uid: "com.google.cloud.bigquery.RangePartitioning.Builder.Builder(com.google.cloud.bigquery.RangePartitioning)"
  id: "Builder(com.google.cloud.bigquery.RangePartitioning)"
  parent: "com.google.cloud.bigquery.RangePartitioning.Builder"
  langs:
  - "java"
  name: "Builder(RangePartitioning rangePartitioning)"
  nameWithType: "RangePartitioning.Builder.Builder(RangePartitioning rangePartitioning)"
  fullName: "com.google.cloud.bigquery.RangePartitioning.Builder.Builder(RangePartitioning rangePartitioning)"
  overload: "com.google.cloud.bigquery.RangePartitioning.Builder.Builder*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "private Builder(RangePartitioning rangePartitioning)"
    parameters:
    - id: "rangePartitioning"
      type: "com.google.cloud.bigquery.RangePartitioning"
- uid: "com.google.cloud.bigquery.RangePartitioning.Builder.build()"
  id: "build()"
  parent: "com.google.cloud.bigquery.RangePartitioning.Builder"
  langs:
  - "java"
  name: "build()"
  nameWithType: "RangePartitioning.Builder.build()"
  fullName: "com.google.cloud.bigquery.RangePartitioning.Builder.build()"
  overload: "com.google.cloud.bigquery.RangePartitioning.Builder.build*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Creates a `RangePartitioning` object."
  syntax:
    content: "public RangePartitioning build()"
    return:
      type: "com.google.cloud.bigquery.RangePartitioning"
- uid: "com.google.cloud.bigquery.RangePartitioning.Builder.setField(java.lang.String)"
  id: "setField(java.lang.String)"
  parent: "com.google.cloud.bigquery.RangePartitioning.Builder"
  langs:
  - "java"
  name: "setField(String field)"
  nameWithType: "RangePartitioning.Builder.setField(String field)"
  fullName: "com.google.cloud.bigquery.RangePartitioning.Builder.setField(String field)"
  overload: "com.google.cloud.bigquery.RangePartitioning.Builder.setField*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "\\[Required\\] The table is partitioned by this field. The field must be a top- level NULLABLE/REQUIRED field. The only supported type is INTEGER/INT64."
  syntax:
    content: "public RangePartitioning.Builder setField(String field)"
    parameters:
    - id: "field"
      type: "java.lang.String"
      description: "field or <code>null</code> for none"
    return:
      type: "com.google.cloud.bigquery.RangePartitioning.Builder"
- uid: "com.google.cloud.bigquery.RangePartitioning.Builder.setRange(com.google.cloud.bigquery.RangePartitioning.Range)"
  id: "setRange(com.google.cloud.bigquery.RangePartitioning.Range)"
  parent: "com.google.cloud.bigquery.RangePartitioning.Builder"
  langs:
  - "java"
  name: "setRange(RangePartitioning.Range range)"
  nameWithType: "RangePartitioning.Builder.setRange(RangePartitioning.Range range)"
  fullName: "com.google.cloud.bigquery.RangePartitioning.Builder.setRange(RangePartitioning.Range range)"
  overload: "com.google.cloud.bigquery.RangePartitioning.Builder.setRange*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "\\[Required\\] Defines the ranges for range partitioning."
  syntax:
    content: "public RangePartitioning.Builder setRange(RangePartitioning.Range range)"
    parameters:
    - id: "range"
      type: "com.google.cloud.bigquery.RangePartitioning.Range"
      description: "range or <code>null</code> for none"
    return:
      type: "com.google.cloud.bigquery.RangePartitioning.Builder"
references:
- uid: "com.google.cloud.bigquery.RangePartitioning.Builder.Builder*"
  name: "Builder"
  nameWithType: "RangePartitioning.Builder.Builder"
  fullName: "com.google.cloud.bigquery.RangePartitioning.Builder.Builder"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.RangePartitioning"
  name: "RangePartitioning"
  nameWithType: "RangePartitioning"
  fullName: "com.google.cloud.bigquery.RangePartitioning"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.RangePartitioning.Builder.setField*"
  name: "setField"
  nameWithType: "RangePartitioning.Builder.setField"
  fullName: "com.google.cloud.bigquery.RangePartitioning.Builder.setField"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.RangePartitioning.Range"
  name: "RangePartitioning.Range"
  nameWithType: "RangePartitioning.Range"
  fullName: "com.google.cloud.bigquery.RangePartitioning.Range"
- uid: "com.google.cloud.bigquery.RangePartitioning.Builder.setRange*"
  name: "setRange"
  nameWithType: "RangePartitioning.Builder.setRange"
  fullName: "com.google.cloud.bigquery.RangePartitioning.Builder.setRange"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.RangePartitioning.Builder.build*"
  name: "build"
  nameWithType: "RangePartitioning.Builder.build"
  fullName: "com.google.cloud.bigquery.RangePartitioning.Builder.build"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
