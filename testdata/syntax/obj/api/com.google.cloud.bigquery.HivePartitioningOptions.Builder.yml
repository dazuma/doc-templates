### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.HivePartitioningOptions.Builder"
  id: "Builder"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.HivePartitioningOptions.Builder.build()"
  - "com.google.cloud.bigquery.HivePartitioningOptions.Builder.setMode(java.lang.String)"
  - "com.google.cloud.bigquery.HivePartitioningOptions.Builder.setRequirePartitionFilter(java.lang.Boolean)"
  - "com.google.cloud.bigquery.HivePartitioningOptions.Builder.setSourceUriPrefix(java.lang.String)"
  langs:
  - "java"
  name: "HivePartitioningOptions.Builder"
  nameWithType: "HivePartitioningOptions.Builder"
  fullName: "com.google.cloud.bigquery.HivePartitioningOptions.Builder"
  type: "Class"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public static final class HivePartitioningOptions.Builder"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.HivePartitioningOptions.Builder.Builder()"
  id: "Builder()"
  parent: "com.google.cloud.bigquery.HivePartitioningOptions.Builder"
  langs:
  - "java"
  name: "Builder()"
  nameWithType: "HivePartitioningOptions.Builder.Builder()"
  fullName: "com.google.cloud.bigquery.HivePartitioningOptions.Builder.Builder()"
  overload: "com.google.cloud.bigquery.HivePartitioningOptions.Builder.Builder*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "private Builder()"
- uid: "com.google.cloud.bigquery.HivePartitioningOptions.Builder.Builder(com.google.cloud.bigquery.HivePartitioningOptions)"
  id: "Builder(com.google.cloud.bigquery.HivePartitioningOptions)"
  parent: "com.google.cloud.bigquery.HivePartitioningOptions.Builder"
  langs:
  - "java"
  name: "Builder(HivePartitioningOptions options)"
  nameWithType: "HivePartitioningOptions.Builder.Builder(HivePartitioningOptions options)"
  fullName: "com.google.cloud.bigquery.HivePartitioningOptions.Builder.Builder(HivePartitioningOptions options)"
  overload: "com.google.cloud.bigquery.HivePartitioningOptions.Builder.Builder*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "private Builder(HivePartitioningOptions options)"
    parameters:
    - id: "options"
      type: "com.google.cloud.bigquery.HivePartitioningOptions"
- uid: "com.google.cloud.bigquery.HivePartitioningOptions.Builder.build()"
  id: "build()"
  parent: "com.google.cloud.bigquery.HivePartitioningOptions.Builder"
  langs:
  - "java"
  name: "build()"
  nameWithType: "HivePartitioningOptions.Builder.build()"
  fullName: "com.google.cloud.bigquery.HivePartitioningOptions.Builder.build()"
  overload: "com.google.cloud.bigquery.HivePartitioningOptions.Builder.build*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Creates a <xref uid=\"com.google.cloud.bigquery.HivePartitioningOptions\" data-throw-if-not-resolved=\"false\">HivePartitioningOptions</xref> object."
  syntax:
    content: "public HivePartitioningOptions build()"
    return:
      type: "com.google.cloud.bigquery.HivePartitioningOptions"
- uid: "com.google.cloud.bigquery.HivePartitioningOptions.Builder.setMode(java.lang.String)"
  id: "setMode(java.lang.String)"
  parent: "com.google.cloud.bigquery.HivePartitioningOptions.Builder"
  langs:
  - "java"
  name: "setMode(String mode)"
  nameWithType: "HivePartitioningOptions.Builder.setMode(String mode)"
  fullName: "com.google.cloud.bigquery.HivePartitioningOptions.Builder.setMode(String mode)"
  overload: "com.google.cloud.bigquery.HivePartitioningOptions.Builder.setMode*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "\\[Optional\\] When set, what mode of hive partitioning to use when reading data. Two modes are supported. (1) AUTO: automatically infer partition key name(s) and type(s). (2) STRINGS: automatically infer partition key name(s). All types are interpreted as strings. Not all storage formats support hive partitioning. Requesting hive partitioning on an unsupported format will lead to an error. Currently supported types include: AVRO, CSV, JSON, ORC and Parquet."
  syntax:
    content: "public HivePartitioningOptions.Builder setMode(String mode)"
    parameters:
    - id: "mode"
      type: "java.lang.String"
    return:
      type: "com.google.cloud.bigquery.HivePartitioningOptions.Builder"
- uid: "com.google.cloud.bigquery.HivePartitioningOptions.Builder.setRequirePartitionFilter(java.lang.Boolean)"
  id: "setRequirePartitionFilter(java.lang.Boolean)"
  parent: "com.google.cloud.bigquery.HivePartitioningOptions.Builder"
  langs:
  - "java"
  name: "setRequirePartitionFilter(Boolean requirePartitionFilter)"
  nameWithType: "HivePartitioningOptions.Builder.setRequirePartitionFilter(Boolean requirePartitionFilter)"
  fullName: "com.google.cloud.bigquery.HivePartitioningOptions.Builder.setRequirePartitionFilter(Boolean requirePartitionFilter)"
  overload: "com.google.cloud.bigquery.HivePartitioningOptions.Builder.setRequirePartitionFilter*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "\\[Optional\\] If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. Note that this field should only be true when creating a permanent external table or querying a temporary external table. Hive-partitioned loads with requirePartitionFilter explicitly set to true will fail."
  syntax:
    content: "public HivePartitioningOptions.Builder setRequirePartitionFilter(Boolean requirePartitionFilter)"
    parameters:
    - id: "requirePartitionFilter"
      type: "java.lang.Boolean"
    return:
      type: "com.google.cloud.bigquery.HivePartitioningOptions.Builder"
- uid: "com.google.cloud.bigquery.HivePartitioningOptions.Builder.setSourceUriPrefix(java.lang.String)"
  id: "setSourceUriPrefix(java.lang.String)"
  parent: "com.google.cloud.bigquery.HivePartitioningOptions.Builder"
  langs:
  - "java"
  name: "setSourceUriPrefix(String sourceUriPrefix)"
  nameWithType: "HivePartitioningOptions.Builder.setSourceUriPrefix(String sourceUriPrefix)"
  fullName: "com.google.cloud.bigquery.HivePartitioningOptions.Builder.setSourceUriPrefix(String sourceUriPrefix)"
  overload: "com.google.cloud.bigquery.HivePartitioningOptions.Builder.setSourceUriPrefix*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "\\[Optional\\] When hive partition detection is requested, a common prefix for all source uris should be supplied. The prefix must end immediately before the partition key encoding begins. For example, consider files following this data layout. gs://bucket/path\\_to\\_table/dt=2019-01-01/country=BR/id=7/file.avro gs://bucket/path\\_to\\_table/dt=2018-12-31/country=CA/id=3/file.avro When hive partitioning is requested with either AUTO or STRINGS detection, the common prefix can be either of gs://bucket/path\\_to\\_table or gs://bucket/path\\_to\\_table/ (trailing slash does not matter)."
  syntax:
    content: "public HivePartitioningOptions.Builder setSourceUriPrefix(String sourceUriPrefix)"
    parameters:
    - id: "sourceUriPrefix"
      type: "java.lang.String"
    return:
      type: "com.google.cloud.bigquery.HivePartitioningOptions.Builder"
references:
- uid: "com.google.cloud.bigquery.HivePartitioningOptions.Builder.Builder*"
  name: "Builder"
  nameWithType: "HivePartitioningOptions.Builder.Builder"
  fullName: "com.google.cloud.bigquery.HivePartitioningOptions.Builder.Builder"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.HivePartitioningOptions"
  name: "HivePartitioningOptions"
  nameWithType: "HivePartitioningOptions"
  fullName: "com.google.cloud.bigquery.HivePartitioningOptions"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.HivePartitioningOptions.Builder.setMode*"
  name: "setMode"
  nameWithType: "HivePartitioningOptions.Builder.setMode"
  fullName: "com.google.cloud.bigquery.HivePartitioningOptions.Builder.setMode"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Boolean"
  spec.java:
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
- uid: "com.google.cloud.bigquery.HivePartitioningOptions.Builder.setRequirePartitionFilter*"
  name: "setRequirePartitionFilter"
  nameWithType: "HivePartitioningOptions.Builder.setRequirePartitionFilter"
  fullName: "com.google.cloud.bigquery.HivePartitioningOptions.Builder.setRequirePartitionFilter"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.HivePartitioningOptions.Builder.setSourceUriPrefix*"
  name: "setSourceUriPrefix"
  nameWithType: "HivePartitioningOptions.Builder.setSourceUriPrefix"
  fullName: "com.google.cloud.bigquery.HivePartitioningOptions.Builder.setSourceUriPrefix"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.HivePartitioningOptions.Builder.build*"
  name: "build"
  nameWithType: "HivePartitioningOptions.Builder.build"
  fullName: "com.google.cloud.bigquery.HivePartitioningOptions.Builder.build"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
