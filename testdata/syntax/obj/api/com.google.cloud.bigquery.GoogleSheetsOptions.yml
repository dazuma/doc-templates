### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.GoogleSheetsOptions"
  id: "GoogleSheetsOptions"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.GoogleSheetsOptions.Builder"
  - "com.google.cloud.bigquery.GoogleSheetsOptions.equals(java.lang.Object)"
  - "com.google.cloud.bigquery.GoogleSheetsOptions.getRange()"
  - "com.google.cloud.bigquery.GoogleSheetsOptions.getSkipLeadingRows()"
  - "com.google.cloud.bigquery.GoogleSheetsOptions.hashCode()"
  - "com.google.cloud.bigquery.GoogleSheetsOptions.newBuilder()"
  - "com.google.cloud.bigquery.GoogleSheetsOptions.toBuilder()"
  - "com.google.cloud.bigquery.GoogleSheetsOptions.toString()"
  langs:
  - "java"
  name: "GoogleSheetsOptions"
  nameWithType: "GoogleSheetsOptions"
  fullName: "com.google.cloud.bigquery.GoogleSheetsOptions"
  type: "Class"
  package: "com.google.cloud.bigquery"
  summary: "Google BigQuery options for the Google Sheets format."
  syntax:
    content: "public final class GoogleSheetsOptions extends FormatOptions"
  inheritance:
  - "java.lang.Object"
  - "com.google.cloud.bigquery.FormatOptions"
  inheritedMembers:
  - "com.google.cloud.bigquery.FormatOptions.avro()"
  - "com.google.cloud.bigquery.FormatOptions.bigtable()"
  - "com.google.cloud.bigquery.FormatOptions.csv()"
  - "com.google.cloud.bigquery.FormatOptions.datastoreBackup()"
  - "com.google.cloud.bigquery.FormatOptions.equals(java.lang.Object)"
  - "com.google.cloud.bigquery.FormatOptions.getType()"
  - "com.google.cloud.bigquery.FormatOptions.googleSheets()"
  - "com.google.cloud.bigquery.FormatOptions.hashCode()"
  - "com.google.cloud.bigquery.FormatOptions.json()"
  - "com.google.cloud.bigquery.FormatOptions.of(java.lang.String)"
  - "com.google.cloud.bigquery.FormatOptions.orc()"
  - "com.google.cloud.bigquery.FormatOptions.parquet()"
  - "com.google.cloud.bigquery.FormatOptions.toString()"
  - "java.lang.Object.clone()"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.GoogleSheetsOptions.GoogleSheetsOptions(com.google.cloud.bigquery.GoogleSheetsOptions.Builder)"
  id: "GoogleSheetsOptions(com.google.cloud.bigquery.GoogleSheetsOptions.Builder)"
  parent: "com.google.cloud.bigquery.GoogleSheetsOptions"
  langs:
  - "java"
  name: "GoogleSheetsOptions(GoogleSheetsOptions.Builder builder)"
  nameWithType: "GoogleSheetsOptions.GoogleSheetsOptions(GoogleSheetsOptions.Builder builder)"
  fullName: "com.google.cloud.bigquery.GoogleSheetsOptions.GoogleSheetsOptions(GoogleSheetsOptions.Builder builder)"
  overload: "com.google.cloud.bigquery.GoogleSheetsOptions.GoogleSheetsOptions*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "private GoogleSheetsOptions(GoogleSheetsOptions.Builder builder)"
    parameters:
    - id: "builder"
      type: "com.google.cloud.bigquery.GoogleSheetsOptions.Builder"
- uid: "com.google.cloud.bigquery.GoogleSheetsOptions.equals(java.lang.Object)"
  id: "equals(java.lang.Object)"
  parent: "com.google.cloud.bigquery.GoogleSheetsOptions"
  langs:
  - "java"
  name: "equals(Object obj)"
  nameWithType: "GoogleSheetsOptions.equals(Object obj)"
  fullName: "com.google.cloud.bigquery.GoogleSheetsOptions.equals(Object obj)"
  overload: "com.google.cloud.bigquery.GoogleSheetsOptions.equals*"
  overridden: "com.google.cloud.bigquery.FormatOptions.equals(java.lang.Object)"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public boolean equals(Object obj)"
    parameters:
    - id: "obj"
      type: "java.lang.Object"
    return:
      type: "boolean"
- uid: "com.google.cloud.bigquery.GoogleSheetsOptions.getRange()"
  id: "getRange()"
  parent: "com.google.cloud.bigquery.GoogleSheetsOptions"
  langs:
  - "java"
  name: "getRange()"
  nameWithType: "GoogleSheetsOptions.getRange()"
  fullName: "com.google.cloud.bigquery.GoogleSheetsOptions.getRange()"
  overload: "com.google.cloud.bigquery.GoogleSheetsOptions.getRange*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the number of range of a sheet when reading the data."
  syntax:
    content: "public String getRange()"
    return:
      type: "java.lang.String"
- uid: "com.google.cloud.bigquery.GoogleSheetsOptions.getSkipLeadingRows()"
  id: "getSkipLeadingRows()"
  parent: "com.google.cloud.bigquery.GoogleSheetsOptions"
  langs:
  - "java"
  name: "getSkipLeadingRows()"
  nameWithType: "GoogleSheetsOptions.getSkipLeadingRows()"
  fullName: "com.google.cloud.bigquery.GoogleSheetsOptions.getSkipLeadingRows()"
  overload: "com.google.cloud.bigquery.GoogleSheetsOptions.getSkipLeadingRows*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the number of rows at the top of a sheet that BigQuery will skip when reading the data."
  syntax:
    content: "public Long getSkipLeadingRows()"
    return:
      type: "java.lang.Long"
- uid: "com.google.cloud.bigquery.GoogleSheetsOptions.hashCode()"
  id: "hashCode()"
  parent: "com.google.cloud.bigquery.GoogleSheetsOptions"
  langs:
  - "java"
  name: "hashCode()"
  nameWithType: "GoogleSheetsOptions.hashCode()"
  fullName: "com.google.cloud.bigquery.GoogleSheetsOptions.hashCode()"
  overload: "com.google.cloud.bigquery.GoogleSheetsOptions.hashCode*"
  overridden: "com.google.cloud.bigquery.FormatOptions.hashCode()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public int hashCode()"
    return:
      type: "int"
- uid: "com.google.cloud.bigquery.GoogleSheetsOptions.newBuilder()"
  id: "newBuilder()"
  parent: "com.google.cloud.bigquery.GoogleSheetsOptions"
  langs:
  - "java"
  name: "newBuilder()"
  nameWithType: "GoogleSheetsOptions.newBuilder()"
  fullName: "com.google.cloud.bigquery.GoogleSheetsOptions.newBuilder()"
  overload: "com.google.cloud.bigquery.GoogleSheetsOptions.newBuilder*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a builder for a <xref uid=\"com.google.cloud.bigquery.GoogleSheetsOptions\" data-throw-if-not-resolved=\"false\">GoogleSheetsOptions</xref> object."
  syntax:
    content: "public static GoogleSheetsOptions.Builder newBuilder()"
    return:
      type: "com.google.cloud.bigquery.GoogleSheetsOptions.Builder"
- uid: "com.google.cloud.bigquery.GoogleSheetsOptions.toBuilder()"
  id: "toBuilder()"
  parent: "com.google.cloud.bigquery.GoogleSheetsOptions"
  langs:
  - "java"
  name: "toBuilder()"
  nameWithType: "GoogleSheetsOptions.toBuilder()"
  fullName: "com.google.cloud.bigquery.GoogleSheetsOptions.toBuilder()"
  overload: "com.google.cloud.bigquery.GoogleSheetsOptions.toBuilder*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a builder for the <xref uid=\"com.google.cloud.bigquery.GoogleSheetsOptions\" data-throw-if-not-resolved=\"false\">GoogleSheetsOptions</xref> object."
  syntax:
    content: "public GoogleSheetsOptions.Builder toBuilder()"
    return:
      type: "com.google.cloud.bigquery.GoogleSheetsOptions.Builder"
- uid: "com.google.cloud.bigquery.GoogleSheetsOptions.toString()"
  id: "toString()"
  parent: "com.google.cloud.bigquery.GoogleSheetsOptions"
  langs:
  - "java"
  name: "toString()"
  nameWithType: "GoogleSheetsOptions.toString()"
  fullName: "com.google.cloud.bigquery.GoogleSheetsOptions.toString()"
  overload: "com.google.cloud.bigquery.GoogleSheetsOptions.toString*"
  overridden: "com.google.cloud.bigquery.FormatOptions.toString()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public String toString()"
    return:
      type: "java.lang.String"
references:
- uid: "com.google.cloud.bigquery.GoogleSheetsOptions.Builder"
  name: "GoogleSheetsOptions.Builder"
  nameWithType: "GoogleSheetsOptions.Builder"
  fullName: "com.google.cloud.bigquery.GoogleSheetsOptions.Builder"
- uid: "com.google.cloud.bigquery.GoogleSheetsOptions.GoogleSheetsOptions*"
  name: "GoogleSheetsOptions"
  nameWithType: "GoogleSheetsOptions.GoogleSheetsOptions"
  fullName: "com.google.cloud.bigquery.GoogleSheetsOptions.GoogleSheetsOptions"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.GoogleSheetsOptions.getRange*"
  name: "getRange"
  nameWithType: "GoogleSheetsOptions.getRange"
  fullName: "com.google.cloud.bigquery.GoogleSheetsOptions.getRange"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Long"
  spec.java:
  - uid: "java.lang.Long"
    name: "Long"
    fullName: "java.lang.Long"
- uid: "com.google.cloud.bigquery.GoogleSheetsOptions.getSkipLeadingRows*"
  name: "getSkipLeadingRows"
  nameWithType: "GoogleSheetsOptions.getSkipLeadingRows"
  fullName: "com.google.cloud.bigquery.GoogleSheetsOptions.getSkipLeadingRows"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.GoogleSheetsOptions.toBuilder*"
  name: "toBuilder"
  nameWithType: "GoogleSheetsOptions.toBuilder"
  fullName: "com.google.cloud.bigquery.GoogleSheetsOptions.toBuilder"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.GoogleSheetsOptions.toString*"
  name: "toString"
  nameWithType: "GoogleSheetsOptions.toString"
  fullName: "com.google.cloud.bigquery.GoogleSheetsOptions.toString"
  package: "com.google.cloud.bigquery"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.google.cloud.bigquery.GoogleSheetsOptions.hashCode*"
  name: "hashCode"
  nameWithType: "GoogleSheetsOptions.hashCode"
  fullName: "com.google.cloud.bigquery.GoogleSheetsOptions.hashCode"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.google.cloud.bigquery.GoogleSheetsOptions.equals*"
  name: "equals"
  nameWithType: "GoogleSheetsOptions.equals"
  fullName: "com.google.cloud.bigquery.GoogleSheetsOptions.equals"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.GoogleSheetsOptions.newBuilder*"
  name: "newBuilder"
  nameWithType: "GoogleSheetsOptions.newBuilder"
  fullName: "com.google.cloud.bigquery.GoogleSheetsOptions.newBuilder"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.FormatOptions"
  name: "FormatOptions"
  nameWithType: "FormatOptions"
  fullName: "com.google.cloud.bigquery.FormatOptions"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "com.google.cloud.bigquery.FormatOptions.datastoreBackup()"
  name: "FormatOptions.datastoreBackup()"
  nameWithType: "FormatOptions.datastoreBackup()"
  fullName: "com.google.cloud.bigquery.FormatOptions.datastoreBackup()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "com.google.cloud.bigquery.FormatOptions.toString()"
  name: "FormatOptions.toString()"
  nameWithType: "FormatOptions.toString()"
  fullName: "com.google.cloud.bigquery.FormatOptions.toString()"
- uid: "com.google.cloud.bigquery.FormatOptions.orc()"
  name: "FormatOptions.orc()"
  nameWithType: "FormatOptions.orc()"
  fullName: "com.google.cloud.bigquery.FormatOptions.orc()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "com.google.cloud.bigquery.FormatOptions.avro()"
  name: "FormatOptions.avro()"
  nameWithType: "FormatOptions.avro()"
  fullName: "com.google.cloud.bigquery.FormatOptions.avro()"
- uid: "com.google.cloud.bigquery.FormatOptions.parquet()"
  name: "FormatOptions.parquet()"
  nameWithType: "FormatOptions.parquet()"
  fullName: "com.google.cloud.bigquery.FormatOptions.parquet()"
- uid: "com.google.cloud.bigquery.FormatOptions.of(java.lang.String)"
  name: "FormatOptions.of(String)"
  nameWithType: "FormatOptions.of(String)"
  fullName: "com.google.cloud.bigquery.FormatOptions.of(java.lang.String)"
- uid: "com.google.cloud.bigquery.FormatOptions.hashCode()"
  name: "FormatOptions.hashCode()"
  nameWithType: "FormatOptions.hashCode()"
  fullName: "com.google.cloud.bigquery.FormatOptions.hashCode()"
- uid: "com.google.cloud.bigquery.FormatOptions.equals(java.lang.Object)"
  name: "FormatOptions.equals(Object)"
  nameWithType: "FormatOptions.equals(Object)"
  fullName: "com.google.cloud.bigquery.FormatOptions.equals(java.lang.Object)"
- uid: "com.google.cloud.bigquery.FormatOptions.bigtable()"
  name: "FormatOptions.bigtable()"
  nameWithType: "FormatOptions.bigtable()"
  fullName: "com.google.cloud.bigquery.FormatOptions.bigtable()"
- uid: "com.google.cloud.bigquery.FormatOptions.csv()"
  name: "FormatOptions.csv()"
  nameWithType: "FormatOptions.csv()"
  fullName: "com.google.cloud.bigquery.FormatOptions.csv()"
- uid: "com.google.cloud.bigquery.FormatOptions.getType()"
  name: "FormatOptions.getType()"
  nameWithType: "FormatOptions.getType()"
  fullName: "com.google.cloud.bigquery.FormatOptions.getType()"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "com.google.cloud.bigquery.FormatOptions.googleSheets()"
  name: "FormatOptions.googleSheets()"
  nameWithType: "FormatOptions.googleSheets()"
  fullName: "com.google.cloud.bigquery.FormatOptions.googleSheets()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.FormatOptions.json()"
  name: "FormatOptions.json()"
  nameWithType: "FormatOptions.json()"
  fullName: "com.google.cloud.bigquery.FormatOptions.json()"
