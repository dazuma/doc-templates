### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.StandardSQLField"
  id: "StandardSQLField"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.StandardSQLField.Builder"
  - "com.google.cloud.bigquery.StandardSQLField.StandardSQLField()"
  - "com.google.cloud.bigquery.StandardSQLField.getDataType()"
  - "com.google.cloud.bigquery.StandardSQLField.getName()"
  - "com.google.cloud.bigquery.StandardSQLField.newBuilder()"
  - "com.google.cloud.bigquery.StandardSQLField.newBuilder(com.google.cloud.bigquery.StandardSQLDataType)"
  - "com.google.cloud.bigquery.StandardSQLField.newBuilder(java.lang.String,com.google.cloud.bigquery.StandardSQLDataType)"
  - "com.google.cloud.bigquery.StandardSQLField.toBuilder()"
  langs:
  - "java"
  name: "StandardSQLField"
  nameWithType: "StandardSQLField"
  fullName: "com.google.cloud.bigquery.StandardSQLField"
  type: "Class"
  package: "com.google.cloud.bigquery"
  summary: "A Google BigQuery SQL Field."
  syntax:
    content: "public abstract class StandardSQLField implements Serializable"
  inheritance:
  - "java.lang.Object"
  implements:
  - "java.io.Serializable"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.StandardSQLField.StandardSQLField()"
  id: "StandardSQLField()"
  parent: "com.google.cloud.bigquery.StandardSQLField"
  langs:
  - "java"
  name: "StandardSQLField()"
  nameWithType: "StandardSQLField.StandardSQLField()"
  fullName: "com.google.cloud.bigquery.StandardSQLField.StandardSQLField()"
  overload: "com.google.cloud.bigquery.StandardSQLField.StandardSQLField*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public StandardSQLField()"
- uid: "com.google.cloud.bigquery.StandardSQLField.getDataType()"
  id: "getDataType()"
  parent: "com.google.cloud.bigquery.StandardSQLField"
  langs:
  - "java"
  name: "getDataType()"
  nameWithType: "StandardSQLField.getDataType()"
  fullName: "com.google.cloud.bigquery.StandardSQLField.getDataType()"
  overload: "com.google.cloud.bigquery.StandardSQLField.getDataType*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the field's data type."
  syntax:
    content: "public abstract StandardSQLDataType getDataType()"
    return:
      type: "com.google.cloud.bigquery.StandardSQLDataType"
- uid: "com.google.cloud.bigquery.StandardSQLField.getName()"
  id: "getName()"
  parent: "com.google.cloud.bigquery.StandardSQLField"
  langs:
  - "java"
  name: "getName()"
  nameWithType: "StandardSQLField.getName()"
  fullName: "com.google.cloud.bigquery.StandardSQLField.getName()"
  overload: "com.google.cloud.bigquery.StandardSQLField.getName*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the field name."
  syntax:
    content: "public abstract String getName()"
    return:
      type: "java.lang.String"
- uid: "com.google.cloud.bigquery.StandardSQLField.newBuilder()"
  id: "newBuilder()"
  parent: "com.google.cloud.bigquery.StandardSQLField"
  langs:
  - "java"
  name: "newBuilder()"
  nameWithType: "StandardSQLField.newBuilder()"
  fullName: "com.google.cloud.bigquery.StandardSQLField.newBuilder()"
  overload: "com.google.cloud.bigquery.StandardSQLField.newBuilder*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a builder for a `StandardSQLField` object."
  syntax:
    content: "public static StandardSQLField.Builder newBuilder()"
    return:
      type: "com.google.cloud.bigquery.StandardSQLField.Builder"
- uid: "com.google.cloud.bigquery.StandardSQLField.newBuilder(com.google.cloud.bigquery.StandardSQLDataType)"
  id: "newBuilder(com.google.cloud.bigquery.StandardSQLDataType)"
  parent: "com.google.cloud.bigquery.StandardSQLField"
  langs:
  - "java"
  name: "newBuilder(StandardSQLDataType dataType)"
  nameWithType: "StandardSQLField.newBuilder(StandardSQLDataType dataType)"
  fullName: "com.google.cloud.bigquery.StandardSQLField.newBuilder(StandardSQLDataType dataType)"
  overload: "com.google.cloud.bigquery.StandardSQLField.newBuilder*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a builder for a `StandardSQLField` object with the specified data type."
  syntax:
    content: "public static StandardSQLField.Builder newBuilder(StandardSQLDataType dataType)"
    parameters:
    - id: "dataType"
      type: "com.google.cloud.bigquery.StandardSQLDataType"
    return:
      type: "com.google.cloud.bigquery.StandardSQLField.Builder"
- uid: "com.google.cloud.bigquery.StandardSQLField.newBuilder(java.lang.String,com.google.cloud.bigquery.StandardSQLDataType)"
  id: "newBuilder(java.lang.String,com.google.cloud.bigquery.StandardSQLDataType)"
  parent: "com.google.cloud.bigquery.StandardSQLField"
  langs:
  - "java"
  name: "newBuilder(String name, StandardSQLDataType dataType)"
  nameWithType: "StandardSQLField.newBuilder(String name, StandardSQLDataType dataType)"
  fullName: "com.google.cloud.bigquery.StandardSQLField.newBuilder(String name, StandardSQLDataType dataType)"
  overload: "com.google.cloud.bigquery.StandardSQLField.newBuilder*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a builder for a `StandardSQLField` object with the specified field name and data type."
  syntax:
    content: "public static StandardSQLField.Builder newBuilder(String name, StandardSQLDataType dataType)"
    parameters:
    - id: "name"
      type: "java.lang.String"
    - id: "dataType"
      type: "com.google.cloud.bigquery.StandardSQLDataType"
    return:
      type: "com.google.cloud.bigquery.StandardSQLField.Builder"
- uid: "com.google.cloud.bigquery.StandardSQLField.toBuilder()"
  id: "toBuilder()"
  parent: "com.google.cloud.bigquery.StandardSQLField"
  langs:
  - "java"
  name: "toBuilder()"
  nameWithType: "StandardSQLField.toBuilder()"
  fullName: "com.google.cloud.bigquery.StandardSQLField.toBuilder()"
  overload: "com.google.cloud.bigquery.StandardSQLField.toBuilder*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a builder pre-populated using the current values of this field."
  syntax:
    content: "public abstract StandardSQLField.Builder toBuilder()"
    return:
      type: "com.google.cloud.bigquery.StandardSQLField.Builder"
references:
- uid: "com.google.cloud.bigquery.StandardSQLField.StandardSQLField*"
  name: "StandardSQLField"
  nameWithType: "StandardSQLField.StandardSQLField"
  fullName: "com.google.cloud.bigquery.StandardSQLField.StandardSQLField"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.StandardSQLField.getName*"
  name: "getName"
  nameWithType: "StandardSQLField.getName"
  fullName: "com.google.cloud.bigquery.StandardSQLField.getName"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.StandardSQLDataType"
  name: "StandardSQLDataType"
  nameWithType: "StandardSQLDataType"
  fullName: "com.google.cloud.bigquery.StandardSQLDataType"
- uid: "com.google.cloud.bigquery.StandardSQLField.getDataType*"
  name: "getDataType"
  nameWithType: "StandardSQLField.getDataType"
  fullName: "com.google.cloud.bigquery.StandardSQLField.getDataType"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.StandardSQLField.Builder"
  name: "StandardSQLField.Builder"
  nameWithType: "StandardSQLField.Builder"
  fullName: "com.google.cloud.bigquery.StandardSQLField.Builder"
- uid: "com.google.cloud.bigquery.StandardSQLField.toBuilder*"
  name: "toBuilder"
  nameWithType: "StandardSQLField.toBuilder"
  fullName: "com.google.cloud.bigquery.StandardSQLField.toBuilder"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.StandardSQLField.newBuilder*"
  name: "newBuilder"
  nameWithType: "StandardSQLField.newBuilder"
  fullName: "com.google.cloud.bigquery.StandardSQLField.newBuilder"
  package: "com.google.cloud.bigquery"
- uid: "java.io.Serializable"
  name: "Serializable"
  nameWithType: "Serializable"
  fullName: "java.io.Serializable"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
