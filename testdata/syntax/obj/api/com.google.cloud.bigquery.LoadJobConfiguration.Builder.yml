### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
  id: "Builder"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.LoadJobConfiguration.Builder.build()"
  - "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setAutodetect(java.lang.Boolean)"
  - "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setClustering(com.google.cloud.bigquery.Clustering)"
  - "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition)"
  - "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setDestinationEncryptionConfiguration(com.google.cloud.bigquery.EncryptionConfiguration)"
  - "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setDestinationTable(com.google.cloud.bigquery.TableId)"
  - "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setFormatOptions(com.google.cloud.bigquery.FormatOptions)"
  - "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setHivePartitioningOptions(com.google.cloud.bigquery.HivePartitioningOptions)"
  - "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setIgnoreUnknownValues(java.lang.Boolean)"
  - "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setJobTimeoutMs(java.lang.Long)"
  - "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setLabels(java.util.Map<java.lang.String,java.lang.String>)"
  - "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setMaxBadRecords(java.lang.Integer)"
  - "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setNullMarker(java.lang.String)"
  - "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setRangePartitioning(com.google.cloud.bigquery.RangePartitioning)"
  - "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setSchema(com.google.cloud.bigquery.Schema)"
  - "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setSchemaUpdateOptions(java.util.List<com.google.cloud.bigquery.JobInfo.SchemaUpdateOption>)"
  - "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setSourceUris(java.util.List<java.lang.String>)"
  - "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setTimePartitioning(com.google.cloud.bigquery.TimePartitioning)"
  - "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setUseAvroLogicalTypes(java.lang.Boolean)"
  - "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setWriteDisposition(com.google.cloud.bigquery.JobInfo.WriteDisposition)"
  langs:
  - "java"
  name: "LoadJobConfiguration.Builder"
  nameWithType: "LoadJobConfiguration.Builder"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
  type: "Class"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public static final class LoadJobConfiguration.Builder extends JobConfiguration.Builder<LoadJobConfiguration,LoadJobConfiguration.Builder> implements LoadConfiguration.Builder"
  inheritance:
  - "java.lang.Object"
  - "com.google.cloud.bigquery.JobConfiguration.Builder"
  implements:
  - "com.google.cloud.bigquery.LoadConfiguration.Builder"
  inheritedMembers:
  - "com.google.cloud.bigquery.JobConfiguration.Builder.build()"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.Builder()"
  id: "Builder()"
  parent: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
  langs:
  - "java"
  name: "Builder()"
  nameWithType: "LoadJobConfiguration.Builder.Builder()"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.Builder()"
  overload: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.Builder*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "private Builder()"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.Builder(com.google.api.services.bigquery.model.JobConfiguration)"
  id: "Builder(com.google.api.services.bigquery.model.JobConfiguration)"
  parent: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
  langs:
  - "java"
  name: "Builder(JobConfiguration configurationPb)"
  nameWithType: "LoadJobConfiguration.Builder.Builder(JobConfiguration configurationPb)"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.Builder(JobConfiguration configurationPb)"
  overload: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.Builder*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "private Builder(JobConfiguration configurationPb)"
    parameters:
    - id: "configurationPb"
      type: "com.google.api.services.bigquery.model.JobConfiguration"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.Builder(com.google.cloud.bigquery.LoadJobConfiguration)"
  id: "Builder(com.google.cloud.bigquery.LoadJobConfiguration)"
  parent: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
  langs:
  - "java"
  name: "Builder(LoadJobConfiguration loadConfiguration)"
  nameWithType: "LoadJobConfiguration.Builder.Builder(LoadJobConfiguration loadConfiguration)"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.Builder(LoadJobConfiguration loadConfiguration)"
  overload: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.Builder*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "private Builder(LoadJobConfiguration loadConfiguration)"
    parameters:
    - id: "loadConfiguration"
      type: "com.google.cloud.bigquery.LoadJobConfiguration"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.build()"
  id: "build()"
  parent: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
  langs:
  - "java"
  name: "build()"
  nameWithType: "LoadJobConfiguration.Builder.build()"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.build()"
  overload: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.build*"
  overridden: "com.google.cloud.bigquery.JobConfiguration.Builder.build()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Creates an object."
  syntax:
    content: "public LoadJobConfiguration build()"
    return:
      type: "com.google.cloud.bigquery.LoadJobConfiguration"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setAutodetect(java.lang.Boolean)"
  id: "setAutodetect(java.lang.Boolean)"
  parent: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
  langs:
  - "java"
  name: "setAutodetect(Boolean autodetect)"
  nameWithType: "LoadJobConfiguration.Builder.setAutodetect(Boolean autodetect)"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setAutodetect(Boolean autodetect)"
  overload: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setAutodetect*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "\\[Experimental\\] Sets automatic inference of the options and schema for CSV and JSON sources."
  syntax:
    content: "public LoadJobConfiguration.Builder setAutodetect(Boolean autodetect)"
    parameters:
    - id: "autodetect"
      type: "java.lang.Boolean"
    return:
      type: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setClustering(com.google.cloud.bigquery.Clustering)"
  id: "setClustering(com.google.cloud.bigquery.Clustering)"
  parent: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
  langs:
  - "java"
  name: "setClustering(Clustering clustering)"
  nameWithType: "LoadJobConfiguration.Builder.setClustering(Clustering clustering)"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setClustering(Clustering clustering)"
  overload: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setClustering*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the clustering specification for the destination table."
  syntax:
    content: "public LoadJobConfiguration.Builder setClustering(Clustering clustering)"
    parameters:
    - id: "clustering"
      type: "com.google.cloud.bigquery.Clustering"
    return:
      type: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition)"
  id: "setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition)"
  parent: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
  langs:
  - "java"
  name: "setCreateDisposition(JobInfo.CreateDisposition createDisposition)"
  nameWithType: "LoadJobConfiguration.Builder.setCreateDisposition(JobInfo.CreateDisposition createDisposition)"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setCreateDisposition(JobInfo.CreateDisposition createDisposition)"
  overload: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setCreateDisposition*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets whether the job is allowed to create new tables."
  syntax:
    content: "public LoadJobConfiguration.Builder setCreateDisposition(JobInfo.CreateDisposition createDisposition)"
    parameters:
    - id: "createDisposition"
      type: "com.google.cloud.bigquery.JobInfo.CreateDisposition"
    return:
      type: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setDestinationEncryptionConfiguration(com.google.cloud.bigquery.EncryptionConfiguration)"
  id: "setDestinationEncryptionConfiguration(com.google.cloud.bigquery.EncryptionConfiguration)"
  parent: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
  langs:
  - "java"
  name: "setDestinationEncryptionConfiguration(EncryptionConfiguration encryptionConfiguration)"
  nameWithType: "LoadJobConfiguration.Builder.setDestinationEncryptionConfiguration(EncryptionConfiguration encryptionConfiguration)"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setDestinationEncryptionConfiguration(EncryptionConfiguration encryptionConfiguration)"
  overload: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setDestinationEncryptionConfiguration*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public LoadJobConfiguration.Builder setDestinationEncryptionConfiguration(EncryptionConfiguration encryptionConfiguration)"
    parameters:
    - id: "encryptionConfiguration"
      type: "com.google.cloud.bigquery.EncryptionConfiguration"
    return:
      type: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setDestinationTable(com.google.cloud.bigquery.TableId)"
  id: "setDestinationTable(com.google.cloud.bigquery.TableId)"
  parent: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
  langs:
  - "java"
  name: "setDestinationTable(TableId destinationTable)"
  nameWithType: "LoadJobConfiguration.Builder.setDestinationTable(TableId destinationTable)"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setDestinationTable(TableId destinationTable)"
  overload: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setDestinationTable*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the destination table to load the data into."
  syntax:
    content: "public LoadJobConfiguration.Builder setDestinationTable(TableId destinationTable)"
    parameters:
    - id: "destinationTable"
      type: "com.google.cloud.bigquery.TableId"
    return:
      type: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setFormatOptions(com.google.cloud.bigquery.FormatOptions)"
  id: "setFormatOptions(com.google.cloud.bigquery.FormatOptions)"
  parent: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
  langs:
  - "java"
  name: "setFormatOptions(FormatOptions formatOptions)"
  nameWithType: "LoadJobConfiguration.Builder.setFormatOptions(FormatOptions formatOptions)"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setFormatOptions(FormatOptions formatOptions)"
  overload: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setFormatOptions*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the source format, and possibly some parsing options, of the external data. Supported formats are `CSV`, `NEWLINE_DELIMITED_JSON` and `DATASTORE_BACKUP`. If not specified, `CSV` format is assumed.\n\n[ Source Format][Source Format]\n\n\n[Source Format]: https://cloud.google.com/bigquery/docs/reference/v2/tables#externalDataConfiguration.sourceFormat"
  syntax:
    content: "public LoadJobConfiguration.Builder setFormatOptions(FormatOptions formatOptions)"
    parameters:
    - id: "formatOptions"
      type: "com.google.cloud.bigquery.FormatOptions"
    return:
      type: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setHivePartitioningOptions(com.google.cloud.bigquery.HivePartitioningOptions)"
  id: "setHivePartitioningOptions(com.google.cloud.bigquery.HivePartitioningOptions)"
  parent: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
  langs:
  - "java"
  name: "setHivePartitioningOptions(HivePartitioningOptions hivePartitioningOptions)"
  nameWithType: "LoadJobConfiguration.Builder.setHivePartitioningOptions(HivePartitioningOptions hivePartitioningOptions)"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setHivePartitioningOptions(HivePartitioningOptions hivePartitioningOptions)"
  overload: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setHivePartitioningOptions*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public LoadJobConfiguration.Builder setHivePartitioningOptions(HivePartitioningOptions hivePartitioningOptions)"
    parameters:
    - id: "hivePartitioningOptions"
      type: "com.google.cloud.bigquery.HivePartitioningOptions"
    return:
      type: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setIgnoreUnknownValues(java.lang.Boolean)"
  id: "setIgnoreUnknownValues(java.lang.Boolean)"
  parent: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
  langs:
  - "java"
  name: "setIgnoreUnknownValues(Boolean ignoreUnknownValues)"
  nameWithType: "LoadJobConfiguration.Builder.setIgnoreUnknownValues(Boolean ignoreUnknownValues)"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setIgnoreUnknownValues(Boolean ignoreUnknownValues)"
  overload: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setIgnoreUnknownValues*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets whether BigQuery should allow extra values that are not represented in the table schema. If `true`, the extra values are ignored. If `false`, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. By default unknown values are not allowed."
  syntax:
    content: "public LoadJobConfiguration.Builder setIgnoreUnknownValues(Boolean ignoreUnknownValues)"
    parameters:
    - id: "ignoreUnknownValues"
      type: "java.lang.Boolean"
    return:
      type: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setJobTimeoutMs(java.lang.Long)"
  id: "setJobTimeoutMs(java.lang.Long)"
  parent: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
  langs:
  - "java"
  name: "setJobTimeoutMs(Long jobTimeoutMs)"
  nameWithType: "LoadJobConfiguration.Builder.setJobTimeoutMs(Long jobTimeoutMs)"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setJobTimeoutMs(Long jobTimeoutMs)"
  overload: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setJobTimeoutMs*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "\\[Optional\\] Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job."
  syntax:
    content: "public LoadJobConfiguration.Builder setJobTimeoutMs(Long jobTimeoutMs)"
    parameters:
    - id: "jobTimeoutMs"
      type: "java.lang.Long"
      description: "jobTimeoutMs or <code>null</code> for none"
    return:
      type: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setLabels(java.util.Map<java.lang.String,java.lang.String>)"
  id: "setLabels(java.util.Map<java.lang.String,java.lang.String>)"
  parent: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
  langs:
  - "java"
  name: "setLabels(Map<String,String> labels)"
  nameWithType: "LoadJobConfiguration.Builder.setLabels(Map<String,String> labels)"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setLabels(Map<String,String> labels)"
  overload: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setLabels*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key."
  syntax:
    content: "public LoadJobConfiguration.Builder setLabels(Map<String,String> labels)"
    parameters:
    - id: "labels"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "labels or <code>null</code> for none"
    return:
      type: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setMaxBadRecords(java.lang.Integer)"
  id: "setMaxBadRecords(java.lang.Integer)"
  parent: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
  langs:
  - "java"
  name: "setMaxBadRecords(Integer maxBadRecords)"
  nameWithType: "LoadJobConfiguration.Builder.setMaxBadRecords(Integer maxBadRecords)"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setMaxBadRecords(Integer maxBadRecords)"
  overload: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setMaxBadRecords*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value, an invalid error is returned in the job result. By default no bad record is ignored."
  syntax:
    content: "public LoadJobConfiguration.Builder setMaxBadRecords(Integer maxBadRecords)"
    parameters:
    - id: "maxBadRecords"
      type: "java.lang.Integer"
    return:
      type: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setNullMarker(java.lang.String)"
  id: "setNullMarker(java.lang.String)"
  parent: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
  langs:
  - "java"
  name: "setNullMarker(String nullMarker)"
  nameWithType: "LoadJobConfiguration.Builder.setNullMarker(String nullMarker)"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setNullMarker(String nullMarker)"
  overload: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setNullMarker*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the string that represents a null value in a CSV file. For example, if you specify \"\\\\N\", BigQuery interprets \"\\\\N\" as a null value when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an empty string is present for all data types except for `STRING` and `BYTE`. For `STRING` and `BYTE` columns, BigQuery interprets the empty string as an empty value."
  syntax:
    content: "public LoadJobConfiguration.Builder setNullMarker(String nullMarker)"
    parameters:
    - id: "nullMarker"
      type: "java.lang.String"
    return:
      type: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setRangePartitioning(com.google.cloud.bigquery.RangePartitioning)"
  id: "setRangePartitioning(com.google.cloud.bigquery.RangePartitioning)"
  parent: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
  langs:
  - "java"
  name: "setRangePartitioning(RangePartitioning rangePartitioning)"
  nameWithType: "LoadJobConfiguration.Builder.setRangePartitioning(RangePartitioning rangePartitioning)"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setRangePartitioning(RangePartitioning rangePartitioning)"
  overload: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setRangePartitioning*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Range partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified."
  syntax:
    content: "public LoadJobConfiguration.Builder setRangePartitioning(RangePartitioning rangePartitioning)"
    parameters:
    - id: "rangePartitioning"
      type: "com.google.cloud.bigquery.RangePartitioning"
      description: "rangePartitioning or <code>null</code> for none"
    return:
      type: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setSchema(com.google.cloud.bigquery.Schema)"
  id: "setSchema(com.google.cloud.bigquery.Schema)"
  parent: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
  langs:
  - "java"
  name: "setSchema(Schema schema)"
  nameWithType: "LoadJobConfiguration.Builder.setSchema(Schema schema)"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setSchema(Schema schema)"
  overload: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setSchema*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the schema for the destination table. The schema can be omitted if the destination table already exists, or if you're loading data from a Google Cloud Datastore backup (i.e. `DATASTORE_BACKUP` format option)."
  syntax:
    content: "public LoadJobConfiguration.Builder setSchema(Schema schema)"
    parameters:
    - id: "schema"
      type: "com.google.cloud.bigquery.Schema"
    return:
      type: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setSchemaUpdateOptions(java.util.List<com.google.cloud.bigquery.JobInfo.SchemaUpdateOption>)"
  id: "setSchemaUpdateOptions(java.util.List<com.google.cloud.bigquery.JobInfo.SchemaUpdateOption>)"
  parent: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
  langs:
  - "java"
  name: "setSchemaUpdateOptions(List<JobInfo.SchemaUpdateOption> schemaUpdateOptions)"
  nameWithType: "LoadJobConfiguration.Builder.setSchemaUpdateOptions(List<JobInfo.SchemaUpdateOption> schemaUpdateOptions)"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setSchemaUpdateOptions(List<JobInfo.SchemaUpdateOption> schemaUpdateOptions)"
  overload: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setSchemaUpdateOptions*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "\\[Experimental\\] Sets options allowing the schema of the destination table to be updated as a side effect of the load job. Schema update options are supported in two cases: when writeDisposition is WRITE\\_APPEND; when writeDisposition is WRITE\\_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE\\_TRUNCATE will always overwrite the schema."
  syntax:
    content: "public LoadJobConfiguration.Builder setSchemaUpdateOptions(List<JobInfo.SchemaUpdateOption> schemaUpdateOptions)"
    parameters:
    - id: "schemaUpdateOptions"
      type: "java.util.List<com.google.cloud.bigquery.JobInfo.SchemaUpdateOption>"
    return:
      type: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setSourceUris(java.util.List<java.lang.String>)"
  id: "setSourceUris(java.util.List<java.lang.String>)"
  parent: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
  langs:
  - "java"
  name: "setSourceUris(List<String> sourceUris)"
  nameWithType: "LoadJobConfiguration.Builder.setSourceUris(List<String> sourceUris)"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setSourceUris(List<String> sourceUris)"
  overload: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setSourceUris*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the fully-qualified URIs that point to source data in Google Cloud Storage (e.g. gs://bucket/path). Each URI can contain one '\\*' wildcard character and it must come after the 'bucket' name."
  syntax:
    content: "public LoadJobConfiguration.Builder setSourceUris(List<String> sourceUris)"
    parameters:
    - id: "sourceUris"
      type: "java.util.List<java.lang.String>"
    return:
      type: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setTimePartitioning(com.google.cloud.bigquery.TimePartitioning)"
  id: "setTimePartitioning(com.google.cloud.bigquery.TimePartitioning)"
  parent: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
  langs:
  - "java"
  name: "setTimePartitioning(TimePartitioning timePartitioning)"
  nameWithType: "LoadJobConfiguration.Builder.setTimePartitioning(TimePartitioning timePartitioning)"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setTimePartitioning(TimePartitioning timePartitioning)"
  overload: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setTimePartitioning*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the time partitioning specification for the destination table."
  syntax:
    content: "public LoadJobConfiguration.Builder setTimePartitioning(TimePartitioning timePartitioning)"
    parameters:
    - id: "timePartitioning"
      type: "com.google.cloud.bigquery.TimePartitioning"
    return:
      type: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setUseAvroLogicalTypes(java.lang.Boolean)"
  id: "setUseAvroLogicalTypes(java.lang.Boolean)"
  parent: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
  langs:
  - "java"
  name: "setUseAvroLogicalTypes(Boolean useAvroLogicalTypes)"
  nameWithType: "LoadJobConfiguration.Builder.setUseAvroLogicalTypes(Boolean useAvroLogicalTypes)"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setUseAvroLogicalTypes(Boolean useAvroLogicalTypes)"
  overload: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setUseAvroLogicalTypes*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "If FormatOptions is set to AVRO, you can interpret logical types into their corresponding types (such as TIMESTAMP) instead of only using their raw types (such as INTEGER). The value may be `null`."
  syntax:
    content: "public LoadJobConfiguration.Builder setUseAvroLogicalTypes(Boolean useAvroLogicalTypes)"
    parameters:
    - id: "useAvroLogicalTypes"
      type: "java.lang.Boolean"
    return:
      type: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setWriteDisposition(com.google.cloud.bigquery.JobInfo.WriteDisposition)"
  id: "setWriteDisposition(com.google.cloud.bigquery.JobInfo.WriteDisposition)"
  parent: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
  langs:
  - "java"
  name: "setWriteDisposition(JobInfo.WriteDisposition writeDisposition)"
  nameWithType: "LoadJobConfiguration.Builder.setWriteDisposition(JobInfo.WriteDisposition writeDisposition)"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setWriteDisposition(JobInfo.WriteDisposition writeDisposition)"
  overload: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setWriteDisposition*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the action that should occur if the destination table already exists."
  syntax:
    content: "public LoadJobConfiguration.Builder setWriteDisposition(JobInfo.WriteDisposition writeDisposition)"
    parameters:
    - id: "writeDisposition"
      type: "com.google.cloud.bigquery.JobInfo.WriteDisposition"
    return:
      type: "com.google.cloud.bigquery.LoadJobConfiguration.Builder"
references:
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.Builder*"
  name: "Builder"
  nameWithType: "LoadJobConfiguration.Builder.Builder"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.Builder"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration"
  name: "LoadJobConfiguration"
  nameWithType: "LoadJobConfiguration"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration"
- uid: "com.google.api.services.bigquery.model.JobConfiguration"
  spec.java:
  - uid: "com.google.api.services.bigquery.model.JobConfiguration"
    name: "JobConfiguration"
    fullName: "com.google.api.services.bigquery.model.JobConfiguration"
- uid: "com.google.cloud.bigquery.TableId"
  name: "TableId"
  nameWithType: "TableId"
  fullName: "com.google.cloud.bigquery.TableId"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setDestinationTable*"
  name: "setDestinationTable"
  nameWithType: "LoadJobConfiguration.Builder.setDestinationTable"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setDestinationTable"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.EncryptionConfiguration"
  name: "EncryptionConfiguration"
  nameWithType: "EncryptionConfiguration"
  fullName: "com.google.cloud.bigquery.EncryptionConfiguration"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setDestinationEncryptionConfiguration*"
  name: "setDestinationEncryptionConfiguration"
  nameWithType: "LoadJobConfiguration.Builder.setDestinationEncryptionConfiguration"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setDestinationEncryptionConfiguration"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.JobInfo.CreateDisposition"
  name: "JobInfo.CreateDisposition"
  nameWithType: "JobInfo.CreateDisposition"
  fullName: "com.google.cloud.bigquery.JobInfo.CreateDisposition"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setCreateDisposition*"
  name: "setCreateDisposition"
  nameWithType: "LoadJobConfiguration.Builder.setCreateDisposition"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setCreateDisposition"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.JobInfo.WriteDisposition"
  name: "JobInfo.WriteDisposition"
  nameWithType: "JobInfo.WriteDisposition"
  fullName: "com.google.cloud.bigquery.JobInfo.WriteDisposition"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setWriteDisposition*"
  name: "setWriteDisposition"
  nameWithType: "LoadJobConfiguration.Builder.setWriteDisposition"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setWriteDisposition"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.FormatOptions"
  name: "FormatOptions"
  nameWithType: "FormatOptions"
  fullName: "com.google.cloud.bigquery.FormatOptions"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setFormatOptions*"
  name: "setFormatOptions"
  nameWithType: "LoadJobConfiguration.Builder.setFormatOptions"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setFormatOptions"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setNullMarker*"
  name: "setNullMarker"
  nameWithType: "LoadJobConfiguration.Builder.setNullMarker"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setNullMarker"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Integer"
  spec.java:
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setMaxBadRecords*"
  name: "setMaxBadRecords"
  nameWithType: "LoadJobConfiguration.Builder.setMaxBadRecords"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setMaxBadRecords"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Schema"
  name: "Schema"
  nameWithType: "Schema"
  fullName: "com.google.cloud.bigquery.Schema"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setSchema*"
  name: "setSchema"
  nameWithType: "LoadJobConfiguration.Builder.setSchema"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setSchema"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Boolean"
  spec.java:
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setIgnoreUnknownValues*"
  name: "setIgnoreUnknownValues"
  nameWithType: "LoadJobConfiguration.Builder.setIgnoreUnknownValues"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setIgnoreUnknownValues"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TimePartitioning"
  name: "TimePartitioning"
  nameWithType: "TimePartitioning"
  fullName: "com.google.cloud.bigquery.TimePartitioning"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setTimePartitioning*"
  name: "setTimePartitioning"
  nameWithType: "LoadJobConfiguration.Builder.setTimePartitioning"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setTimePartitioning"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Clustering"
  name: "Clustering"
  nameWithType: "Clustering"
  fullName: "com.google.cloud.bigquery.Clustering"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setClustering*"
  name: "setClustering"
  nameWithType: "LoadJobConfiguration.Builder.setClustering"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setClustering"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setUseAvroLogicalTypes*"
  name: "setUseAvroLogicalTypes"
  nameWithType: "LoadJobConfiguration.Builder.setUseAvroLogicalTypes"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setUseAvroLogicalTypes"
  package: "com.google.cloud.bigquery"
- uid: "java.util.List<java.lang.String>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setSourceUris*"
  name: "setSourceUris"
  nameWithType: "LoadJobConfiguration.Builder.setSourceUris"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setSourceUris"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setAutodetect*"
  name: "setAutodetect"
  nameWithType: "LoadJobConfiguration.Builder.setAutodetect"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setAutodetect"
  package: "com.google.cloud.bigquery"
- uid: "java.util.List<com.google.cloud.bigquery.JobInfo.SchemaUpdateOption>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "com.google.cloud.bigquery.JobInfo.SchemaUpdateOption"
    name: "SchemaUpdateOption"
    fullName: "com.google.cloud.bigquery.JobInfo.SchemaUpdateOption"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setSchemaUpdateOptions*"
  name: "setSchemaUpdateOptions"
  nameWithType: "LoadJobConfiguration.Builder.setSchemaUpdateOptions"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setSchemaUpdateOptions"
  package: "com.google.cloud.bigquery"
- uid: "java.util.Map<java.lang.String,java.lang.String>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setLabels*"
  name: "setLabels"
  nameWithType: "LoadJobConfiguration.Builder.setLabels"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setLabels"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Long"
  spec.java:
  - uid: "java.lang.Long"
    name: "Long"
    fullName: "java.lang.Long"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setJobTimeoutMs*"
  name: "setJobTimeoutMs"
  nameWithType: "LoadJobConfiguration.Builder.setJobTimeoutMs"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setJobTimeoutMs"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.RangePartitioning"
  name: "RangePartitioning"
  nameWithType: "RangePartitioning"
  fullName: "com.google.cloud.bigquery.RangePartitioning"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setRangePartitioning*"
  name: "setRangePartitioning"
  nameWithType: "LoadJobConfiguration.Builder.setRangePartitioning"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setRangePartitioning"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.HivePartitioningOptions"
  name: "HivePartitioningOptions"
  nameWithType: "HivePartitioningOptions"
  fullName: "com.google.cloud.bigquery.HivePartitioningOptions"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setHivePartitioningOptions*"
  name: "setHivePartitioningOptions"
  nameWithType: "LoadJobConfiguration.Builder.setHivePartitioningOptions"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.setHivePartitioningOptions"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.build*"
  name: "build"
  nameWithType: "LoadJobConfiguration.Builder.build"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration.Builder.build"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.JobConfiguration.Builder<com.google.cloud.bigquery.LoadJobConfiguration,com.google.cloud.bigquery.LoadJobConfiguration.Builder>"
  name: "JobConfiguration.Builder<LoadJobConfiguration,LoadJobConfiguration.Builder>"
  nameWithType: "JobConfiguration.Builder<LoadJobConfiguration,LoadJobConfiguration.Builder>"
  fullName: "com.google.cloud.bigquery.JobConfiguration.Builder<com.google.cloud.bigquery.LoadJobConfiguration,com.google.cloud.bigquery.LoadJobConfiguration.Builder>"
- uid: "com.google.cloud.bigquery.LoadConfiguration.Builder"
  name: "LoadConfiguration.Builder"
  nameWithType: "LoadConfiguration.Builder"
  fullName: "com.google.cloud.bigquery.LoadConfiguration.Builder"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.JobConfiguration.Builder.build()"
  name: "JobConfiguration.Builder.build()"
  nameWithType: "JobConfiguration.Builder.build()"
  fullName: "com.google.cloud.bigquery.JobConfiguration.Builder.build()"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "com.google.cloud.bigquery.JobInfo.SchemaUpdateOption"
  name: "JobInfo.SchemaUpdateOption"
  nameWithType: "JobInfo.SchemaUpdateOption"
  fullName: "com.google.cloud.bigquery.JobInfo.SchemaUpdateOption"
- uid: "java.util.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
- uid: "java.lang.String,java.lang.String"
  name: "String,String"
  nameWithType: "String,String"
  fullName: "java.lang.String,java.lang.String"
- uid: "com.google.cloud.bigquery.JobConfiguration.Builder"
  name: "JobConfiguration.Builder"
  nameWithType: "JobConfiguration.Builder"
  fullName: "com.google.cloud.bigquery.JobConfiguration.Builder"
- uid: "com.google.cloud.bigquery.LoadJobConfiguration,com.google.cloud.bigquery.LoadJobConfiguration.Builder"
  name: "LoadJobConfiguration,LoadJobConfiguration.Builder"
  nameWithType: "LoadJobConfiguration,LoadJobConfiguration.Builder"
  fullName: "com.google.cloud.bigquery.LoadJobConfiguration,com.google.cloud.bigquery.LoadJobConfiguration.Builder"
