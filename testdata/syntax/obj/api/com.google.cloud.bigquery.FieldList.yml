### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.FieldList"
  id: "FieldList"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.FieldList.get(int)"
  - "com.google.cloud.bigquery.FieldList.get(java.lang.String)"
  - "com.google.cloud.bigquery.FieldList.getIndex(java.lang.String)"
  - "com.google.cloud.bigquery.FieldList.of(com.google.cloud.bigquery.Field...)"
  - "com.google.cloud.bigquery.FieldList.of(java.lang.Iterable<com.google.cloud.bigquery.Field>)"
  - "com.google.cloud.bigquery.FieldList.size()"
  langs:
  - "java"
  name: "FieldList"
  nameWithType: "FieldList"
  fullName: "com.google.cloud.bigquery.FieldList"
  type: "Class"
  package: "com.google.cloud.bigquery"
  summary: "Google BigQuery Table schema fields (columns). Each field has a unique name and index. Fields with duplicate names are not allowed in BigQuery schema."
  syntax:
    content: "public final class FieldList extends AbstractList<Field> implements Serializable"
  inheritance:
  - "java.lang.Object"
  - "java.util.AbstractCollection"
  - "java.util.AbstractList"
  implements:
  - "java.io.Serializable"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
  - "java.util.AbstractCollection.<T>toArray(T[])"
  - "java.util.AbstractCollection.addAll(java.util.Collection<? extends E>)"
  - "java.util.AbstractCollection.contains(java.lang.Object)"
  - "java.util.AbstractCollection.containsAll(java.util.Collection<?>)"
  - "java.util.AbstractCollection.isEmpty()"
  - "java.util.AbstractCollection.remove(java.lang.Object)"
  - "java.util.AbstractCollection.removeAll(java.util.Collection<?>)"
  - "java.util.AbstractCollection.retainAll(java.util.Collection<?>)"
  - "java.util.AbstractCollection.size()"
  - "java.util.AbstractCollection.toArray()"
  - "java.util.AbstractCollection.toString()"
  - "java.util.AbstractList.add(E)"
  - "java.util.AbstractList.add(int,E)"
  - "java.util.AbstractList.addAll(int,java.util.Collection<? extends E>)"
  - "java.util.AbstractList.clear()"
  - "java.util.AbstractList.equals(java.lang.Object)"
  - "java.util.AbstractList.get(int)"
  - "java.util.AbstractList.hashCode()"
  - "java.util.AbstractList.indexOf(java.lang.Object)"
  - "java.util.AbstractList.iterator()"
  - "java.util.AbstractList.lastIndexOf(java.lang.Object)"
  - "java.util.AbstractList.listIterator()"
  - "java.util.AbstractList.listIterator(int)"
  - "java.util.AbstractList.remove(int)"
  - "java.util.AbstractList.removeRange(int,int)"
  - "java.util.AbstractList.set(int,E)"
  - "java.util.AbstractList.subList(int,int)"
- uid: "com.google.cloud.bigquery.FieldList.FieldList(java.lang.Iterable<com.google.cloud.bigquery.Field>)"
  id: "FieldList(java.lang.Iterable<com.google.cloud.bigquery.Field>)"
  parent: "com.google.cloud.bigquery.FieldList"
  langs:
  - "java"
  name: "FieldList(Iterable<Field> fields)"
  nameWithType: "FieldList.FieldList(Iterable<Field> fields)"
  fullName: "com.google.cloud.bigquery.FieldList.FieldList(Iterable<Field> fields)"
  overload: "com.google.cloud.bigquery.FieldList.FieldList*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "private FieldList(Iterable<Field> fields)"
    parameters:
    - id: "fields"
      type: "java.lang.Iterable<com.google.cloud.bigquery.Field>"
- uid: "com.google.cloud.bigquery.FieldList.get(int)"
  id: "get(int)"
  parent: "com.google.cloud.bigquery.FieldList"
  langs:
  - "java"
  name: "get(int index)"
  nameWithType: "FieldList.get(int index)"
  fullName: "com.google.cloud.bigquery.FieldList.get(int index)"
  overload: "com.google.cloud.bigquery.FieldList.get*"
  overridden: "java.util.AbstractList.get(int)"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Get schema field by index."
  syntax:
    content: "public Field get(int index)"
    parameters:
    - id: "index"
      type: "int"
      description: "field (column) index"
    return:
      type: "com.google.cloud.bigquery.Field"
- uid: "com.google.cloud.bigquery.FieldList.get(java.lang.String)"
  id: "get(java.lang.String)"
  parent: "com.google.cloud.bigquery.FieldList"
  langs:
  - "java"
  name: "get(String name)"
  nameWithType: "FieldList.get(String name)"
  fullName: "com.google.cloud.bigquery.FieldList.get(String name)"
  overload: "com.google.cloud.bigquery.FieldList.get*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Get schema field by name."
  syntax:
    content: "public Field get(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "field (column) name"
    return:
      type: "com.google.cloud.bigquery.Field"
- uid: "com.google.cloud.bigquery.FieldList.getIndex(java.lang.String)"
  id: "getIndex(java.lang.String)"
  parent: "com.google.cloud.bigquery.FieldList"
  langs:
  - "java"
  name: "getIndex(String name)"
  nameWithType: "FieldList.getIndex(String name)"
  fullName: "com.google.cloud.bigquery.FieldList.getIndex(String name)"
  overload: "com.google.cloud.bigquery.FieldList.getIndex*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Get schema field's index by name."
  syntax:
    content: "public int getIndex(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "field (column) name"
    return:
      type: "int"
- uid: "com.google.cloud.bigquery.FieldList.of(com.google.cloud.bigquery.Field...)"
  id: "of(com.google.cloud.bigquery.Field...)"
  parent: "com.google.cloud.bigquery.FieldList"
  langs:
  - "java"
  name: "of(Field[] fields)"
  nameWithType: "FieldList.of(Field[] fields)"
  fullName: "com.google.cloud.bigquery.FieldList.of(Field[] fields)"
  overload: "com.google.cloud.bigquery.FieldList.of*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a new `FieldList` object, which contains a collection of `Field` objects in preserved order and represent schema columns."
  syntax:
    content: "public static FieldList of(Field[] fields)"
    parameters:
    - id: "fields"
      type: "com.google.cloud.bigquery.Field[]"
      description: "the schema fields"
    return:
      type: "com.google.cloud.bigquery.FieldList"
- uid: "com.google.cloud.bigquery.FieldList.of(java.lang.Iterable<com.google.cloud.bigquery.Field>)"
  id: "of(java.lang.Iterable<com.google.cloud.bigquery.Field>)"
  parent: "com.google.cloud.bigquery.FieldList"
  langs:
  - "java"
  name: "of(Iterable<Field> fields)"
  nameWithType: "FieldList.of(Iterable<Field> fields)"
  fullName: "com.google.cloud.bigquery.FieldList.of(Iterable<Field> fields)"
  overload: "com.google.cloud.bigquery.FieldList.of*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a new `FieldList` object, which contains a collection of `Field` objects in preserved order and represent schema columns."
  syntax:
    content: "public static FieldList of(Iterable<Field> fields)"
    parameters:
    - id: "fields"
      type: "java.lang.Iterable<com.google.cloud.bigquery.Field>"
      description: "the schema fields"
    return:
      type: "com.google.cloud.bigquery.FieldList"
- uid: "com.google.cloud.bigquery.FieldList.size()"
  id: "size()"
  parent: "com.google.cloud.bigquery.FieldList"
  langs:
  - "java"
  name: "size()"
  nameWithType: "FieldList.size()"
  fullName: "com.google.cloud.bigquery.FieldList.size()"
  overload: "com.google.cloud.bigquery.FieldList.size*"
  overridden: "java.util.AbstractCollection.size()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Total number of fields (columns) in the schema."
  syntax:
    content: "public int size()"
    return:
      type: "int"
references:
- uid: "java.lang.Iterable<com.google.cloud.bigquery.Field>"
  spec.java:
  - uid: "java.lang.Iterable"
    name: "Iterable"
    fullName: "java.lang.Iterable"
  - name: "<"
    fullName: "<"
  - uid: "com.google.cloud.bigquery.Field"
    name: "Field"
    fullName: "com.google.cloud.bigquery.Field"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.FieldList.FieldList*"
  name: "FieldList"
  nameWithType: "FieldList.FieldList"
  fullName: "com.google.cloud.bigquery.FieldList.FieldList"
  package: "com.google.cloud.bigquery"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.google.cloud.bigquery.Field"
  name: "Field"
  nameWithType: "Field"
  fullName: "com.google.cloud.bigquery.Field"
- uid: "com.google.cloud.bigquery.FieldList.get*"
  name: "get"
  nameWithType: "FieldList.get"
  fullName: "com.google.cloud.bigquery.FieldList.get"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.FieldList.getIndex*"
  name: "getIndex"
  nameWithType: "FieldList.getIndex"
  fullName: "com.google.cloud.bigquery.FieldList.getIndex"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.FieldList.size*"
  name: "size"
  nameWithType: "FieldList.size"
  fullName: "com.google.cloud.bigquery.FieldList.size"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Field[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.Field"
    name: "Field"
    fullName: "com.google.cloud.bigquery.Field"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.cloud.bigquery.FieldList.of*"
  name: "of"
  nameWithType: "FieldList.of"
  fullName: "com.google.cloud.bigquery.FieldList.of"
  package: "com.google.cloud.bigquery"
- uid: "java.util.AbstractList<com.google.cloud.bigquery.Field>"
  name: "AbstractList<Field>"
  nameWithType: "AbstractList<Field>"
  fullName: "java.util.AbstractList<com.google.cloud.bigquery.Field>"
- uid: "java.io.Serializable"
  name: "Serializable"
  nameWithType: "Serializable"
  fullName: "java.io.Serializable"
- uid: "java.util.AbstractCollection.contains(java.lang.Object)"
  name: "AbstractCollection.contains(Object)"
  nameWithType: "AbstractCollection.contains(Object)"
  fullName: "java.util.AbstractCollection.contains(java.lang.Object)"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.util.AbstractList.equals(java.lang.Object)"
  name: "AbstractList.equals(Object)"
  nameWithType: "AbstractList.equals(Object)"
  fullName: "java.util.AbstractList.equals(java.lang.Object)"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.util.AbstractList.get(int)"
  name: "AbstractList.get(int)"
  nameWithType: "AbstractList.get(int)"
  fullName: "java.util.AbstractList.get(int)"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.util.AbstractList.lastIndexOf(java.lang.Object)"
  name: "AbstractList.lastIndexOf(Object)"
  nameWithType: "AbstractList.lastIndexOf(Object)"
  fullName: "java.util.AbstractList.lastIndexOf(java.lang.Object)"
- uid: "java.util.AbstractList.clear()"
  name: "AbstractList.clear()"
  nameWithType: "AbstractList.clear()"
  fullName: "java.util.AbstractList.clear()"
- uid: "java.util.AbstractList.hashCode()"
  name: "AbstractList.hashCode()"
  nameWithType: "AbstractList.hashCode()"
  fullName: "java.util.AbstractList.hashCode()"
- uid: "java.util.AbstractCollection.size()"
  name: "AbstractCollection.size()"
  nameWithType: "AbstractCollection.size()"
  fullName: "java.util.AbstractCollection.size()"
- uid: "java.util.AbstractList.iterator()"
  name: "AbstractList.iterator()"
  nameWithType: "AbstractList.iterator()"
  fullName: "java.util.AbstractList.iterator()"
- uid: "java.util.AbstractList.add(int,E)"
  name: "AbstractList.add(int,E)"
  nameWithType: "AbstractList.add(int,E)"
  fullName: "java.util.AbstractList.add(int,E)"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.util.AbstractCollection.removeAll(java.util.Collection<?>)"
  name: "AbstractCollection.removeAll(Collection<?>)"
  nameWithType: "AbstractCollection.removeAll(Collection<?>)"
  fullName: "java.util.AbstractCollection.removeAll(java.util.Collection<?>)"
- uid: "java.util.AbstractList.remove(int)"
  name: "AbstractList.remove(int)"
  nameWithType: "AbstractList.remove(int)"
  fullName: "java.util.AbstractList.remove(int)"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.util.AbstractCollection.<T>toArray(T[])"
  name: "AbstractCollection.<T>toArray(T[])"
  nameWithType: "AbstractCollection.<T>toArray(T[])"
  fullName: "java.util.AbstractCollection.<T>toArray(T[])"
- uid: "java.util.AbstractCollection.remove(java.lang.Object)"
  name: "AbstractCollection.remove(Object)"
  nameWithType: "AbstractCollection.remove(Object)"
  fullName: "java.util.AbstractCollection.remove(java.lang.Object)"
- uid: "java.util.AbstractList.listIterator()"
  name: "AbstractList.listIterator()"
  nameWithType: "AbstractList.listIterator()"
  fullName: "java.util.AbstractList.listIterator()"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.util.AbstractCollection.toArray()"
  name: "AbstractCollection.toArray()"
  nameWithType: "AbstractCollection.toArray()"
  fullName: "java.util.AbstractCollection.toArray()"
- uid: "java.util.AbstractList.subList(int,int)"
  name: "AbstractList.subList(int,int)"
  nameWithType: "AbstractList.subList(int,int)"
  fullName: "java.util.AbstractList.subList(int,int)"
- uid: "java.util.AbstractList.add(E)"
  name: "AbstractList.add(E)"
  nameWithType: "AbstractList.add(E)"
  fullName: "java.util.AbstractList.add(E)"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.util.AbstractList.removeRange(int,int)"
  name: "AbstractList.removeRange(int,int)"
  nameWithType: "AbstractList.removeRange(int,int)"
  fullName: "java.util.AbstractList.removeRange(int,int)"
- uid: "java.util.AbstractCollection.containsAll(java.util.Collection<?>)"
  name: "AbstractCollection.containsAll(Collection<?>)"
  nameWithType: "AbstractCollection.containsAll(Collection<?>)"
  fullName: "java.util.AbstractCollection.containsAll(java.util.Collection<?>)"
- uid: "java.util.AbstractList.indexOf(java.lang.Object)"
  name: "AbstractList.indexOf(Object)"
  nameWithType: "AbstractList.indexOf(Object)"
  fullName: "java.util.AbstractList.indexOf(java.lang.Object)"
- uid: "java.util.AbstractCollection.isEmpty()"
  name: "AbstractCollection.isEmpty()"
  nameWithType: "AbstractCollection.isEmpty()"
  fullName: "java.util.AbstractCollection.isEmpty()"
- uid: "java.util.AbstractList.set(int,E)"
  name: "AbstractList.set(int,E)"
  nameWithType: "AbstractList.set(int,E)"
  fullName: "java.util.AbstractList.set(int,E)"
- uid: "java.util.AbstractCollection.toString()"
  name: "AbstractCollection.toString()"
  nameWithType: "AbstractCollection.toString()"
  fullName: "java.util.AbstractCollection.toString()"
- uid: "java.util.AbstractList.addAll(int,java.util.Collection<? extends E>)"
  name: "AbstractList.addAll(int,Collection<? extends E>)"
  nameWithType: "AbstractList.addAll(int,Collection<? extends E>)"
  fullName: "java.util.AbstractList.addAll(int,java.util.Collection<? extends E>)"
- uid: "java.util.AbstractList.listIterator(int)"
  name: "AbstractList.listIterator(int)"
  nameWithType: "AbstractList.listIterator(int)"
  fullName: "java.util.AbstractList.listIterator(int)"
- uid: "java.util.AbstractCollection.retainAll(java.util.Collection<?>)"
  name: "AbstractCollection.retainAll(Collection<?>)"
  nameWithType: "AbstractCollection.retainAll(Collection<?>)"
  fullName: "java.util.AbstractCollection.retainAll(java.util.Collection<?>)"
- uid: "java.util.AbstractCollection.addAll(java.util.Collection<? extends E>)"
  name: "AbstractCollection.addAll(Collection<? extends E>)"
  nameWithType: "AbstractCollection.addAll(Collection<? extends E>)"
  fullName: "java.util.AbstractCollection.addAll(java.util.Collection<? extends E>)"
- uid: "java.lang.Iterable"
  name: "Iterable"
  nameWithType: "Iterable"
  fullName: "java.lang.Iterable"
- uid: "java.util.AbstractList"
  name: "AbstractList"
  nameWithType: "AbstractList"
  fullName: "java.util.AbstractList"
- uid: "java.util.AbstractCollection.removeAll(java.util.Collection"
  name: "AbstractCollection.removeAll(Collection"
  nameWithType: "AbstractCollection.removeAll(Collection"
  fullName: "java.util.AbstractCollection.removeAll(java.util.Collection"
- uid: "?>)"
  name: "?>)"
  nameWithType: "?>)"
  fullName: "?>)"
- uid: "T>toArray(T[])"
  name: "T>toArray(T[])"
  nameWithType: "T>toArray(T[])"
  fullName: "T>toArray(T[])"
- uid: "java.util.AbstractCollection."
  name: "AbstractCollection."
  nameWithType: "AbstractCollection."
  fullName: "java.util.AbstractCollection."
- uid: "java.util.AbstractCollection.containsAll(java.util.Collection"
  name: "AbstractCollection.containsAll(Collection"
  nameWithType: "AbstractCollection.containsAll(Collection"
  fullName: "java.util.AbstractCollection.containsAll(java.util.Collection"
- uid: "? extends E>)"
  name: "? extends E>)"
  nameWithType: "? extends E>)"
  fullName: "? extends E>)"
- uid: "java.util.AbstractList.addAll(int,java.util.Collection"
  name: "AbstractList.addAll(int,Collection"
  nameWithType: "AbstractList.addAll(int,Collection"
  fullName: "java.util.AbstractList.addAll(int,java.util.Collection"
- uid: "java.util.AbstractCollection.retainAll(java.util.Collection"
  name: "AbstractCollection.retainAll(Collection"
  nameWithType: "AbstractCollection.retainAll(Collection"
  fullName: "java.util.AbstractCollection.retainAll(java.util.Collection"
- uid: "java.util.AbstractCollection.addAll(java.util.Collection"
  name: "AbstractCollection.addAll(Collection"
  nameWithType: "AbstractCollection.addAll(Collection"
  fullName: "java.util.AbstractCollection.addAll(java.util.Collection"
