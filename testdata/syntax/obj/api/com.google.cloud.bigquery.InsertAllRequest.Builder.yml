### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.InsertAllRequest.Builder"
  id: "Builder"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.InsertAllRequest.Builder.addRow(com.google.cloud.bigquery.InsertAllRequest.RowToInsert)"
  - "com.google.cloud.bigquery.InsertAllRequest.Builder.addRow(java.lang.String,java.util.Map<java.lang.String,?>)"
  - "com.google.cloud.bigquery.InsertAllRequest.Builder.addRow(java.util.Map<java.lang.String,?>)"
  - "com.google.cloud.bigquery.InsertAllRequest.Builder.build()"
  - "com.google.cloud.bigquery.InsertAllRequest.Builder.setIgnoreUnknownValues(boolean)"
  - "com.google.cloud.bigquery.InsertAllRequest.Builder.setRows(java.lang.Iterable<com.google.cloud.bigquery.InsertAllRequest.RowToInsert>)"
  - "com.google.cloud.bigquery.InsertAllRequest.Builder.setSkipInvalidRows(boolean)"
  - "com.google.cloud.bigquery.InsertAllRequest.Builder.setTable(com.google.cloud.bigquery.TableId)"
  - "com.google.cloud.bigquery.InsertAllRequest.Builder.setTemplateSuffix(java.lang.String)"
  langs:
  - "java"
  name: "InsertAllRequest.Builder"
  nameWithType: "InsertAllRequest.Builder"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.Builder"
  type: "Class"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public static final class InsertAllRequest.Builder"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.InsertAllRequest.Builder.Builder()"
  id: "Builder()"
  parent: "com.google.cloud.bigquery.InsertAllRequest.Builder"
  langs:
  - "java"
  name: "Builder()"
  nameWithType: "InsertAllRequest.Builder.Builder()"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.Builder.Builder()"
  overload: "com.google.cloud.bigquery.InsertAllRequest.Builder.Builder*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "private Builder()"
- uid: "com.google.cloud.bigquery.InsertAllRequest.Builder.addRow(com.google.cloud.bigquery.InsertAllRequest.RowToInsert)"
  id: "addRow(com.google.cloud.bigquery.InsertAllRequest.RowToInsert)"
  parent: "com.google.cloud.bigquery.InsertAllRequest.Builder"
  langs:
  - "java"
  name: "addRow(InsertAllRequest.RowToInsert rowToInsert)"
  nameWithType: "InsertAllRequest.Builder.addRow(InsertAllRequest.RowToInsert rowToInsert)"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.Builder.addRow(InsertAllRequest.RowToInsert rowToInsert)"
  overload: "com.google.cloud.bigquery.InsertAllRequest.Builder.addRow*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Adds a row to be inserted."
  syntax:
    content: "public InsertAllRequest.Builder addRow(InsertAllRequest.RowToInsert rowToInsert)"
    parameters:
    - id: "rowToInsert"
      type: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert"
    return:
      type: "com.google.cloud.bigquery.InsertAllRequest.Builder"
- uid: "com.google.cloud.bigquery.InsertAllRequest.Builder.addRow(java.lang.String,java.util.Map<java.lang.String,?>)"
  id: "addRow(java.lang.String,java.util.Map<java.lang.String,?>)"
  parent: "com.google.cloud.bigquery.InsertAllRequest.Builder"
  langs:
  - "java"
  name: "addRow(String id, Map<String,?> content)"
  nameWithType: "InsertAllRequest.Builder.addRow(String id, Map<String,?> content)"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.Builder.addRow(String id, Map<String,?> content)"
  overload: "com.google.cloud.bigquery.InsertAllRequest.Builder.addRow*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Adds a row to be inserted with associated id.\n\nTo ensure proper serialization of numeric data, supply values using a string-typed representation. Additionally, data for fields of <xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.BYTES\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#BYTES</xref> must be provided as a base64 encoded string.\n\nExample usage of adding a row with associated id:\n\n```java\nInsertAllRequest.Builder builder = InsertAllRequest.builder(tableId);\n List repeatedFieldValue = Arrays.asList(1L, 2L);\n Map recordContent = new HashMap();\n recordContent.put(\"subfieldName1\", \"value\");\n recordContent.put(\"subfieldName2\", repeatedFieldValue);\n Map rowContent = new HashMap();\n rowContent.put(\"booleanFieldName\", true);\n rowContent.put(\"bytesFieldName\", \"DQ4KDQ==\");\n rowContent.put(\"recordFieldName\", recordContent);\n rowContent.put(\"numericFieldName\", \"1298930929292.129593272\");\n builder.addRow(\"rowId\", rowContent);\n```"
  syntax:
    content: "public InsertAllRequest.Builder addRow(String id, Map<String,?> content)"
    parameters:
    - id: "id"
      type: "java.lang.String"
    - id: "content"
      type: "java.util.Map<java.lang.String,?>"
    return:
      type: "com.google.cloud.bigquery.InsertAllRequest.Builder"
- uid: "com.google.cloud.bigquery.InsertAllRequest.Builder.addRow(java.util.Map<java.lang.String,?>)"
  id: "addRow(java.util.Map<java.lang.String,?>)"
  parent: "com.google.cloud.bigquery.InsertAllRequest.Builder"
  langs:
  - "java"
  name: "addRow(Map<String,?> content)"
  nameWithType: "InsertAllRequest.Builder.addRow(Map<String,?> content)"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.Builder.addRow(Map<String,?> content)"
  overload: "com.google.cloud.bigquery.InsertAllRequest.Builder.addRow*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Adds a row to be inserted without an associated id.\n\nTo ensure proper serialization of numeric data, it is recommended to supply values using a string-typed representation. Additionally, data for fields of type <xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.BYTES\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#BYTES</xref> must be provided as a base64 encoded string.\n\nExample usage of adding a row without an associated id:\n\n```java\nInsertAllRequest.Builder builder = InsertAllRequest.builder(tableId);\n List repeatedFieldValue = Arrays.asList(1L, 2L);\n Map recordContent = new HashMap();\n recordContent.put(\"subfieldName1\", \"value\");\n recordContent.put(\"subfieldName2\", repeatedFieldValue);\n Map rowContent = new HashMap();\n rowContent.put(\"booleanFieldName\", true);\n rowContent.put(\"bytesFieldName\", \"DQ4KDQ==\");\n rowContent.put(\"recordFieldName\", recordContent);\n rowContent.put(\"numericFieldName\", \"1298930929292.129593272\");\n builder.addRow(rowContent);\n```"
  syntax:
    content: "public InsertAllRequest.Builder addRow(Map<String,?> content)"
    parameters:
    - id: "content"
      type: "java.util.Map<java.lang.String,?>"
    return:
      type: "com.google.cloud.bigquery.InsertAllRequest.Builder"
- uid: "com.google.cloud.bigquery.InsertAllRequest.Builder.build()"
  id: "build()"
  parent: "com.google.cloud.bigquery.InsertAllRequest.Builder"
  langs:
  - "java"
  name: "build()"
  nameWithType: "InsertAllRequest.Builder.build()"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.Builder.build()"
  overload: "com.google.cloud.bigquery.InsertAllRequest.Builder.build*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Creates an `InsertAllRequest` object."
  syntax:
    content: "public InsertAllRequest build()"
    return:
      type: "com.google.cloud.bigquery.InsertAllRequest"
- uid: "com.google.cloud.bigquery.InsertAllRequest.Builder.setIgnoreUnknownValues(boolean)"
  id: "setIgnoreUnknownValues(boolean)"
  parent: "com.google.cloud.bigquery.InsertAllRequest.Builder"
  langs:
  - "java"
  name: "setIgnoreUnknownValues(boolean ignoreUnknownValues)"
  nameWithType: "InsertAllRequest.Builder.setIgnoreUnknownValues(boolean ignoreUnknownValues)"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.Builder.setIgnoreUnknownValues(boolean ignoreUnknownValues)"
  overload: "com.google.cloud.bigquery.InsertAllRequest.Builder.setIgnoreUnknownValues*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets whether to accept rows that contain values that do not match the schema. The unknown values are ignored. If not set, rows with unknown values are considered to be invalid."
  syntax:
    content: "public InsertAllRequest.Builder setIgnoreUnknownValues(boolean ignoreUnknownValues)"
    parameters:
    - id: "ignoreUnknownValues"
      type: "boolean"
    return:
      type: "com.google.cloud.bigquery.InsertAllRequest.Builder"
- uid: "com.google.cloud.bigquery.InsertAllRequest.Builder.setRows(java.lang.Iterable<com.google.cloud.bigquery.InsertAllRequest.RowToInsert>)"
  id: "setRows(java.lang.Iterable<com.google.cloud.bigquery.InsertAllRequest.RowToInsert>)"
  parent: "com.google.cloud.bigquery.InsertAllRequest.Builder"
  langs:
  - "java"
  name: "setRows(Iterable<InsertAllRequest.RowToInsert> rows)"
  nameWithType: "InsertAllRequest.Builder.setRows(Iterable<InsertAllRequest.RowToInsert> rows)"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.Builder.setRows(Iterable<InsertAllRequest.RowToInsert> rows)"
  overload: "com.google.cloud.bigquery.InsertAllRequest.Builder.setRows*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the rows to insert as a list of <xref uid=\"com.google.cloud.bigquery.InsertAllRequest.RowToInsert\" data-throw-if-not-resolved=\"false\">RowToInsert</xref> objects."
  syntax:
    content: "public InsertAllRequest.Builder setRows(Iterable<InsertAllRequest.RowToInsert> rows)"
    parameters:
    - id: "rows"
      type: "java.lang.Iterable<com.google.cloud.bigquery.InsertAllRequest.RowToInsert>"
    return:
      type: "com.google.cloud.bigquery.InsertAllRequest.Builder"
- uid: "com.google.cloud.bigquery.InsertAllRequest.Builder.setSkipInvalidRows(boolean)"
  id: "setSkipInvalidRows(boolean)"
  parent: "com.google.cloud.bigquery.InsertAllRequest.Builder"
  langs:
  - "java"
  name: "setSkipInvalidRows(boolean skipInvalidRows)"
  nameWithType: "InsertAllRequest.Builder.setSkipInvalidRows(boolean skipInvalidRows)"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.Builder.setSkipInvalidRows(boolean skipInvalidRows)"
  overload: "com.google.cloud.bigquery.InsertAllRequest.Builder.setSkipInvalidRows*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets whether to insert all valid rows of a request, even if invalid rows exist. If not set the entire insert request will fail if it contains an invalid row."
  syntax:
    content: "public InsertAllRequest.Builder setSkipInvalidRows(boolean skipInvalidRows)"
    parameters:
    - id: "skipInvalidRows"
      type: "boolean"
    return:
      type: "com.google.cloud.bigquery.InsertAllRequest.Builder"
- uid: "com.google.cloud.bigquery.InsertAllRequest.Builder.setTable(com.google.cloud.bigquery.TableId)"
  id: "setTable(com.google.cloud.bigquery.TableId)"
  parent: "com.google.cloud.bigquery.InsertAllRequest.Builder"
  langs:
  - "java"
  name: "setTable(TableId table)"
  nameWithType: "InsertAllRequest.Builder.setTable(TableId table)"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.Builder.setTable(TableId table)"
  overload: "com.google.cloud.bigquery.InsertAllRequest.Builder.setTable*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sets the destination table for rows insert request."
  syntax:
    content: "public InsertAllRequest.Builder setTable(TableId table)"
    parameters:
    - id: "table"
      type: "com.google.cloud.bigquery.TableId"
    return:
      type: "com.google.cloud.bigquery.InsertAllRequest.Builder"
- uid: "com.google.cloud.bigquery.InsertAllRequest.Builder.setTemplateSuffix(java.lang.String)"
  id: "setTemplateSuffix(java.lang.String)"
  parent: "com.google.cloud.bigquery.InsertAllRequest.Builder"
  langs:
  - "java"
  name: "setTemplateSuffix(String templateSuffix)"
  nameWithType: "InsertAllRequest.Builder.setTemplateSuffix(String templateSuffix)"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.Builder.setTemplateSuffix(String templateSuffix)"
  overload: "com.google.cloud.bigquery.InsertAllRequest.Builder.setTemplateSuffix*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "If specified, the destination table is treated as a base template. Rows are inserted into an instance table named \"\\{destination\\}\\{templateSuffix\\}\". BigQuery will manage the creation of the instance table, using the schema of the base template table. Table creation might take some time. To obtain table's information after <xref uid=\"com.google.cloud.bigquery.BigQuery.insertAll(com.google.cloud.bigquery.InsertAllRequest)\" data-throw-if-not-resolved=\"false\">BigQuery#insertAll(InsertAllRequest)</xref> is called use:\n\n```java\nString suffixTableId = ...;\n TableInfo suffixTable = bigquery.getTable(DATASET, suffixTableId);\n while (suffixTable == null) {\n   Thread.sleep(1000L);\n   suffixTable = bigquery.getTable(DATASET, suffixTableId);\n }\n```"
  syntax:
    content: "public InsertAllRequest.Builder setTemplateSuffix(String templateSuffix)"
    parameters:
    - id: "templateSuffix"
      type: "java.lang.String"
    return:
      type: "com.google.cloud.bigquery.InsertAllRequest.Builder"
references:
- uid: "com.google.cloud.bigquery.InsertAllRequest.Builder.Builder*"
  name: "Builder"
  nameWithType: "InsertAllRequest.Builder.Builder"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.Builder.Builder"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TableId"
  name: "TableId"
  nameWithType: "TableId"
  fullName: "com.google.cloud.bigquery.TableId"
- uid: "com.google.cloud.bigquery.InsertAllRequest.Builder.setTable*"
  name: "setTable"
  nameWithType: "InsertAllRequest.Builder.setTable"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.Builder.setTable"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Iterable<com.google.cloud.bigquery.InsertAllRequest.RowToInsert>"
  spec.java:
  - uid: "java.lang.Iterable"
    name: "Iterable"
    fullName: "java.lang.Iterable"
  - name: "<"
    fullName: "<"
  - uid: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert"
    name: "RowToInsert"
    fullName: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.InsertAllRequest.Builder.setRows*"
  name: "setRows"
  nameWithType: "InsertAllRequest.Builder.setRows"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.Builder.setRows"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert"
  name: "InsertAllRequest.RowToInsert"
  nameWithType: "InsertAllRequest.RowToInsert"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert"
- uid: "com.google.cloud.bigquery.InsertAllRequest.Builder.addRow*"
  name: "addRow"
  nameWithType: "InsertAllRequest.Builder.addRow"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.Builder.addRow"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "java.util.Map<java.lang.String,?>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "?"
    name: "?"
    fullName: "?"
  - name: ">"
    fullName: ">"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.google.cloud.bigquery.InsertAllRequest.Builder.setSkipInvalidRows*"
  name: "setSkipInvalidRows"
  nameWithType: "InsertAllRequest.Builder.setSkipInvalidRows"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.Builder.setSkipInvalidRows"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.InsertAllRequest.Builder.setIgnoreUnknownValues*"
  name: "setIgnoreUnknownValues"
  nameWithType: "InsertAllRequest.Builder.setIgnoreUnknownValues"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.Builder.setIgnoreUnknownValues"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.InsertAllRequest.Builder.setTemplateSuffix*"
  name: "setTemplateSuffix"
  nameWithType: "InsertAllRequest.Builder.setTemplateSuffix"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.Builder.setTemplateSuffix"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.InsertAllRequest"
  name: "InsertAllRequest"
  nameWithType: "InsertAllRequest"
  fullName: "com.google.cloud.bigquery.InsertAllRequest"
- uid: "com.google.cloud.bigquery.InsertAllRequest.Builder.build*"
  name: "build"
  nameWithType: "InsertAllRequest.Builder.build"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.Builder.build"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.lang.Iterable"
  name: "Iterable"
  nameWithType: "Iterable"
  fullName: "java.lang.Iterable"
- uid: "java.lang.String,?"
  name: "String,?"
  nameWithType: "String,?"
  fullName: "java.lang.String,?"
- uid: "java.util.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
