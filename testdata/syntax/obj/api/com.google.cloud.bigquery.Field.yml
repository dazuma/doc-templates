### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.Field"
  id: "Field"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.Field.Builder"
  - "com.google.cloud.bigquery.Field.Mode"
  - "com.google.cloud.bigquery.Field.equals(java.lang.Object)"
  - "com.google.cloud.bigquery.Field.getDescription()"
  - "com.google.cloud.bigquery.Field.getMode()"
  - "com.google.cloud.bigquery.Field.getName()"
  - "com.google.cloud.bigquery.Field.getPolicyTags()"
  - "com.google.cloud.bigquery.Field.getSubFields()"
  - "com.google.cloud.bigquery.Field.getType()"
  - "com.google.cloud.bigquery.Field.hashCode()"
  - "com.google.cloud.bigquery.Field.newBuilder(java.lang.String,com.google.cloud.bigquery.LegacySQLTypeName,com.google.cloud.bigquery.Field...)"
  - "com.google.cloud.bigquery.Field.newBuilder(java.lang.String,com.google.cloud.bigquery.LegacySQLTypeName,com.google.cloud.bigquery.FieldList)"
  - "com.google.cloud.bigquery.Field.newBuilder(java.lang.String,com.google.cloud.bigquery.StandardSQLTypeName,com.google.cloud.bigquery.Field...)"
  - "com.google.cloud.bigquery.Field.newBuilder(java.lang.String,com.google.cloud.bigquery.StandardSQLTypeName,com.google.cloud.bigquery.FieldList)"
  - "com.google.cloud.bigquery.Field.of(java.lang.String,com.google.cloud.bigquery.LegacySQLTypeName,com.google.cloud.bigquery.Field...)"
  - "com.google.cloud.bigquery.Field.of(java.lang.String,com.google.cloud.bigquery.LegacySQLTypeName,com.google.cloud.bigquery.FieldList)"
  - "com.google.cloud.bigquery.Field.of(java.lang.String,com.google.cloud.bigquery.StandardSQLTypeName,com.google.cloud.bigquery.Field...)"
  - "com.google.cloud.bigquery.Field.of(java.lang.String,com.google.cloud.bigquery.StandardSQLTypeName,com.google.cloud.bigquery.FieldList)"
  - "com.google.cloud.bigquery.Field.toBuilder()"
  - "com.google.cloud.bigquery.Field.toString()"
  langs:
  - "java"
  name: "Field"
  nameWithType: "Field"
  fullName: "com.google.cloud.bigquery.Field"
  type: "Class"
  package: "com.google.cloud.bigquery"
  summary: "Google BigQuery Table schema field. A table field has a name, a type, a mode and possibly a description."
  syntax:
    content: "public final class Field implements Serializable"
  inheritance:
  - "java.lang.Object"
  implements:
  - "java.io.Serializable"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.Field.Field(com.google.cloud.bigquery.Field.Builder)"
  id: "Field(com.google.cloud.bigquery.Field.Builder)"
  parent: "com.google.cloud.bigquery.Field"
  langs:
  - "java"
  name: "Field(Field.Builder builder)"
  nameWithType: "Field.Field(Field.Builder builder)"
  fullName: "com.google.cloud.bigquery.Field.Field(Field.Builder builder)"
  overload: "com.google.cloud.bigquery.Field.Field*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "private Field(Field.Builder builder)"
    parameters:
    - id: "builder"
      type: "com.google.cloud.bigquery.Field.Builder"
- uid: "com.google.cloud.bigquery.Field.equals(java.lang.Object)"
  id: "equals(java.lang.Object)"
  parent: "com.google.cloud.bigquery.Field"
  langs:
  - "java"
  name: "equals(Object obj)"
  nameWithType: "Field.equals(Object obj)"
  fullName: "com.google.cloud.bigquery.Field.equals(Object obj)"
  overload: "com.google.cloud.bigquery.Field.equals*"
  overridden: "java.lang.Object.equals(java.lang.Object)"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public boolean equals(Object obj)"
    parameters:
    - id: "obj"
      type: "java.lang.Object"
    return:
      type: "boolean"
- uid: "com.google.cloud.bigquery.Field.getDescription()"
  id: "getDescription()"
  parent: "com.google.cloud.bigquery.Field"
  langs:
  - "java"
  name: "getDescription()"
  nameWithType: "Field.getDescription()"
  fullName: "com.google.cloud.bigquery.Field.getDescription()"
  overload: "com.google.cloud.bigquery.Field.getDescription*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the field description."
  syntax:
    content: "public String getDescription()"
    return:
      type: "java.lang.String"
- uid: "com.google.cloud.bigquery.Field.getMode()"
  id: "getMode()"
  parent: "com.google.cloud.bigquery.Field"
  langs:
  - "java"
  name: "getMode()"
  nameWithType: "Field.getMode()"
  fullName: "com.google.cloud.bigquery.Field.getMode()"
  overload: "com.google.cloud.bigquery.Field.getMode*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the field mode. By default <xref uid=\"\" data-throw-if-not-resolved=\"false\">Mode#NULLABLE</xref> is used."
  syntax:
    content: "public Field.Mode getMode()"
    return:
      type: "com.google.cloud.bigquery.Field.Mode"
- uid: "com.google.cloud.bigquery.Field.getName()"
  id: "getName()"
  parent: "com.google.cloud.bigquery.Field"
  langs:
  - "java"
  name: "getName()"
  nameWithType: "Field.getName()"
  fullName: "com.google.cloud.bigquery.Field.getName()"
  overload: "com.google.cloud.bigquery.Field.getName*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the field name."
  syntax:
    content: "public String getName()"
    return:
      type: "java.lang.String"
- uid: "com.google.cloud.bigquery.Field.getPolicyTags()"
  id: "getPolicyTags()"
  parent: "com.google.cloud.bigquery.Field"
  langs:
  - "java"
  name: "getPolicyTags()"
  nameWithType: "Field.getPolicyTags()"
  fullName: "com.google.cloud.bigquery.Field.getPolicyTags()"
  overload: "com.google.cloud.bigquery.Field.getPolicyTags*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the policy tags for the field."
  syntax:
    content: "public PolicyTags getPolicyTags()"
    return:
      type: "com.google.cloud.bigquery.PolicyTags"
- uid: "com.google.cloud.bigquery.Field.getSubFields()"
  id: "getSubFields()"
  parent: "com.google.cloud.bigquery.Field"
  langs:
  - "java"
  name: "getSubFields()"
  nameWithType: "Field.getSubFields()"
  fullName: "com.google.cloud.bigquery.Field.getSubFields()"
  overload: "com.google.cloud.bigquery.Field.getSubFields*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the list of sub-fields if <xref uid=\"com.google.cloud.bigquery.Field.getType()\" data-throw-if-not-resolved=\"false\">#getType()</xref> is a <xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.RECORD\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#RECORD</xref>. Returns `null` otherwise."
  syntax:
    content: "public FieldList getSubFields()"
    return:
      type: "com.google.cloud.bigquery.FieldList"
- uid: "com.google.cloud.bigquery.Field.getType()"
  id: "getType()"
  parent: "com.google.cloud.bigquery.Field"
  langs:
  - "java"
  name: "getType()"
  nameWithType: "Field.getType()"
  fullName: "com.google.cloud.bigquery.Field.getType()"
  overload: "com.google.cloud.bigquery.Field.getType*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the field type."
  syntax:
    content: "public LegacySQLTypeName getType()"
    return:
      type: "com.google.cloud.bigquery.LegacySQLTypeName"
- uid: "com.google.cloud.bigquery.Field.hashCode()"
  id: "hashCode()"
  parent: "com.google.cloud.bigquery.Field"
  langs:
  - "java"
  name: "hashCode()"
  nameWithType: "Field.hashCode()"
  fullName: "com.google.cloud.bigquery.Field.hashCode()"
  overload: "com.google.cloud.bigquery.Field.hashCode*"
  overridden: "java.lang.Object.hashCode()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public int hashCode()"
    return:
      type: "int"
- uid: "com.google.cloud.bigquery.Field.newBuilder(java.lang.String,com.google.cloud.bigquery.LegacySQLTypeName,com.google.cloud.bigquery.Field...)"
  id: "newBuilder(java.lang.String,com.google.cloud.bigquery.LegacySQLTypeName,com.google.cloud.bigquery.Field...)"
  parent: "com.google.cloud.bigquery.Field"
  langs:
  - "java"
  name: "newBuilder(String name, LegacySQLTypeName type, Field[] subFields)"
  nameWithType: "Field.newBuilder(String name, LegacySQLTypeName type, Field[] subFields)"
  fullName: "com.google.cloud.bigquery.Field.newBuilder(String name, LegacySQLTypeName type, Field[] subFields)"
  overload: "com.google.cloud.bigquery.Field.newBuilder*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a builder for a Field object with given name and type."
  syntax:
    content: "public static Field.Builder newBuilder(String name, LegacySQLTypeName type, Field[] subFields)"
    parameters:
    - id: "name"
      type: "java.lang.String"
    - id: "type"
      type: "com.google.cloud.bigquery.LegacySQLTypeName"
    - id: "subFields"
      type: "com.google.cloud.bigquery.Field[]"
    return:
      type: "com.google.cloud.bigquery.Field.Builder"
- uid: "com.google.cloud.bigquery.Field.newBuilder(java.lang.String,com.google.cloud.bigquery.LegacySQLTypeName,com.google.cloud.bigquery.FieldList)"
  id: "newBuilder(java.lang.String,com.google.cloud.bigquery.LegacySQLTypeName,com.google.cloud.bigquery.FieldList)"
  parent: "com.google.cloud.bigquery.Field"
  langs:
  - "java"
  name: "newBuilder(String name, LegacySQLTypeName type, FieldList subFields)"
  nameWithType: "Field.newBuilder(String name, LegacySQLTypeName type, FieldList subFields)"
  fullName: "com.google.cloud.bigquery.Field.newBuilder(String name, LegacySQLTypeName type, FieldList subFields)"
  overload: "com.google.cloud.bigquery.Field.newBuilder*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a builder for a Field object with given name and type."
  syntax:
    content: "public static Field.Builder newBuilder(String name, LegacySQLTypeName type, FieldList subFields)"
    parameters:
    - id: "name"
      type: "java.lang.String"
    - id: "type"
      type: "com.google.cloud.bigquery.LegacySQLTypeName"
    - id: "subFields"
      type: "com.google.cloud.bigquery.FieldList"
    return:
      type: "com.google.cloud.bigquery.Field.Builder"
- uid: "com.google.cloud.bigquery.Field.newBuilder(java.lang.String,com.google.cloud.bigquery.StandardSQLTypeName,com.google.cloud.bigquery.Field...)"
  id: "newBuilder(java.lang.String,com.google.cloud.bigquery.StandardSQLTypeName,com.google.cloud.bigquery.Field...)"
  parent: "com.google.cloud.bigquery.Field"
  langs:
  - "java"
  name: "newBuilder(String name, StandardSQLTypeName type, Field[] subFields)"
  nameWithType: "Field.newBuilder(String name, StandardSQLTypeName type, Field[] subFields)"
  fullName: "com.google.cloud.bigquery.Field.newBuilder(String name, StandardSQLTypeName type, Field[] subFields)"
  overload: "com.google.cloud.bigquery.Field.newBuilder*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a builder for a Field object with given name and type."
  syntax:
    content: "public static Field.Builder newBuilder(String name, StandardSQLTypeName type, Field[] subFields)"
    parameters:
    - id: "name"
      type: "java.lang.String"
    - id: "type"
      type: "com.google.cloud.bigquery.StandardSQLTypeName"
    - id: "subFields"
      type: "com.google.cloud.bigquery.Field[]"
    return:
      type: "com.google.cloud.bigquery.Field.Builder"
- uid: "com.google.cloud.bigquery.Field.newBuilder(java.lang.String,com.google.cloud.bigquery.StandardSQLTypeName,com.google.cloud.bigquery.FieldList)"
  id: "newBuilder(java.lang.String,com.google.cloud.bigquery.StandardSQLTypeName,com.google.cloud.bigquery.FieldList)"
  parent: "com.google.cloud.bigquery.Field"
  langs:
  - "java"
  name: "newBuilder(String name, StandardSQLTypeName type, FieldList subFields)"
  nameWithType: "Field.newBuilder(String name, StandardSQLTypeName type, FieldList subFields)"
  fullName: "com.google.cloud.bigquery.Field.newBuilder(String name, StandardSQLTypeName type, FieldList subFields)"
  overload: "com.google.cloud.bigquery.Field.newBuilder*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a builder for a Field object with given name and type."
  syntax:
    content: "public static Field.Builder newBuilder(String name, StandardSQLTypeName type, FieldList subFields)"
    parameters:
    - id: "name"
      type: "java.lang.String"
    - id: "type"
      type: "com.google.cloud.bigquery.StandardSQLTypeName"
    - id: "subFields"
      type: "com.google.cloud.bigquery.FieldList"
    return:
      type: "com.google.cloud.bigquery.Field.Builder"
- uid: "com.google.cloud.bigquery.Field.of(java.lang.String,com.google.cloud.bigquery.LegacySQLTypeName,com.google.cloud.bigquery.Field...)"
  id: "of(java.lang.String,com.google.cloud.bigquery.LegacySQLTypeName,com.google.cloud.bigquery.Field...)"
  parent: "com.google.cloud.bigquery.Field"
  langs:
  - "java"
  name: "of(String name, LegacySQLTypeName type, Field[] subFields)"
  nameWithType: "Field.of(String name, LegacySQLTypeName type, Field[] subFields)"
  fullName: "com.google.cloud.bigquery.Field.of(String name, LegacySQLTypeName type, Field[] subFields)"
  overload: "com.google.cloud.bigquery.Field.of*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a Field object with given name and type."
  syntax:
    content: "public static Field of(String name, LegacySQLTypeName type, Field[] subFields)"
    parameters:
    - id: "name"
      type: "java.lang.String"
    - id: "type"
      type: "com.google.cloud.bigquery.LegacySQLTypeName"
    - id: "subFields"
      type: "com.google.cloud.bigquery.Field[]"
    return:
      type: "com.google.cloud.bigquery.Field"
- uid: "com.google.cloud.bigquery.Field.of(java.lang.String,com.google.cloud.bigquery.LegacySQLTypeName,com.google.cloud.bigquery.FieldList)"
  id: "of(java.lang.String,com.google.cloud.bigquery.LegacySQLTypeName,com.google.cloud.bigquery.FieldList)"
  parent: "com.google.cloud.bigquery.Field"
  langs:
  - "java"
  name: "of(String name, LegacySQLTypeName type, FieldList subFields)"
  nameWithType: "Field.of(String name, LegacySQLTypeName type, FieldList subFields)"
  fullName: "com.google.cloud.bigquery.Field.of(String name, LegacySQLTypeName type, FieldList subFields)"
  overload: "com.google.cloud.bigquery.Field.of*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a Field object with given name and type."
  syntax:
    content: "public static Field of(String name, LegacySQLTypeName type, FieldList subFields)"
    parameters:
    - id: "name"
      type: "java.lang.String"
    - id: "type"
      type: "com.google.cloud.bigquery.LegacySQLTypeName"
    - id: "subFields"
      type: "com.google.cloud.bigquery.FieldList"
    return:
      type: "com.google.cloud.bigquery.Field"
- uid: "com.google.cloud.bigquery.Field.of(java.lang.String,com.google.cloud.bigquery.StandardSQLTypeName,com.google.cloud.bigquery.Field...)"
  id: "of(java.lang.String,com.google.cloud.bigquery.StandardSQLTypeName,com.google.cloud.bigquery.Field...)"
  parent: "com.google.cloud.bigquery.Field"
  langs:
  - "java"
  name: "of(String name, StandardSQLTypeName type, Field[] subFields)"
  nameWithType: "Field.of(String name, StandardSQLTypeName type, Field[] subFields)"
  fullName: "com.google.cloud.bigquery.Field.of(String name, StandardSQLTypeName type, Field[] subFields)"
  overload: "com.google.cloud.bigquery.Field.of*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a Field object with given name and type."
  syntax:
    content: "public static Field of(String name, StandardSQLTypeName type, Field[] subFields)"
    parameters:
    - id: "name"
      type: "java.lang.String"
    - id: "type"
      type: "com.google.cloud.bigquery.StandardSQLTypeName"
    - id: "subFields"
      type: "com.google.cloud.bigquery.Field[]"
    return:
      type: "com.google.cloud.bigquery.Field"
- uid: "com.google.cloud.bigquery.Field.of(java.lang.String,com.google.cloud.bigquery.StandardSQLTypeName,com.google.cloud.bigquery.FieldList)"
  id: "of(java.lang.String,com.google.cloud.bigquery.StandardSQLTypeName,com.google.cloud.bigquery.FieldList)"
  parent: "com.google.cloud.bigquery.Field"
  langs:
  - "java"
  name: "of(String name, StandardSQLTypeName type, FieldList subFields)"
  nameWithType: "Field.of(String name, StandardSQLTypeName type, FieldList subFields)"
  fullName: "com.google.cloud.bigquery.Field.of(String name, StandardSQLTypeName type, FieldList subFields)"
  overload: "com.google.cloud.bigquery.Field.of*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a Field object with given name and type."
  syntax:
    content: "public static Field of(String name, StandardSQLTypeName type, FieldList subFields)"
    parameters:
    - id: "name"
      type: "java.lang.String"
    - id: "type"
      type: "com.google.cloud.bigquery.StandardSQLTypeName"
    - id: "subFields"
      type: "com.google.cloud.bigquery.FieldList"
    return:
      type: "com.google.cloud.bigquery.Field"
- uid: "com.google.cloud.bigquery.Field.toBuilder()"
  id: "toBuilder()"
  parent: "com.google.cloud.bigquery.Field"
  langs:
  - "java"
  name: "toBuilder()"
  nameWithType: "Field.toBuilder()"
  fullName: "com.google.cloud.bigquery.Field.toBuilder()"
  overload: "com.google.cloud.bigquery.Field.toBuilder*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a builder for the `Field` object."
  syntax:
    content: "public Field.Builder toBuilder()"
    return:
      type: "com.google.cloud.bigquery.Field.Builder"
- uid: "com.google.cloud.bigquery.Field.toString()"
  id: "toString()"
  parent: "com.google.cloud.bigquery.Field"
  langs:
  - "java"
  name: "toString()"
  nameWithType: "Field.toString()"
  fullName: "com.google.cloud.bigquery.Field.toString()"
  overload: "com.google.cloud.bigquery.Field.toString*"
  overridden: "java.lang.Object.toString()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public String toString()"
    return:
      type: "java.lang.String"
references:
- uid: "com.google.cloud.bigquery.Field.Builder"
  name: "Field.Builder"
  nameWithType: "Field.Builder"
  fullName: "com.google.cloud.bigquery.Field.Builder"
- uid: "com.google.cloud.bigquery.Field.Field*"
  name: "Field"
  nameWithType: "Field.Field"
  fullName: "com.google.cloud.bigquery.Field.Field"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.Field.getName*"
  name: "getName"
  nameWithType: "Field.getName"
  fullName: "com.google.cloud.bigquery.Field.getName"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.LegacySQLTypeName"
  name: "LegacySQLTypeName"
  nameWithType: "LegacySQLTypeName"
  fullName: "com.google.cloud.bigquery.LegacySQLTypeName"
- uid: "com.google.cloud.bigquery.Field.getType*"
  name: "getType"
  nameWithType: "Field.getType"
  fullName: "com.google.cloud.bigquery.Field.getType"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Field.Mode"
  name: "Field.Mode"
  nameWithType: "Field.Mode"
  fullName: "com.google.cloud.bigquery.Field.Mode"
- uid: "com.google.cloud.bigquery.Field.getMode*"
  name: "getMode"
  nameWithType: "Field.getMode"
  fullName: "com.google.cloud.bigquery.Field.getMode"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Field.getDescription*"
  name: "getDescription"
  nameWithType: "Field.getDescription"
  fullName: "com.google.cloud.bigquery.Field.getDescription"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.PolicyTags"
  name: "PolicyTags"
  nameWithType: "PolicyTags"
  fullName: "com.google.cloud.bigquery.PolicyTags"
- uid: "com.google.cloud.bigquery.Field.getPolicyTags*"
  name: "getPolicyTags"
  nameWithType: "Field.getPolicyTags"
  fullName: "com.google.cloud.bigquery.Field.getPolicyTags"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.FieldList"
  name: "FieldList"
  nameWithType: "FieldList"
  fullName: "com.google.cloud.bigquery.FieldList"
- uid: "com.google.cloud.bigquery.Field.getSubFields*"
  name: "getSubFields"
  nameWithType: "Field.getSubFields"
  fullName: "com.google.cloud.bigquery.Field.getSubFields"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Field.toBuilder*"
  name: "toBuilder"
  nameWithType: "Field.toBuilder"
  fullName: "com.google.cloud.bigquery.Field.toBuilder"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Field.toString*"
  name: "toString"
  nameWithType: "Field.toString"
  fullName: "com.google.cloud.bigquery.Field.toString"
  package: "com.google.cloud.bigquery"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.google.cloud.bigquery.Field.hashCode*"
  name: "hashCode"
  nameWithType: "Field.hashCode"
  fullName: "com.google.cloud.bigquery.Field.hashCode"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.google.cloud.bigquery.Field.equals*"
  name: "equals"
  nameWithType: "Field.equals"
  fullName: "com.google.cloud.bigquery.Field.equals"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Field[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.Field"
    name: "Field"
    fullName: "com.google.cloud.bigquery.Field"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.cloud.bigquery.Field.of*"
  name: "of"
  nameWithType: "Field.of"
  fullName: "com.google.cloud.bigquery.Field.of"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.StandardSQLTypeName"
  name: "StandardSQLTypeName"
  nameWithType: "StandardSQLTypeName"
  fullName: "com.google.cloud.bigquery.StandardSQLTypeName"
- uid: "com.google.cloud.bigquery.Field.newBuilder*"
  name: "newBuilder"
  nameWithType: "Field.newBuilder"
  fullName: "com.google.cloud.bigquery.Field.newBuilder"
  package: "com.google.cloud.bigquery"
- uid: "java.io.Serializable"
  name: "Serializable"
  nameWithType: "Serializable"
  fullName: "java.io.Serializable"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
