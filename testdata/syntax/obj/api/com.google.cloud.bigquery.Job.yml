### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.Job"
  id: "Job"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.Job.Builder"
  - "com.google.cloud.bigquery.Job.cancel()"
  - "com.google.cloud.bigquery.Job.equals(java.lang.Object)"
  - "com.google.cloud.bigquery.Job.exists()"
  - "com.google.cloud.bigquery.Job.getBigQuery()"
  - "com.google.cloud.bigquery.Job.getQueryResults(com.google.cloud.bigquery.BigQuery.QueryResultsOption...)"
  - "com.google.cloud.bigquery.Job.hashCode()"
  - "com.google.cloud.bigquery.Job.isDone()"
  - "com.google.cloud.bigquery.Job.reload(com.google.cloud.bigquery.BigQuery.JobOption...)"
  - "com.google.cloud.bigquery.Job.toBuilder()"
  - "com.google.cloud.bigquery.Job.waitFor(com.google.cloud.RetryOption...)"
  langs:
  - "java"
  name: "Job"
  nameWithType: "Job"
  fullName: "com.google.cloud.bigquery.Job"
  type: "Class"
  package: "com.google.cloud.bigquery"
  summary: "A Google BigQuery Job.\n\nObjects of this class are immutable. To get a `Job` object with the most recent information use <xref uid=\"com.google.cloud.bigquery.Job.reload*\" data-throw-if-not-resolved=\"false\">#reload</xref>. `Job` adds a layer of service-related functionality over <xref uid=\"com.google.cloud.bigquery.JobInfo\" data-throw-if-not-resolved=\"false\">JobInfo</xref>."
  syntax:
    content: "public class Job extends JobInfo"
  inheritance:
  - "java.lang.Object"
  - "com.google.cloud.bigquery.JobInfo"
  inheritedMembers:
  - "com.google.cloud.bigquery.JobInfo.<C>getConfiguration()"
  - "com.google.cloud.bigquery.JobInfo.<S>getStatistics()"
  - "com.google.cloud.bigquery.JobInfo.equals(java.lang.Object)"
  - "com.google.cloud.bigquery.JobInfo.getEtag()"
  - "com.google.cloud.bigquery.JobInfo.getGeneratedId()"
  - "com.google.cloud.bigquery.JobInfo.getJobId()"
  - "com.google.cloud.bigquery.JobInfo.getSelfLink()"
  - "com.google.cloud.bigquery.JobInfo.getStatus()"
  - "com.google.cloud.bigquery.JobInfo.getUserEmail()"
  - "com.google.cloud.bigquery.JobInfo.hashCode()"
  - "com.google.cloud.bigquery.JobInfo.newBuilder(com.google.cloud.bigquery.JobConfiguration)"
  - "com.google.cloud.bigquery.JobInfo.of(com.google.cloud.bigquery.JobConfiguration)"
  - "com.google.cloud.bigquery.JobInfo.of(com.google.cloud.bigquery.JobId,com.google.cloud.bigquery.JobConfiguration)"
  - "com.google.cloud.bigquery.JobInfo.toBuilder()"
  - "com.google.cloud.bigquery.JobInfo.toString()"
  - "java.lang.Object.clone()"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.Job.Job(com.google.cloud.bigquery.BigQuery,com.google.cloud.bigquery.JobInfo.BuilderImpl)"
  id: "Job(com.google.cloud.bigquery.BigQuery,com.google.cloud.bigquery.JobInfo.BuilderImpl)"
  parent: "com.google.cloud.bigquery.Job"
  langs:
  - "java"
  name: "Job(BigQuery bigquery, JobInfo.BuilderImpl infoBuilder)"
  nameWithType: "Job.Job(BigQuery bigquery, JobInfo.BuilderImpl infoBuilder)"
  fullName: "com.google.cloud.bigquery.Job.Job(BigQuery bigquery, JobInfo.BuilderImpl infoBuilder)"
  overload: "com.google.cloud.bigquery.Job.Job*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: " Job(BigQuery bigquery, JobInfo.BuilderImpl infoBuilder)"
    parameters:
    - id: "bigquery"
      type: "com.google.cloud.bigquery.BigQuery"
    - id: "infoBuilder"
      type: "com.google.cloud.bigquery.JobInfo.BuilderImpl"
- uid: "com.google.cloud.bigquery.Job.cancel()"
  id: "cancel()"
  parent: "com.google.cloud.bigquery.Job"
  langs:
  - "java"
  name: "cancel()"
  nameWithType: "Job.cancel()"
  fullName: "com.google.cloud.bigquery.Job.cancel()"
  overload: "com.google.cloud.bigquery.Job.cancel*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Sends a job cancel request.\n\nExample of cancelling a job.\n\n```java\nif (job.cancel()) {\n   return true; // job successfully cancelled\n } else {\n   // job not found\n }\n```"
  syntax:
    content: "public boolean cancel()"
    return:
      type: "boolean"
      description: "<code>true</code> if cancel request was sent successfully, <code>false</code> if job was not\n     found"
- uid: "com.google.cloud.bigquery.Job.equals(java.lang.Object)"
  id: "equals(java.lang.Object)"
  parent: "com.google.cloud.bigquery.Job"
  langs:
  - "java"
  name: "equals(Object obj)"
  nameWithType: "Job.equals(Object obj)"
  fullName: "com.google.cloud.bigquery.Job.equals(Object obj)"
  overload: "com.google.cloud.bigquery.Job.equals*"
  overridden: "com.google.cloud.bigquery.JobInfo.equals(java.lang.Object)"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public final boolean equals(Object obj)"
    parameters:
    - id: "obj"
      type: "java.lang.Object"
    return:
      type: "boolean"
- uid: "com.google.cloud.bigquery.Job.exists()"
  id: "exists()"
  parent: "com.google.cloud.bigquery.Job"
  langs:
  - "java"
  name: "exists()"
  nameWithType: "Job.exists()"
  fullName: "com.google.cloud.bigquery.Job.exists()"
  overload: "com.google.cloud.bigquery.Job.exists*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Checks if this job exists.\n\nExample of checking that a job exists.\n\n```java\nif (!job.exists()) {\n   // job doesn't exist\n }\n```"
  syntax:
    content: "public boolean exists()"
    return:
      type: "boolean"
      description: "<code>true</code> if this job exists, <code>false</code> otherwise"
- uid: "com.google.cloud.bigquery.Job.getBigQuery()"
  id: "getBigQuery()"
  parent: "com.google.cloud.bigquery.Job"
  langs:
  - "java"
  name: "getBigQuery()"
  nameWithType: "Job.getBigQuery()"
  fullName: "com.google.cloud.bigquery.Job.getBigQuery()"
  overload: "com.google.cloud.bigquery.Job.getBigQuery*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the job's `BigQuery` object used to issue requests."
  syntax:
    content: "public BigQuery getBigQuery()"
    return:
      type: "com.google.cloud.bigquery.BigQuery"
- uid: "com.google.cloud.bigquery.Job.getQueryResults(com.google.cloud.bigquery.BigQuery.QueryResultsOption...)"
  id: "getQueryResults(com.google.cloud.bigquery.BigQuery.QueryResultsOption...)"
  parent: "com.google.cloud.bigquery.Job"
  langs:
  - "java"
  name: "getQueryResults(BigQuery.QueryResultsOption[] options)"
  nameWithType: "Job.getQueryResults(BigQuery.QueryResultsOption[] options)"
  fullName: "com.google.cloud.bigquery.Job.getQueryResults(BigQuery.QueryResultsOption[] options)"
  overload: "com.google.cloud.bigquery.Job.getQueryResults*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Gets the query results of this job. This job must be of type `JobConfiguration.Type.QUERY`, otherwise this method will throw <xref uid=\"\" data-throw-if-not-resolved=\"false\">UnsupportedOperationException</xref>.\n\nIf the job hasn't finished, this method waits for the job to complete. However, the state of the current `Job` instance is not updated. To get the new state, call <xref uid=\"com.google.cloud.bigquery.Job.waitFor*\" data-throw-if-not-resolved=\"false\">#waitFor(RetryOption...)</xref> or <xref uid=\"com.google.cloud.bigquery.Job.reload*\" data-throw-if-not-resolved=\"false\">#reload(JobOption...)</xref>."
  syntax:
    content: "public TableResult getQueryResults(BigQuery.QueryResultsOption[] options)"
    parameters:
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.QueryResultsOption[]"
    return:
      type: "com.google.cloud.bigquery.TableResult"
  exceptions:
  - type: "java.lang.InterruptedException"
    description: "upon failure"
  - type: "com.google.cloud.bigquery.JobException"
    description: "upon failure"
- uid: "com.google.cloud.bigquery.Job.hashCode()"
  id: "hashCode()"
  parent: "com.google.cloud.bigquery.Job"
  langs:
  - "java"
  name: "hashCode()"
  nameWithType: "Job.hashCode()"
  fullName: "com.google.cloud.bigquery.Job.hashCode()"
  overload: "com.google.cloud.bigquery.Job.hashCode*"
  overridden: "com.google.cloud.bigquery.JobInfo.hashCode()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public final int hashCode()"
    return:
      type: "int"
- uid: "com.google.cloud.bigquery.Job.isDone()"
  id: "isDone()"
  parent: "com.google.cloud.bigquery.Job"
  langs:
  - "java"
  name: "isDone()"
  nameWithType: "Job.isDone()"
  fullName: "com.google.cloud.bigquery.Job.isDone()"
  overload: "com.google.cloud.bigquery.Job.isDone*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Checks if this job has completed its execution, either failing or succeeding. If the job does not exist this method returns `true`.\n\nExample of waiting for a job until it reports that it is done.\n\n```java\nwhile (!job.isDone()) {\n   Thread.sleep(1000L);\n }\n```"
  syntax:
    content: "public boolean isDone()"
    return:
      type: "boolean"
      description: "<code>true</code> if this job is in <xref uid=\"com.google.cloud.bigquery.JobStatus.State.DONE\" data-throw-if-not-resolved=\"false\">JobStatus.State#DONE</xref> state or if it does not\n     exist, <code>false</code> if the state is not <xref uid=\"com.google.cloud.bigquery.JobStatus.State.DONE\" data-throw-if-not-resolved=\"false\">JobStatus.State#DONE</xref>"
- uid: "com.google.cloud.bigquery.Job.reload(com.google.cloud.bigquery.BigQuery.JobOption...)"
  id: "reload(com.google.cloud.bigquery.BigQuery.JobOption...)"
  parent: "com.google.cloud.bigquery.Job"
  langs:
  - "java"
  name: "reload(BigQuery.JobOption[] options)"
  nameWithType: "Job.reload(BigQuery.JobOption[] options)"
  fullName: "com.google.cloud.bigquery.Job.reload(BigQuery.JobOption[] options)"
  overload: "com.google.cloud.bigquery.Job.reload*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Fetches current job's latest information. Returns `null` if the job does not exist.\n\nExample of reloading all fields until job status is DONE.\n\n```java\nwhile (!JobStatus.State.DONE.equals(job.getStatus().getState())) {\n   Thread.sleep(1000L);\n   job = job.reload();\n }\n```\n\nExample of reloading status field until job status is DONE.\n\n```java\nwhile (!JobStatus.State.DONE.equals(job.getStatus().getState())) {\n   Thread.sleep(1000L);\n   job = job.reload(BigQuery.JobOption.fields(BigQuery.JobField.STATUS));\n }\n```"
  syntax:
    content: "public Job reload(BigQuery.JobOption[] options)"
    parameters:
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.JobOption[]"
      description: "job options"
    return:
      type: "com.google.cloud.bigquery.Job"
      description: "a <code>Job</code> object with latest information or <code>null</code> if not found"
- uid: "com.google.cloud.bigquery.Job.toBuilder()"
  id: "toBuilder()"
  parent: "com.google.cloud.bigquery.Job"
  langs:
  - "java"
  name: "toBuilder()"
  nameWithType: "Job.toBuilder()"
  fullName: "com.google.cloud.bigquery.Job.toBuilder()"
  overload: "com.google.cloud.bigquery.Job.toBuilder*"
  overridden: "com.google.cloud.bigquery.JobInfo.toBuilder()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a builder for the job object."
  syntax:
    content: "public Job.Builder toBuilder()"
    return:
      type: "com.google.cloud.bigquery.Job.Builder"
- uid: "com.google.cloud.bigquery.Job.waitFor(com.google.cloud.RetryOption...)"
  id: "waitFor(com.google.cloud.RetryOption...)"
  parent: "com.google.cloud.bigquery.Job"
  langs:
  - "java"
  name: "waitFor(RetryOption[] waitOptions)"
  nameWithType: "Job.waitFor(RetryOption[] waitOptions)"
  fullName: "com.google.cloud.bigquery.Job.waitFor(RetryOption[] waitOptions)"
  overload: "com.google.cloud.bigquery.Job.waitFor*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Blocks until this job completes its execution, either failing or succeeding. This method returns current job's latest information. If the job no longer exists, this method returns `null`. By default, the job status is checked using jittered exponential backoff with 1 second as an initial delay, 2.0 as a backoff factor, 1 minute as maximum delay between polls, 12 hours as a total timeout and unlimited number of attempts.\n\nExample usage of `waitFor()`.\n\n```java\nJob completedJob = job.waitFor();\n if (completedJob == null) {\n   // job no longer exists\n } else if (completedJob.getStatus().getError() != null) {\n   // job failed, handle error\n } else {\n   // job completed successfully\n }\n```\n\nExample usage of `waitFor()` with checking period and timeout.\n\n```java\nJob completedJob =\n     job.waitFor(\n         RetryOption.initialRetryDelay(Duration.ofSeconds(1)),\n         RetryOption.totalTimeout(Duration.ofMinutes(1)));\n if (completedJob == null) {\n   // job no longer exists\n } else if (completedJob.getStatus().getError() != null) {\n   // job failed, handle error\n } else {\n   // job completed successfully\n }\n```"
  syntax:
    content: "public Job waitFor(RetryOption[] waitOptions)"
    parameters:
    - id: "waitOptions"
      type: "com.google.cloud.RetryOption[]"
      description: "options to configure checking period and timeout"
    return:
      type: "com.google.cloud.bigquery.Job"
  exceptions:
  - type: "java.lang.InterruptedException"
    description: "upon failure, check <xref uid=\"BigQueryException#getCause()\" data-throw-if-not-resolved=\"false\">BigQueryException#getCause()</xref> for details"
references:
- uid: "com.google.cloud.bigquery.BigQuery"
  name: "BigQuery"
  nameWithType: "BigQuery"
  fullName: "com.google.cloud.bigquery.BigQuery"
- uid: "com.google.cloud.bigquery.JobInfo.BuilderImpl"
  spec.java:
  - uid: "com.google.cloud.bigquery.JobInfo.BuilderImpl"
    name: "BuilderImpl"
    fullName: "com.google.cloud.bigquery.JobInfo.BuilderImpl"
- uid: "com.google.cloud.bigquery.Job.Job*"
  name: "Job"
  nameWithType: "Job.Job"
  fullName: "com.google.cloud.bigquery.Job.Job"
  package: "com.google.cloud.bigquery"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.google.cloud.bigquery.Job.exists*"
  name: "exists"
  nameWithType: "Job.exists"
  fullName: "com.google.cloud.bigquery.Job.exists"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Job.isDone*"
  name: "isDone"
  nameWithType: "Job.isDone"
  fullName: "com.google.cloud.bigquery.Job.isDone"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.InterruptedException"
  spec.java:
  - uid: "java.lang.InterruptedException"
    name: "InterruptedException"
    fullName: "java.lang.InterruptedException"
- uid: "com.google.cloud.RetryOption[]"
  spec.java:
  - uid: "com.google.cloud.RetryOption"
    name: "RetryOption"
    fullName: "com.google.cloud.RetryOption"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.cloud.bigquery.Job.waitFor*"
  name: "waitFor"
  nameWithType: "Job.waitFor"
  fullName: "com.google.cloud.bigquery.Job.waitFor"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.JobException"
  name: "JobException"
  nameWithType: "JobException"
  fullName: "com.google.cloud.bigquery.JobException"
- uid: "com.google.cloud.bigquery.BigQuery.QueryResultsOption[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.BigQuery.QueryResultsOption"
    name: "QueryResultsOption"
    fullName: "com.google.cloud.bigquery.BigQuery.QueryResultsOption"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.cloud.bigquery.TableResult"
  name: "TableResult"
  nameWithType: "TableResult"
  fullName: "com.google.cloud.bigquery.TableResult"
- uid: "com.google.cloud.bigquery.Job.getQueryResults*"
  name: "getQueryResults"
  nameWithType: "Job.getQueryResults"
  fullName: "com.google.cloud.bigquery.Job.getQueryResults"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.BigQuery.JobOption[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.BigQuery.JobOption"
    name: "JobOption"
    fullName: "com.google.cloud.bigquery.BigQuery.JobOption"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.cloud.bigquery.Job.reload*"
  name: "reload"
  nameWithType: "Job.reload"
  fullName: "com.google.cloud.bigquery.Job.reload"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Job.cancel*"
  name: "cancel"
  nameWithType: "Job.cancel"
  fullName: "com.google.cloud.bigquery.Job.cancel"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Job.getBigQuery*"
  name: "getBigQuery"
  nameWithType: "Job.getBigQuery"
  fullName: "com.google.cloud.bigquery.Job.getBigQuery"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Job.Builder"
  name: "Job.Builder"
  nameWithType: "Job.Builder"
  fullName: "com.google.cloud.bigquery.Job.Builder"
- uid: "com.google.cloud.bigquery.Job.toBuilder*"
  name: "toBuilder"
  nameWithType: "Job.toBuilder"
  fullName: "com.google.cloud.bigquery.Job.toBuilder"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "com.google.cloud.bigquery.Job.equals*"
  name: "equals"
  nameWithType: "Job.equals"
  fullName: "com.google.cloud.bigquery.Job.equals"
  package: "com.google.cloud.bigquery"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.google.cloud.bigquery.Job.hashCode*"
  name: "hashCode"
  nameWithType: "Job.hashCode"
  fullName: "com.google.cloud.bigquery.Job.hashCode"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.JobInfo"
  name: "JobInfo"
  nameWithType: "JobInfo"
  fullName: "com.google.cloud.bigquery.JobInfo"
- uid: "com.google.cloud.bigquery.JobInfo.hashCode()"
  name: "JobInfo.hashCode()"
  nameWithType: "JobInfo.hashCode()"
  fullName: "com.google.cloud.bigquery.JobInfo.hashCode()"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "com.google.cloud.bigquery.JobInfo.toBuilder()"
  name: "JobInfo.toBuilder()"
  nameWithType: "JobInfo.toBuilder()"
  fullName: "com.google.cloud.bigquery.JobInfo.toBuilder()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "com.google.cloud.bigquery.JobInfo.toString()"
  name: "JobInfo.toString()"
  nameWithType: "JobInfo.toString()"
  fullName: "com.google.cloud.bigquery.JobInfo.toString()"
- uid: "com.google.cloud.bigquery.JobInfo.<S>getStatistics()"
  name: "JobInfo.<S>getStatistics()"
  nameWithType: "JobInfo.<S>getStatistics()"
  fullName: "com.google.cloud.bigquery.JobInfo.<S>getStatistics()"
- uid: "com.google.cloud.bigquery.JobInfo.of(com.google.cloud.bigquery.JobConfiguration)"
  name: "JobInfo.of(JobConfiguration)"
  nameWithType: "JobInfo.of(JobConfiguration)"
  fullName: "com.google.cloud.bigquery.JobInfo.of(com.google.cloud.bigquery.JobConfiguration)"
- uid: "com.google.cloud.bigquery.JobInfo.of(com.google.cloud.bigquery.JobId,com.google.cloud.bigquery.JobConfiguration)"
  name: "JobInfo.of(JobId,JobConfiguration)"
  nameWithType: "JobInfo.of(JobId,JobConfiguration)"
  fullName: "com.google.cloud.bigquery.JobInfo.of(com.google.cloud.bigquery.JobId,com.google.cloud.bigquery.JobConfiguration)"
- uid: "com.google.cloud.bigquery.JobInfo.getJobId()"
  name: "JobInfo.getJobId()"
  nameWithType: "JobInfo.getJobId()"
  fullName: "com.google.cloud.bigquery.JobInfo.getJobId()"
- uid: "com.google.cloud.bigquery.JobInfo.equals(java.lang.Object)"
  name: "JobInfo.equals(Object)"
  nameWithType: "JobInfo.equals(Object)"
  fullName: "com.google.cloud.bigquery.JobInfo.equals(java.lang.Object)"
- uid: "com.google.cloud.bigquery.JobInfo.newBuilder(com.google.cloud.bigquery.JobConfiguration)"
  name: "JobInfo.newBuilder(JobConfiguration)"
  nameWithType: "JobInfo.newBuilder(JobConfiguration)"
  fullName: "com.google.cloud.bigquery.JobInfo.newBuilder(com.google.cloud.bigquery.JobConfiguration)"
- uid: "com.google.cloud.bigquery.JobInfo.getEtag()"
  name: "JobInfo.getEtag()"
  nameWithType: "JobInfo.getEtag()"
  fullName: "com.google.cloud.bigquery.JobInfo.getEtag()"
- uid: "com.google.cloud.bigquery.JobInfo.<C>getConfiguration()"
  name: "JobInfo.<C>getConfiguration()"
  nameWithType: "JobInfo.<C>getConfiguration()"
  fullName: "com.google.cloud.bigquery.JobInfo.<C>getConfiguration()"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "com.google.cloud.bigquery.JobInfo.getUserEmail()"
  name: "JobInfo.getUserEmail()"
  nameWithType: "JobInfo.getUserEmail()"
  fullName: "com.google.cloud.bigquery.JobInfo.getUserEmail()"
- uid: "com.google.cloud.bigquery.JobInfo.getGeneratedId()"
  name: "JobInfo.getGeneratedId()"
  nameWithType: "JobInfo.getGeneratedId()"
  fullName: "com.google.cloud.bigquery.JobInfo.getGeneratedId()"
- uid: "com.google.cloud.bigquery.JobInfo.getSelfLink()"
  name: "JobInfo.getSelfLink()"
  nameWithType: "JobInfo.getSelfLink()"
  fullName: "com.google.cloud.bigquery.JobInfo.getSelfLink()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.JobInfo.getStatus()"
  name: "JobInfo.getStatus()"
  nameWithType: "JobInfo.getStatus()"
  fullName: "com.google.cloud.bigquery.JobInfo.getStatus()"
- uid: "S>getStatistics()"
  name: "S>getStatistics()"
  nameWithType: "S>getStatistics()"
  fullName: "S>getStatistics()"
- uid: "com.google.cloud.bigquery.JobInfo."
  name: "JobInfo."
  nameWithType: "JobInfo."
  fullName: "com.google.cloud.bigquery.JobInfo."
- uid: "C>getConfiguration()"
  name: "C>getConfiguration()"
  nameWithType: "C>getConfiguration()"
  fullName: "C>getConfiguration()"
