### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.FieldValue"
  id: "FieldValue"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.FieldValue.Attribute"
  - "com.google.cloud.bigquery.FieldValue.equals(java.lang.Object)"
  - "com.google.cloud.bigquery.FieldValue.getAttribute()"
  - "com.google.cloud.bigquery.FieldValue.getBooleanValue()"
  - "com.google.cloud.bigquery.FieldValue.getBytesValue()"
  - "com.google.cloud.bigquery.FieldValue.getDoubleValue()"
  - "com.google.cloud.bigquery.FieldValue.getLongValue()"
  - "com.google.cloud.bigquery.FieldValue.getNumericValue()"
  - "com.google.cloud.bigquery.FieldValue.getRecordValue()"
  - "com.google.cloud.bigquery.FieldValue.getRepeatedValue()"
  - "com.google.cloud.bigquery.FieldValue.getStringValue()"
  - "com.google.cloud.bigquery.FieldValue.getTimestampValue()"
  - "com.google.cloud.bigquery.FieldValue.getValue()"
  - "com.google.cloud.bigquery.FieldValue.hashCode()"
  - "com.google.cloud.bigquery.FieldValue.isNull()"
  - "com.google.cloud.bigquery.FieldValue.of(com.google.cloud.bigquery.FieldValue.Attribute,java.lang.Object)"
  - "com.google.cloud.bigquery.FieldValue.toString()"
  langs:
  - "java"
  name: "FieldValue"
  nameWithType: "FieldValue"
  fullName: "com.google.cloud.bigquery.FieldValue"
  type: "Class"
  package: "com.google.cloud.bigquery"
  summary: "Google BigQuery Table Field Value class. Objects of this class represent values of a BigQuery Table Field. A list of values forms a table row. Tables rows can be gotten as the result of a query or when listing table data."
  syntax:
    content: "public class FieldValue implements Serializable"
  inheritance:
  - "java.lang.Object"
  implements:
  - "java.io.Serializable"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.FieldValue.FieldValue(com.google.cloud.bigquery.FieldValue.Attribute,java.lang.Object)"
  id: "FieldValue(com.google.cloud.bigquery.FieldValue.Attribute,java.lang.Object)"
  parent: "com.google.cloud.bigquery.FieldValue"
  langs:
  - "java"
  name: "FieldValue(FieldValue.Attribute attribute, Object value)"
  nameWithType: "FieldValue.FieldValue(FieldValue.Attribute attribute, Object value)"
  fullName: "com.google.cloud.bigquery.FieldValue.FieldValue(FieldValue.Attribute attribute, Object value)"
  overload: "com.google.cloud.bigquery.FieldValue.FieldValue*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "private FieldValue(FieldValue.Attribute attribute, Object value)"
    parameters:
    - id: "attribute"
      type: "com.google.cloud.bigquery.FieldValue.Attribute"
    - id: "value"
      type: "java.lang.Object"
- uid: "com.google.cloud.bigquery.FieldValue.equals(java.lang.Object)"
  id: "equals(java.lang.Object)"
  parent: "com.google.cloud.bigquery.FieldValue"
  langs:
  - "java"
  name: "equals(Object obj)"
  nameWithType: "FieldValue.equals(Object obj)"
  fullName: "com.google.cloud.bigquery.FieldValue.equals(Object obj)"
  overload: "com.google.cloud.bigquery.FieldValue.equals*"
  overridden: "java.lang.Object.equals(java.lang.Object)"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public final boolean equals(Object obj)"
    parameters:
    - id: "obj"
      type: "java.lang.Object"
    return:
      type: "boolean"
- uid: "com.google.cloud.bigquery.FieldValue.getAttribute()"
  id: "getAttribute()"
  parent: "com.google.cloud.bigquery.FieldValue"
  langs:
  - "java"
  name: "getAttribute()"
  nameWithType: "FieldValue.getAttribute()"
  fullName: "com.google.cloud.bigquery.FieldValue.getAttribute()"
  overload: "com.google.cloud.bigquery.FieldValue.getAttribute*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the attribute of this Field Value."
  syntax:
    content: "public FieldValue.Attribute getAttribute()"
    return:
      type: "com.google.cloud.bigquery.FieldValue.Attribute"
      description: "<xref uid=\"\" data-throw-if-not-resolved=\"false\">Attribute#PRIMITIVE</xref> if the field is a primitive type (<xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.BYTES\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#BYTES</xref>, <xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#BOOLEAN</xref>, <xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.STRING\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#STRING</xref>, <xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.FLOAT\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#FLOAT</xref>, <xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.INTEGER\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#INTEGER</xref>, <xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.NUMERIC\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#NUMERIC</xref>, <xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#TIMESTAMP</xref>, <xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.GEOGRAPHY\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#GEOGRAPHY</xref>) or is <code>null</code>.\n     <p>Returns <xref uid=\"\" data-throw-if-not-resolved=\"false\">Attribute#REPEATED</xref> if the corresponding field has (<xref uid=\"com.google.cloud.bigquery.Field.Mode.REPEATED\" data-throw-if-not-resolved=\"false\">Field.Mode#REPEATED</xref>) mode. Returns <xref uid=\"\" data-throw-if-not-resolved=\"false\">Attribute#RECORD</xref> if the corresponding field is\n     a <xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.RECORD\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#RECORD</xref> type."
- uid: "com.google.cloud.bigquery.FieldValue.getBooleanValue()"
  id: "getBooleanValue()"
  parent: "com.google.cloud.bigquery.FieldValue"
  langs:
  - "java"
  name: "getBooleanValue()"
  nameWithType: "FieldValue.getBooleanValue()"
  fullName: "com.google.cloud.bigquery.FieldValue.getBooleanValue()"
  overload: "com.google.cloud.bigquery.FieldValue.getBooleanValue*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns this field's value as a <xref uid=\"\" data-throw-if-not-resolved=\"false\">Boolean</xref>. This method should only be used if the corresponding field has <xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#BOOLEAN</xref> type."
  syntax:
    content: "public boolean getBooleanValue()"
    return:
      type: "boolean"
- uid: "com.google.cloud.bigquery.FieldValue.getBytesValue()"
  id: "getBytesValue()"
  parent: "com.google.cloud.bigquery.FieldValue"
  langs:
  - "java"
  name: "getBytesValue()"
  nameWithType: "FieldValue.getBytesValue()"
  fullName: "com.google.cloud.bigquery.FieldValue.getBytesValue()"
  overload: "com.google.cloud.bigquery.FieldValue.getBytesValue*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns this field's value as a byte array. This method should only be used if the corresponding field has primitive type (<xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.BYTES\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#BYTES</xref>."
  syntax:
    content: "public byte[] getBytesValue()"
    return:
      type: "byte[]"
- uid: "com.google.cloud.bigquery.FieldValue.getDoubleValue()"
  id: "getDoubleValue()"
  parent: "com.google.cloud.bigquery.FieldValue"
  langs:
  - "java"
  name: "getDoubleValue()"
  nameWithType: "FieldValue.getDoubleValue()"
  fullName: "com.google.cloud.bigquery.FieldValue.getDoubleValue()"
  overload: "com.google.cloud.bigquery.FieldValue.getDoubleValue*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns this field's value as a <xref uid=\"\" data-throw-if-not-resolved=\"false\">Double</xref>. This method should only be used if the corresponding field has <xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.FLOAT\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#FLOAT</xref> type."
  syntax:
    content: "public double getDoubleValue()"
    return:
      type: "double"
- uid: "com.google.cloud.bigquery.FieldValue.getLongValue()"
  id: "getLongValue()"
  parent: "com.google.cloud.bigquery.FieldValue"
  langs:
  - "java"
  name: "getLongValue()"
  nameWithType: "FieldValue.getLongValue()"
  fullName: "com.google.cloud.bigquery.FieldValue.getLongValue()"
  overload: "com.google.cloud.bigquery.FieldValue.getLongValue*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns this field's value as a `long`. This method should only be used if the corresponding field has <xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.INTEGER\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#INTEGER</xref> type."
  syntax:
    content: "public long getLongValue()"
    return:
      type: "long"
- uid: "com.google.cloud.bigquery.FieldValue.getNumericValue()"
  id: "getNumericValue()"
  parent: "com.google.cloud.bigquery.FieldValue"
  langs:
  - "java"
  name: "getNumericValue()"
  nameWithType: "FieldValue.getNumericValue()"
  fullName: "com.google.cloud.bigquery.FieldValue.getNumericValue()"
  overload: "com.google.cloud.bigquery.FieldValue.getNumericValue*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns this field's value as a <xref uid=\"java.math.BigDecimal\" data-throw-if-not-resolved=\"false\">java.math.BigDecimal</xref>. This method should only be used if the corresponding field has <xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.NUMERIC\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#NUMERIC</xref> type."
  syntax:
    content: "public BigDecimal getNumericValue()"
    return:
      type: "java.math.BigDecimal"
- uid: "com.google.cloud.bigquery.FieldValue.getRecordValue()"
  id: "getRecordValue()"
  parent: "com.google.cloud.bigquery.FieldValue"
  langs:
  - "java"
  name: "getRecordValue()"
  nameWithType: "FieldValue.getRecordValue()"
  fullName: "com.google.cloud.bigquery.FieldValue.getRecordValue()"
  overload: "com.google.cloud.bigquery.FieldValue.getRecordValue*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns this field's value as a <xref uid=\"com.google.cloud.bigquery.FieldValueList\" data-throw-if-not-resolved=\"false\">FieldValueList</xref> instance. This method should only be used if the corresponding field has <xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.RECORD\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#RECORD</xref> type (i.e. <xref uid=\"com.google.cloud.bigquery.FieldValue.getAttribute()\" data-throw-if-not-resolved=\"false\">#getAttribute()</xref> is <xref uid=\"\" data-throw-if-not-resolved=\"false\">Attribute#RECORD</xref>)."
  syntax:
    content: "public FieldValueList getRecordValue()"
    return:
      type: "com.google.cloud.bigquery.FieldValueList"
- uid: "com.google.cloud.bigquery.FieldValue.getRepeatedValue()"
  id: "getRepeatedValue()"
  parent: "com.google.cloud.bigquery.FieldValue"
  langs:
  - "java"
  name: "getRepeatedValue()"
  nameWithType: "FieldValue.getRepeatedValue()"
  fullName: "com.google.cloud.bigquery.FieldValue.getRepeatedValue()"
  overload: "com.google.cloud.bigquery.FieldValue.getRepeatedValue*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns this field's value as a list of <xref uid=\"com.google.cloud.bigquery.FieldValue\" data-throw-if-not-resolved=\"false\">FieldValue</xref>. This method should only be used if the corresponding field has <xref uid=\"com.google.cloud.bigquery.Field.Mode.REPEATED\" data-throw-if-not-resolved=\"false\">Field.Mode#REPEATED</xref> mode (i.e. <xref uid=\"com.google.cloud.bigquery.FieldValue.getAttribute()\" data-throw-if-not-resolved=\"false\">#getAttribute()</xref> is <xref uid=\"\" data-throw-if-not-resolved=\"false\">Attribute#REPEATED</xref>)."
  syntax:
    content: "public List<FieldValue> getRepeatedValue()"
    return:
      type: "java.util.List<com.google.cloud.bigquery.FieldValue>"
- uid: "com.google.cloud.bigquery.FieldValue.getStringValue()"
  id: "getStringValue()"
  parent: "com.google.cloud.bigquery.FieldValue"
  langs:
  - "java"
  name: "getStringValue()"
  nameWithType: "FieldValue.getStringValue()"
  fullName: "com.google.cloud.bigquery.FieldValue.getStringValue()"
  overload: "com.google.cloud.bigquery.FieldValue.getStringValue*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns this field's value as a <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\">String</xref>. This method should only be used if the corresponding field has primitive type (<xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.BYTES\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#BYTES</xref>, <xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#BOOLEAN</xref>, <xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.STRING\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#STRING</xref>, <xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.FLOAT\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#FLOAT</xref>, <xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.INTEGER\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#INTEGER</xref>, <xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.NUMERIC\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#NUMERIC</xref> <xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#TIMESTAMP</xref>)."
  syntax:
    content: "public String getStringValue()"
    return:
      type: "java.lang.String"
- uid: "com.google.cloud.bigquery.FieldValue.getTimestampValue()"
  id: "getTimestampValue()"
  parent: "com.google.cloud.bigquery.FieldValue"
  langs:
  - "java"
  name: "getTimestampValue()"
  nameWithType: "FieldValue.getTimestampValue()"
  fullName: "com.google.cloud.bigquery.FieldValue.getTimestampValue()"
  overload: "com.google.cloud.bigquery.FieldValue.getTimestampValue*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns this field's value as a `long`, representing a timestamp in microseconds since epoch (UNIX time). This method should only be used if the corresponding field has <xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#TIMESTAMP</xref> type."
  syntax:
    content: "public long getTimestampValue()"
    return:
      type: "long"
- uid: "com.google.cloud.bigquery.FieldValue.getValue()"
  id: "getValue()"
  parent: "com.google.cloud.bigquery.FieldValue"
  langs:
  - "java"
  name: "getValue()"
  nameWithType: "FieldValue.getValue()"
  fullName: "com.google.cloud.bigquery.FieldValue.getValue()"
  overload: "com.google.cloud.bigquery.FieldValue.getValue*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns this field's value as an <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\">Object</xref>. If <xref uid=\"com.google.cloud.bigquery.FieldValue.isNull()\" data-throw-if-not-resolved=\"false\">#isNull()</xref> is `true` this method returns `null`."
  syntax:
    content: "public Object getValue()"
    return:
      type: "java.lang.Object"
- uid: "com.google.cloud.bigquery.FieldValue.hashCode()"
  id: "hashCode()"
  parent: "com.google.cloud.bigquery.FieldValue"
  langs:
  - "java"
  name: "hashCode()"
  nameWithType: "FieldValue.hashCode()"
  fullName: "com.google.cloud.bigquery.FieldValue.hashCode()"
  overload: "com.google.cloud.bigquery.FieldValue.hashCode*"
  overridden: "java.lang.Object.hashCode()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public final int hashCode()"
    return:
      type: "int"
- uid: "com.google.cloud.bigquery.FieldValue.isNull()"
  id: "isNull()"
  parent: "com.google.cloud.bigquery.FieldValue"
  langs:
  - "java"
  name: "isNull()"
  nameWithType: "FieldValue.isNull()"
  fullName: "com.google.cloud.bigquery.FieldValue.isNull()"
  overload: "com.google.cloud.bigquery.FieldValue.isNull*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns `true` if this field's value is `null`, `false` otherwise."
  syntax:
    content: "public boolean isNull()"
    return:
      type: "boolean"
- uid: "com.google.cloud.bigquery.FieldValue.of(com.google.cloud.bigquery.FieldValue.Attribute,java.lang.Object)"
  id: "of(com.google.cloud.bigquery.FieldValue.Attribute,java.lang.Object)"
  parent: "com.google.cloud.bigquery.FieldValue"
  langs:
  - "java"
  name: "of(FieldValue.Attribute attribute, Object value)"
  nameWithType: "FieldValue.of(FieldValue.Attribute attribute, Object value)"
  fullName: "com.google.cloud.bigquery.FieldValue.of(FieldValue.Attribute attribute, Object value)"
  overload: "com.google.cloud.bigquery.FieldValue.of*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Creates an instance of `FieldValue`, useful for testing.\n\nIf the `attribute` is <xref uid=\"\" data-throw-if-not-resolved=\"false\">Attribute#PRIMITIVE</xref>, the `value` should be the string representation of the underlying value, eg `\"123\"` for number `123`.\n\nIf the `attribute` is <xref uid=\"\" data-throw-if-not-resolved=\"false\">Attribute#REPEATED</xref> or <xref uid=\"\" data-throw-if-not-resolved=\"false\">Attribute#RECORD</xref>, the `value` should be `List` of <xref uid=\"com.google.cloud.bigquery.FieldValue\" data-throw-if-not-resolved=\"false\">FieldValue</xref>s or <xref uid=\"com.google.cloud.bigquery.FieldValueList\" data-throw-if-not-resolved=\"false\">FieldValueList</xref>, respectively.\n\nThis method is unstable. See [this discussion][] for more context.\n\n\n[this discussion]: https://github.com/googleapis/google-cloud-java/pull/2891"
  syntax:
    content: "public static FieldValue of(FieldValue.Attribute attribute, Object value)"
    parameters:
    - id: "attribute"
      type: "com.google.cloud.bigquery.FieldValue.Attribute"
    - id: "value"
      type: "java.lang.Object"
    return:
      type: "com.google.cloud.bigquery.FieldValue"
- uid: "com.google.cloud.bigquery.FieldValue.toString()"
  id: "toString()"
  parent: "com.google.cloud.bigquery.FieldValue"
  langs:
  - "java"
  name: "toString()"
  nameWithType: "FieldValue.toString()"
  fullName: "com.google.cloud.bigquery.FieldValue.toString()"
  overload: "com.google.cloud.bigquery.FieldValue.toString*"
  overridden: "java.lang.Object.toString()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public String toString()"
    return:
      type: "java.lang.String"
references:
- uid: "com.google.cloud.bigquery.FieldValue.Attribute"
  name: "FieldValue.Attribute"
  nameWithType: "FieldValue.Attribute"
  fullName: "com.google.cloud.bigquery.FieldValue.Attribute"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "com.google.cloud.bigquery.FieldValue.FieldValue*"
  name: "FieldValue"
  nameWithType: "FieldValue.FieldValue"
  fullName: "com.google.cloud.bigquery.FieldValue.FieldValue"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.FieldValue.getAttribute*"
  name: "getAttribute"
  nameWithType: "FieldValue.getAttribute"
  fullName: "com.google.cloud.bigquery.FieldValue.getAttribute"
  package: "com.google.cloud.bigquery"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.google.cloud.bigquery.FieldValue.isNull*"
  name: "isNull"
  nameWithType: "FieldValue.isNull"
  fullName: "com.google.cloud.bigquery.FieldValue.isNull"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.FieldValue.getValue*"
  name: "getValue"
  nameWithType: "FieldValue.getValue"
  fullName: "com.google.cloud.bigquery.FieldValue.getValue"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.FieldValue.getStringValue*"
  name: "getStringValue"
  nameWithType: "FieldValue.getStringValue"
  fullName: "com.google.cloud.bigquery.FieldValue.getStringValue"
  package: "com.google.cloud.bigquery"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.cloud.bigquery.FieldValue.getBytesValue*"
  name: "getBytesValue"
  nameWithType: "FieldValue.getBytesValue"
  fullName: "com.google.cloud.bigquery.FieldValue.getBytesValue"
  package: "com.google.cloud.bigquery"
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "com.google.cloud.bigquery.FieldValue.getLongValue*"
  name: "getLongValue"
  nameWithType: "FieldValue.getLongValue"
  fullName: "com.google.cloud.bigquery.FieldValue.getLongValue"
  package: "com.google.cloud.bigquery"
- uid: "double"
  spec.java:
  - uid: "double"
    name: "double"
    fullName: "double"
- uid: "com.google.cloud.bigquery.FieldValue.getDoubleValue*"
  name: "getDoubleValue"
  nameWithType: "FieldValue.getDoubleValue"
  fullName: "com.google.cloud.bigquery.FieldValue.getDoubleValue"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.FieldValue.getBooleanValue*"
  name: "getBooleanValue"
  nameWithType: "FieldValue.getBooleanValue"
  fullName: "com.google.cloud.bigquery.FieldValue.getBooleanValue"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.FieldValue.getTimestampValue*"
  name: "getTimestampValue"
  nameWithType: "FieldValue.getTimestampValue"
  fullName: "com.google.cloud.bigquery.FieldValue.getTimestampValue"
  package: "com.google.cloud.bigquery"
- uid: "java.math.BigDecimal"
  spec.java:
  - uid: "java.math.BigDecimal"
    name: "BigDecimal"
    fullName: "java.math.BigDecimal"
- uid: "com.google.cloud.bigquery.FieldValue.getNumericValue*"
  name: "getNumericValue"
  nameWithType: "FieldValue.getNumericValue"
  fullName: "com.google.cloud.bigquery.FieldValue.getNumericValue"
  package: "com.google.cloud.bigquery"
- uid: "java.util.List<com.google.cloud.bigquery.FieldValue>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "com.google.cloud.bigquery.FieldValue"
    name: "FieldValue"
    fullName: "com.google.cloud.bigquery.FieldValue"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.FieldValue.getRepeatedValue*"
  name: "getRepeatedValue"
  nameWithType: "FieldValue.getRepeatedValue"
  fullName: "com.google.cloud.bigquery.FieldValue.getRepeatedValue"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.FieldValueList"
  name: "FieldValueList"
  nameWithType: "FieldValueList"
  fullName: "com.google.cloud.bigquery.FieldValueList"
- uid: "com.google.cloud.bigquery.FieldValue.getRecordValue*"
  name: "getRecordValue"
  nameWithType: "FieldValue.getRecordValue"
  fullName: "com.google.cloud.bigquery.FieldValue.getRecordValue"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.FieldValue.toString*"
  name: "toString"
  nameWithType: "FieldValue.toString"
  fullName: "com.google.cloud.bigquery.FieldValue.toString"
  package: "com.google.cloud.bigquery"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.google.cloud.bigquery.FieldValue.hashCode*"
  name: "hashCode"
  nameWithType: "FieldValue.hashCode"
  fullName: "com.google.cloud.bigquery.FieldValue.hashCode"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.FieldValue.equals*"
  name: "equals"
  nameWithType: "FieldValue.equals"
  fullName: "com.google.cloud.bigquery.FieldValue.equals"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.FieldValue.of*"
  name: "of"
  nameWithType: "FieldValue.of"
  fullName: "com.google.cloud.bigquery.FieldValue.of"
  package: "com.google.cloud.bigquery"
- uid: "java.io.Serializable"
  name: "Serializable"
  nameWithType: "Serializable"
  fullName: "java.io.Serializable"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
