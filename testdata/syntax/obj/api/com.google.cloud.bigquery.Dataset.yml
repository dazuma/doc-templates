### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.Dataset"
  id: "Dataset"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.Dataset.Builder"
  - "com.google.cloud.bigquery.Dataset.create(java.lang.String,com.google.cloud.bigquery.TableDefinition,com.google.cloud.bigquery.BigQuery.TableOption...)"
  - "com.google.cloud.bigquery.Dataset.delete(com.google.cloud.bigquery.BigQuery.DatasetDeleteOption...)"
  - "com.google.cloud.bigquery.Dataset.equals(java.lang.Object)"
  - "com.google.cloud.bigquery.Dataset.exists()"
  - "com.google.cloud.bigquery.Dataset.get(java.lang.String,com.google.cloud.bigquery.BigQuery.TableOption...)"
  - "com.google.cloud.bigquery.Dataset.getBigQuery()"
  - "com.google.cloud.bigquery.Dataset.hashCode()"
  - "com.google.cloud.bigquery.Dataset.list(com.google.cloud.bigquery.BigQuery.TableListOption...)"
  - "com.google.cloud.bigquery.Dataset.reload(com.google.cloud.bigquery.BigQuery.DatasetOption...)"
  - "com.google.cloud.bigquery.Dataset.toBuilder()"
  - "com.google.cloud.bigquery.Dataset.update(com.google.cloud.bigquery.BigQuery.DatasetOption...)"
  langs:
  - "java"
  name: "Dataset"
  nameWithType: "Dataset"
  fullName: "com.google.cloud.bigquery.Dataset"
  type: "Class"
  package: "com.google.cloud.bigquery"
  summary: "A Google BigQuery Dataset.\n\nObjects of this class are immutable. Operations that modify the dataset like <xref uid=\"com.google.cloud.bigquery.Dataset.update*\" data-throw-if-not-resolved=\"false\">#update</xref> return a new object. To get a `Dataset` object with the most recent information use <xref uid=\"com.google.cloud.bigquery.Dataset.reload*\" data-throw-if-not-resolved=\"false\">#reload</xref>. `Dataset` adds a layer of service-related functionality over <xref uid=\"com.google.cloud.bigquery.DatasetInfo\" data-throw-if-not-resolved=\"false\">DatasetInfo</xref>."
  syntax:
    content: "public class Dataset extends DatasetInfo"
  inheritance:
  - "java.lang.Object"
  - "com.google.cloud.bigquery.DatasetInfo"
  inheritedMembers:
  - "com.google.cloud.bigquery.DatasetInfo.equals(java.lang.Object)"
  - "com.google.cloud.bigquery.DatasetInfo.getAcl()"
  - "com.google.cloud.bigquery.DatasetInfo.getCreationTime()"
  - "com.google.cloud.bigquery.DatasetInfo.getDatasetId()"
  - "com.google.cloud.bigquery.DatasetInfo.getDefaultEncryptionConfiguration()"
  - "com.google.cloud.bigquery.DatasetInfo.getDefaultPartitionExpirationMs()"
  - "com.google.cloud.bigquery.DatasetInfo.getDefaultTableLifetime()"
  - "com.google.cloud.bigquery.DatasetInfo.getDescription()"
  - "com.google.cloud.bigquery.DatasetInfo.getEtag()"
  - "com.google.cloud.bigquery.DatasetInfo.getFriendlyName()"
  - "com.google.cloud.bigquery.DatasetInfo.getGeneratedId()"
  - "com.google.cloud.bigquery.DatasetInfo.getLabels()"
  - "com.google.cloud.bigquery.DatasetInfo.getLastModified()"
  - "com.google.cloud.bigquery.DatasetInfo.getLocation()"
  - "com.google.cloud.bigquery.DatasetInfo.getSelfLink()"
  - "com.google.cloud.bigquery.DatasetInfo.hashCode()"
  - "com.google.cloud.bigquery.DatasetInfo.newBuilder(com.google.cloud.bigquery.DatasetId)"
  - "com.google.cloud.bigquery.DatasetInfo.newBuilder(java.lang.String)"
  - "com.google.cloud.bigquery.DatasetInfo.newBuilder(java.lang.String,java.lang.String)"
  - "com.google.cloud.bigquery.DatasetInfo.of(com.google.cloud.bigquery.DatasetId)"
  - "com.google.cloud.bigquery.DatasetInfo.of(java.lang.String)"
  - "com.google.cloud.bigquery.DatasetInfo.toBuilder()"
  - "com.google.cloud.bigquery.DatasetInfo.toString()"
  - "java.lang.Object.clone()"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.Dataset.Dataset(com.google.cloud.bigquery.BigQuery,com.google.cloud.bigquery.DatasetInfo.BuilderImpl)"
  id: "Dataset(com.google.cloud.bigquery.BigQuery,com.google.cloud.bigquery.DatasetInfo.BuilderImpl)"
  parent: "com.google.cloud.bigquery.Dataset"
  langs:
  - "java"
  name: "Dataset(BigQuery bigquery, DatasetInfo.BuilderImpl infoBuilder)"
  nameWithType: "Dataset.Dataset(BigQuery bigquery, DatasetInfo.BuilderImpl infoBuilder)"
  fullName: "com.google.cloud.bigquery.Dataset.Dataset(BigQuery bigquery, DatasetInfo.BuilderImpl infoBuilder)"
  overload: "com.google.cloud.bigquery.Dataset.Dataset*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: " Dataset(BigQuery bigquery, DatasetInfo.BuilderImpl infoBuilder)"
    parameters:
    - id: "bigquery"
      type: "com.google.cloud.bigquery.BigQuery"
    - id: "infoBuilder"
      type: "com.google.cloud.bigquery.DatasetInfo.BuilderImpl"
- uid: "com.google.cloud.bigquery.Dataset.create(java.lang.String,com.google.cloud.bigquery.TableDefinition,com.google.cloud.bigquery.BigQuery.TableOption...)"
  id: "create(java.lang.String,com.google.cloud.bigquery.TableDefinition,com.google.cloud.bigquery.BigQuery.TableOption...)"
  parent: "com.google.cloud.bigquery.Dataset"
  langs:
  - "java"
  name: "create(String tableId, TableDefinition definition, BigQuery.TableOption[] options)"
  nameWithType: "Dataset.create(String tableId, TableDefinition definition, BigQuery.TableOption[] options)"
  fullName: "com.google.cloud.bigquery.Dataset.create(String tableId, TableDefinition definition, BigQuery.TableOption[] options)"
  overload: "com.google.cloud.bigquery.Dataset.create*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Creates a new table in this dataset.\n\nExample of creating a table in the dataset with schema and time partitioning.\n\n```java\nString tableName = \\u201cmy_table\\u201d;\n String fieldName = \\u201cmy_field\\u201d;\n Schema schema = Schema.of(Field.of(fieldName, LegacySQLTypeName.STRING));\n StandardTableDefinition definition = StandardTableDefinition.newBuilder()\n     .setSchema(schema)\n     .setTimePartitioning(TimePartitioning.of(TimePartitioning.Type.DAY))\n     .build();\n Table table = dataset.create(tableName, definition);\n```"
  syntax:
    content: "public Table create(String tableId, TableDefinition definition, BigQuery.TableOption[] options)"
    parameters:
    - id: "tableId"
      type: "java.lang.String"
      description: "the table's user-defined id"
    - id: "definition"
      type: "com.google.cloud.bigquery.TableDefinition"
      description: "the table's definition"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.TableOption[]"
      description: "options for table creation"
    return:
      type: "com.google.cloud.bigquery.Table"
      description: "a <code>Table</code> object for the created table"
- uid: "com.google.cloud.bigquery.Dataset.delete(com.google.cloud.bigquery.BigQuery.DatasetDeleteOption...)"
  id: "delete(com.google.cloud.bigquery.BigQuery.DatasetDeleteOption...)"
  parent: "com.google.cloud.bigquery.Dataset"
  langs:
  - "java"
  name: "delete(BigQuery.DatasetDeleteOption[] options)"
  nameWithType: "Dataset.delete(BigQuery.DatasetDeleteOption[] options)"
  fullName: "com.google.cloud.bigquery.Dataset.delete(BigQuery.DatasetDeleteOption[] options)"
  overload: "com.google.cloud.bigquery.Dataset.delete*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Deletes this dataset.\n\nExample of deleting a dataset.\n\n```java\nboolean deleted = dataset.delete();\n if (deleted) {\n   // The dataset was deleted\n } else {\n   // The dataset was not found\n }\n```"
  syntax:
    content: "public boolean delete(BigQuery.DatasetDeleteOption[] options)"
    parameters:
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.DatasetDeleteOption[]"
    return:
      type: "boolean"
      description: "<code>true</code> if dataset was deleted, <code>false</code> if it was not found"
- uid: "com.google.cloud.bigquery.Dataset.equals(java.lang.Object)"
  id: "equals(java.lang.Object)"
  parent: "com.google.cloud.bigquery.Dataset"
  langs:
  - "java"
  name: "equals(Object obj)"
  nameWithType: "Dataset.equals(Object obj)"
  fullName: "com.google.cloud.bigquery.Dataset.equals(Object obj)"
  overload: "com.google.cloud.bigquery.Dataset.equals*"
  overridden: "com.google.cloud.bigquery.DatasetInfo.equals(java.lang.Object)"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public final boolean equals(Object obj)"
    parameters:
    - id: "obj"
      type: "java.lang.Object"
    return:
      type: "boolean"
- uid: "com.google.cloud.bigquery.Dataset.exists()"
  id: "exists()"
  parent: "com.google.cloud.bigquery.Dataset"
  langs:
  - "java"
  name: "exists()"
  nameWithType: "Dataset.exists()"
  fullName: "com.google.cloud.bigquery.Dataset.exists()"
  overload: "com.google.cloud.bigquery.Dataset.exists*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Checks if this dataset exists.\n\nExample of checking whether a dataset exists.\n\n```java\nboolean exists = dataset.exists();\n if (exists) {\n   // the dataset exists\n } else {\n   // the dataset was not found\n }\n```"
  syntax:
    content: "public boolean exists()"
    return:
      type: "boolean"
      description: "<code>true</code> if this dataset exists, <code>false</code> otherwise"
- uid: "com.google.cloud.bigquery.Dataset.get(java.lang.String,com.google.cloud.bigquery.BigQuery.TableOption...)"
  id: "get(java.lang.String,com.google.cloud.bigquery.BigQuery.TableOption...)"
  parent: "com.google.cloud.bigquery.Dataset"
  langs:
  - "java"
  name: "get(String tableId, BigQuery.TableOption[] options)"
  nameWithType: "Dataset.get(String tableId, BigQuery.TableOption[] options)"
  fullName: "com.google.cloud.bigquery.Dataset.get(String tableId, BigQuery.TableOption[] options)"
  overload: "com.google.cloud.bigquery.Dataset.get*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the requested table in this dataset or `null` if not found.\n\nExample of getting a table in the dataset.\n\n```java\nString tableName = \\u201cmy_table\\u201d;\n Table table = dataset.get(tableName);\n```"
  syntax:
    content: "public Table get(String tableId, BigQuery.TableOption[] options)"
    parameters:
    - id: "tableId"
      type: "java.lang.String"
      description: "user-defined id of the requested table"
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.TableOption[]"
      description: "table options"
    return:
      type: "com.google.cloud.bigquery.Table"
- uid: "com.google.cloud.bigquery.Dataset.getBigQuery()"
  id: "getBigQuery()"
  parent: "com.google.cloud.bigquery.Dataset"
  langs:
  - "java"
  name: "getBigQuery()"
  nameWithType: "Dataset.getBigQuery()"
  fullName: "com.google.cloud.bigquery.Dataset.getBigQuery()"
  overload: "com.google.cloud.bigquery.Dataset.getBigQuery*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the dataset's `BigQuery` object used to issue requests."
  syntax:
    content: "public BigQuery getBigQuery()"
    return:
      type: "com.google.cloud.bigquery.BigQuery"
- uid: "com.google.cloud.bigquery.Dataset.hashCode()"
  id: "hashCode()"
  parent: "com.google.cloud.bigquery.Dataset"
  langs:
  - "java"
  name: "hashCode()"
  nameWithType: "Dataset.hashCode()"
  fullName: "com.google.cloud.bigquery.Dataset.hashCode()"
  overload: "com.google.cloud.bigquery.Dataset.hashCode*"
  overridden: "com.google.cloud.bigquery.DatasetInfo.hashCode()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public final int hashCode()"
    return:
      type: "int"
- uid: "com.google.cloud.bigquery.Dataset.list(com.google.cloud.bigquery.BigQuery.TableListOption...)"
  id: "list(com.google.cloud.bigquery.BigQuery.TableListOption...)"
  parent: "com.google.cloud.bigquery.Dataset"
  langs:
  - "java"
  name: "list(BigQuery.TableListOption[] options)"
  nameWithType: "Dataset.list(BigQuery.TableListOption[] options)"
  fullName: "com.google.cloud.bigquery.Dataset.list(BigQuery.TableListOption[] options)"
  overload: "com.google.cloud.bigquery.Dataset.list*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the paginated list of tables in this dataset.\n\nExample of listing tables in the dataset.\n\n```java\nPage  tables = dataset.list();\n for (Table table : tables.iterateAll()) {\n   // do something with the table\n }\n```"
  syntax:
    content: "public Page<Table> list(BigQuery.TableListOption[] options)"
    parameters:
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.TableListOption[]"
      description: "options for listing tables"
    return:
      type: "com.google.api.gax.paging.Page<com.google.cloud.bigquery.Table>"
- uid: "com.google.cloud.bigquery.Dataset.reload(com.google.cloud.bigquery.BigQuery.DatasetOption...)"
  id: "reload(com.google.cloud.bigquery.BigQuery.DatasetOption...)"
  parent: "com.google.cloud.bigquery.Dataset"
  langs:
  - "java"
  name: "reload(BigQuery.DatasetOption[] options)"
  nameWithType: "Dataset.reload(BigQuery.DatasetOption[] options)"
  fullName: "com.google.cloud.bigquery.Dataset.reload(BigQuery.DatasetOption[] options)"
  overload: "com.google.cloud.bigquery.Dataset.reload*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Fetches current dataset's latest information. Returns `null` if the dataset does not exist.\n\nExample of reloading a dataset.\n\n```java\nDataset latestDataset = dataset.reload();\n if (latestDataset == null) {\n   // The dataset was not found\n }\n```"
  syntax:
    content: "public Dataset reload(BigQuery.DatasetOption[] options)"
    parameters:
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.DatasetOption[]"
      description: "dataset options"
    return:
      type: "com.google.cloud.bigquery.Dataset"
      description: "a <code>Dataset</code> object with latest information or <code>null</code> if not found"
- uid: "com.google.cloud.bigquery.Dataset.toBuilder()"
  id: "toBuilder()"
  parent: "com.google.cloud.bigquery.Dataset"
  langs:
  - "java"
  name: "toBuilder()"
  nameWithType: "Dataset.toBuilder()"
  fullName: "com.google.cloud.bigquery.Dataset.toBuilder()"
  overload: "com.google.cloud.bigquery.Dataset.toBuilder*"
  overridden: "com.google.cloud.bigquery.DatasetInfo.toBuilder()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a builder for the dataset object."
  syntax:
    content: "public Dataset.Builder toBuilder()"
    return:
      type: "com.google.cloud.bigquery.Dataset.Builder"
- uid: "com.google.cloud.bigquery.Dataset.update(com.google.cloud.bigquery.BigQuery.DatasetOption...)"
  id: "update(com.google.cloud.bigquery.BigQuery.DatasetOption...)"
  parent: "com.google.cloud.bigquery.Dataset"
  langs:
  - "java"
  name: "update(BigQuery.DatasetOption[] options)"
  nameWithType: "Dataset.update(BigQuery.DatasetOption[] options)"
  fullName: "com.google.cloud.bigquery.Dataset.update(BigQuery.DatasetOption[] options)"
  overload: "com.google.cloud.bigquery.Dataset.update*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Updates the dataset's information with this dataset's information. Dataset's user-defined id cannot be changed. A new `Dataset` object is returned.\n\nExample of updating a dataset.\n\n```java\nString friendlyName = \"my_friendly_name\";\n Builder builder = dataset.toBuilder();\n builder.setFriendlyName(friendlyName);\n Dataset updatedDataset = builder.build().update();\n```"
  syntax:
    content: "public Dataset update(BigQuery.DatasetOption[] options)"
    parameters:
    - id: "options"
      type: "com.google.cloud.bigquery.BigQuery.DatasetOption[]"
      description: "dataset options"
    return:
      type: "com.google.cloud.bigquery.Dataset"
      description: "a <code>Dataset</code> object with updated information"
references:
- uid: "com.google.cloud.bigquery.BigQuery"
  name: "BigQuery"
  nameWithType: "BigQuery"
  fullName: "com.google.cloud.bigquery.BigQuery"
- uid: "com.google.cloud.bigquery.DatasetInfo.BuilderImpl"
  spec.java:
  - uid: "com.google.cloud.bigquery.DatasetInfo.BuilderImpl"
    name: "BuilderImpl"
    fullName: "com.google.cloud.bigquery.DatasetInfo.BuilderImpl"
- uid: "com.google.cloud.bigquery.Dataset.Dataset*"
  name: "Dataset"
  nameWithType: "Dataset.Dataset"
  fullName: "com.google.cloud.bigquery.Dataset.Dataset"
  package: "com.google.cloud.bigquery"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.google.cloud.bigquery.Dataset.exists*"
  name: "exists"
  nameWithType: "Dataset.exists"
  fullName: "com.google.cloud.bigquery.Dataset.exists"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.BigQuery.DatasetOption[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.BigQuery.DatasetOption"
    name: "DatasetOption"
    fullName: "com.google.cloud.bigquery.BigQuery.DatasetOption"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.cloud.bigquery.Dataset.reload*"
  name: "reload"
  nameWithType: "Dataset.reload"
  fullName: "com.google.cloud.bigquery.Dataset.reload"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Dataset.update*"
  name: "update"
  nameWithType: "Dataset.update"
  fullName: "com.google.cloud.bigquery.Dataset.update"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.BigQuery.DatasetDeleteOption[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.BigQuery.DatasetDeleteOption"
    name: "DatasetDeleteOption"
    fullName: "com.google.cloud.bigquery.BigQuery.DatasetDeleteOption"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.cloud.bigquery.Dataset.delete*"
  name: "delete"
  nameWithType: "Dataset.delete"
  fullName: "com.google.cloud.bigquery.Dataset.delete"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.BigQuery.TableListOption[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.BigQuery.TableListOption"
    name: "TableListOption"
    fullName: "com.google.cloud.bigquery.BigQuery.TableListOption"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.api.gax.paging.Page<com.google.cloud.bigquery.Table>"
  spec.java:
  - uid: "com.google.api.gax.paging.Page"
    name: "Page"
    fullName: "com.google.api.gax.paging.Page"
  - name: "<"
    fullName: "<"
  - uid: "com.google.cloud.bigquery.Table"
    name: "Table"
    fullName: "com.google.cloud.bigquery.Table"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.Dataset.list*"
  name: "list"
  nameWithType: "Dataset.list"
  fullName: "com.google.cloud.bigquery.Dataset.list"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.BigQuery.TableOption[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.BigQuery.TableOption"
    name: "TableOption"
    fullName: "com.google.cloud.bigquery.BigQuery.TableOption"
  - name: "[]"
    fullName: "[]"
- uid: "com.google.cloud.bigquery.Table"
  name: "Table"
  nameWithType: "Table"
  fullName: "com.google.cloud.bigquery.Table"
- uid: "com.google.cloud.bigquery.Dataset.get*"
  name: "get"
  nameWithType: "Dataset.get"
  fullName: "com.google.cloud.bigquery.Dataset.get"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.TableDefinition"
  name: "TableDefinition"
  nameWithType: "TableDefinition"
  fullName: "com.google.cloud.bigquery.TableDefinition"
- uid: "com.google.cloud.bigquery.Dataset.create*"
  name: "create"
  nameWithType: "Dataset.create"
  fullName: "com.google.cloud.bigquery.Dataset.create"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Dataset.getBigQuery*"
  name: "getBigQuery"
  nameWithType: "Dataset.getBigQuery"
  fullName: "com.google.cloud.bigquery.Dataset.getBigQuery"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Dataset.Builder"
  name: "Dataset.Builder"
  nameWithType: "Dataset.Builder"
  fullName: "com.google.cloud.bigquery.Dataset.Builder"
- uid: "com.google.cloud.bigquery.Dataset.toBuilder*"
  name: "toBuilder"
  nameWithType: "Dataset.toBuilder"
  fullName: "com.google.cloud.bigquery.Dataset.toBuilder"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "com.google.cloud.bigquery.Dataset.equals*"
  name: "equals"
  nameWithType: "Dataset.equals"
  fullName: "com.google.cloud.bigquery.Dataset.equals"
  package: "com.google.cloud.bigquery"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.google.cloud.bigquery.Dataset.hashCode*"
  name: "hashCode"
  nameWithType: "Dataset.hashCode"
  fullName: "com.google.cloud.bigquery.Dataset.hashCode"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.DatasetInfo"
  name: "DatasetInfo"
  nameWithType: "DatasetInfo"
  fullName: "com.google.cloud.bigquery.DatasetInfo"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "com.google.cloud.bigquery.DatasetInfo.getDatasetId()"
  name: "DatasetInfo.getDatasetId()"
  nameWithType: "DatasetInfo.getDatasetId()"
  fullName: "com.google.cloud.bigquery.DatasetInfo.getDatasetId()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "com.google.cloud.bigquery.DatasetInfo.newBuilder(com.google.cloud.bigquery.DatasetId)"
  name: "DatasetInfo.newBuilder(DatasetId)"
  nameWithType: "DatasetInfo.newBuilder(DatasetId)"
  fullName: "com.google.cloud.bigquery.DatasetInfo.newBuilder(com.google.cloud.bigquery.DatasetId)"
- uid: "com.google.cloud.bigquery.DatasetInfo.getDefaultPartitionExpirationMs()"
  name: "DatasetInfo.getDefaultPartitionExpirationMs()"
  nameWithType: "DatasetInfo.getDefaultPartitionExpirationMs()"
  fullName: "com.google.cloud.bigquery.DatasetInfo.getDefaultPartitionExpirationMs()"
- uid: "com.google.cloud.bigquery.DatasetInfo.getDescription()"
  name: "DatasetInfo.getDescription()"
  nameWithType: "DatasetInfo.getDescription()"
  fullName: "com.google.cloud.bigquery.DatasetInfo.getDescription()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "com.google.cloud.bigquery.DatasetInfo.hashCode()"
  name: "DatasetInfo.hashCode()"
  nameWithType: "DatasetInfo.hashCode()"
  fullName: "com.google.cloud.bigquery.DatasetInfo.hashCode()"
- uid: "com.google.cloud.bigquery.DatasetInfo.of(com.google.cloud.bigquery.DatasetId)"
  name: "DatasetInfo.of(DatasetId)"
  nameWithType: "DatasetInfo.of(DatasetId)"
  fullName: "com.google.cloud.bigquery.DatasetInfo.of(com.google.cloud.bigquery.DatasetId)"
- uid: "com.google.cloud.bigquery.DatasetInfo.getSelfLink()"
  name: "DatasetInfo.getSelfLink()"
  nameWithType: "DatasetInfo.getSelfLink()"
  fullName: "com.google.cloud.bigquery.DatasetInfo.getSelfLink()"
- uid: "com.google.cloud.bigquery.DatasetInfo.newBuilder(java.lang.String)"
  name: "DatasetInfo.newBuilder(String)"
  nameWithType: "DatasetInfo.newBuilder(String)"
  fullName: "com.google.cloud.bigquery.DatasetInfo.newBuilder(java.lang.String)"
- uid: "com.google.cloud.bigquery.DatasetInfo.getLastModified()"
  name: "DatasetInfo.getLastModified()"
  nameWithType: "DatasetInfo.getLastModified()"
  fullName: "com.google.cloud.bigquery.DatasetInfo.getLastModified()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.DatasetInfo.getEtag()"
  name: "DatasetInfo.getEtag()"
  nameWithType: "DatasetInfo.getEtag()"
  fullName: "com.google.cloud.bigquery.DatasetInfo.getEtag()"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "com.google.cloud.bigquery.DatasetInfo.toString()"
  name: "DatasetInfo.toString()"
  nameWithType: "DatasetInfo.toString()"
  fullName: "com.google.cloud.bigquery.DatasetInfo.toString()"
- uid: "com.google.cloud.bigquery.DatasetInfo.getDefaultEncryptionConfiguration()"
  name: "DatasetInfo.getDefaultEncryptionConfiguration()"
  nameWithType: "DatasetInfo.getDefaultEncryptionConfiguration()"
  fullName: "com.google.cloud.bigquery.DatasetInfo.getDefaultEncryptionConfiguration()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "com.google.cloud.bigquery.DatasetInfo.equals(java.lang.Object)"
  name: "DatasetInfo.equals(Object)"
  nameWithType: "DatasetInfo.equals(Object)"
  fullName: "com.google.cloud.bigquery.DatasetInfo.equals(java.lang.Object)"
- uid: "com.google.cloud.bigquery.DatasetInfo.toBuilder()"
  name: "DatasetInfo.toBuilder()"
  nameWithType: "DatasetInfo.toBuilder()"
  fullName: "com.google.cloud.bigquery.DatasetInfo.toBuilder()"
- uid: "com.google.cloud.bigquery.DatasetInfo.getDefaultTableLifetime()"
  name: "DatasetInfo.getDefaultTableLifetime()"
  nameWithType: "DatasetInfo.getDefaultTableLifetime()"
  fullName: "com.google.cloud.bigquery.DatasetInfo.getDefaultTableLifetime()"
- uid: "com.google.cloud.bigquery.DatasetInfo.newBuilder(java.lang.String,java.lang.String)"
  name: "DatasetInfo.newBuilder(String,String)"
  nameWithType: "DatasetInfo.newBuilder(String,String)"
  fullName: "com.google.cloud.bigquery.DatasetInfo.newBuilder(java.lang.String,java.lang.String)"
- uid: "com.google.cloud.bigquery.DatasetInfo.getLabels()"
  name: "DatasetInfo.getLabels()"
  nameWithType: "DatasetInfo.getLabels()"
  fullName: "com.google.cloud.bigquery.DatasetInfo.getLabels()"
- uid: "com.google.cloud.bigquery.DatasetInfo.getGeneratedId()"
  name: "DatasetInfo.getGeneratedId()"
  nameWithType: "DatasetInfo.getGeneratedId()"
  fullName: "com.google.cloud.bigquery.DatasetInfo.getGeneratedId()"
- uid: "com.google.cloud.bigquery.DatasetInfo.getCreationTime()"
  name: "DatasetInfo.getCreationTime()"
  nameWithType: "DatasetInfo.getCreationTime()"
  fullName: "com.google.cloud.bigquery.DatasetInfo.getCreationTime()"
- uid: "com.google.cloud.bigquery.DatasetInfo.getFriendlyName()"
  name: "DatasetInfo.getFriendlyName()"
  nameWithType: "DatasetInfo.getFriendlyName()"
  fullName: "com.google.cloud.bigquery.DatasetInfo.getFriendlyName()"
- uid: "com.google.cloud.bigquery.DatasetInfo.of(java.lang.String)"
  name: "DatasetInfo.of(String)"
  nameWithType: "DatasetInfo.of(String)"
  fullName: "com.google.cloud.bigquery.DatasetInfo.of(java.lang.String)"
- uid: "com.google.cloud.bigquery.DatasetInfo.getAcl()"
  name: "DatasetInfo.getAcl()"
  nameWithType: "DatasetInfo.getAcl()"
  fullName: "com.google.cloud.bigquery.DatasetInfo.getAcl()"
- uid: "com.google.cloud.bigquery.DatasetInfo.getLocation()"
  name: "DatasetInfo.getLocation()"
  nameWithType: "DatasetInfo.getLocation()"
  fullName: "com.google.cloud.bigquery.DatasetInfo.getLocation()"
- uid: "com.google.api.gax.paging.Page"
  name: "Page"
  nameWithType: "Page"
  fullName: "com.google.api.gax.paging.Page"
