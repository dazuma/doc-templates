### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper"
  id: "RemoteBigQueryHelper"
  parent: "com.google.cloud.bigquery.testing"
  children:
  - "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.BigQueryHelperException"
  - "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.create()"
  - "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.create(java.lang.String,java.io.InputStream)"
  - "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.forceDelete(com.google.cloud.bigquery.BigQuery,java.lang.String)"
  - "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.generateDatasetName()"
  - "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.generateModelName()"
  - "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.generateRoutineName()"
  - "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.getOptions()"
  langs:
  - "java"
  name: "RemoteBigQueryHelper"
  nameWithType: "RemoteBigQueryHelper"
  fullName: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper"
  type: "Class"
  package: "com.google.cloud.bigquery.testing"
  summary: "Utility to create a remote BigQuery configuration for testing. BigQuery options can be obtained via the <xref uid=\"com.google.cloud.bigquery.testing.RemoteBigQueryHelper.getOptions()\" data-throw-if-not-resolved=\"false\">#getOptions()</xref> method. Returned options have custom <xref uid=\"com.google.cloud.bigquery.BigQueryOptions.getRetrySettings*\" data-throw-if-not-resolved=\"false\">BigQueryOptions#getRetrySettings()</xref>: <xref uid=\"\" data-throw-if-not-resolved=\"false\">RetrySettings#getMaxAttempts()</xref> is `10`, <xref uid=\"\" data-throw-if-not-resolved=\"false\">RetrySettings#getMaxRetryDelay()</xref> is `30000`, <xref uid=\"\" data-throw-if-not-resolved=\"false\">RetrySettings#getTotalTimeout()</xref> is `120000` and <xref uid=\"\" data-throw-if-not-resolved=\"false\">RetrySettings#getInitialRetryDelay()</xref> is `250`. <xref uid=\"\" data-throw-if-not-resolved=\"false\">HttpTransportOptions#getConnectTimeout()</xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\">HttpTransportOptions#getReadTimeout()</xref> are both set to `60000`."
  syntax:
    content: "public class RemoteBigQueryHelper"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.RemoteBigQueryHelper(com.google.cloud.bigquery.BigQueryOptions)"
  id: "RemoteBigQueryHelper(com.google.cloud.bigquery.BigQueryOptions)"
  parent: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper"
  langs:
  - "java"
  name: "RemoteBigQueryHelper(BigQueryOptions options)"
  nameWithType: "RemoteBigQueryHelper.RemoteBigQueryHelper(BigQueryOptions options)"
  fullName: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.RemoteBigQueryHelper(BigQueryOptions options)"
  overload: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.RemoteBigQueryHelper*"
  type: "Constructor"
  package: "com.google.cloud.bigquery.testing"
  syntax:
    content: "private RemoteBigQueryHelper(BigQueryOptions options)"
    parameters:
    - id: "options"
      type: "com.google.cloud.bigquery.BigQueryOptions"
- uid: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.create()"
  id: "create()"
  parent: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper"
  langs:
  - "java"
  name: "create()"
  nameWithType: "RemoteBigQueryHelper.create()"
  fullName: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.create()"
  overload: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.create*"
  type: "Method"
  package: "com.google.cloud.bigquery.testing"
  summary: "Creates a `RemoteBigQueryHelper` object using default project id and authentication credentials."
  syntax:
    content: "public static RemoteBigQueryHelper create()"
    return:
      type: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper"
- uid: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.create(java.lang.String,java.io.InputStream)"
  id: "create(java.lang.String,java.io.InputStream)"
  parent: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper"
  langs:
  - "java"
  name: "create(String projectId, InputStream keyStream)"
  nameWithType: "RemoteBigQueryHelper.create(String projectId, InputStream keyStream)"
  fullName: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.create(String projectId, InputStream keyStream)"
  overload: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.create*"
  type: "Method"
  package: "com.google.cloud.bigquery.testing"
  summary: "Creates a `RemoteBigQueryHelper` object for the given project id and JSON key input stream."
  syntax:
    content: "public static RemoteBigQueryHelper create(String projectId, InputStream keyStream)"
    parameters:
    - id: "projectId"
      type: "java.lang.String"
      description: "id of the project to be used for running the tests"
    - id: "keyStream"
      type: "java.io.InputStream"
      description: "input stream for a JSON key"
    return:
      type: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper"
      description: "A <code>RemoteBigQueryHelper</code> object for the provided options"
  exceptions:
  - type: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.BigQueryHelperException"
    description: "if <code>keyStream</code> is not a valid JSON key stream"
- uid: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.forceDelete(com.google.cloud.bigquery.BigQuery,java.lang.String)"
  id: "forceDelete(com.google.cloud.bigquery.BigQuery,java.lang.String)"
  parent: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper"
  langs:
  - "java"
  name: "forceDelete(BigQuery bigquery, String dataset)"
  nameWithType: "RemoteBigQueryHelper.forceDelete(BigQuery bigquery, String dataset)"
  fullName: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.forceDelete(BigQuery bigquery, String dataset)"
  overload: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.forceDelete*"
  type: "Method"
  package: "com.google.cloud.bigquery.testing"
  summary: "Deletes a dataset, even if non-empty."
  syntax:
    content: "public static boolean forceDelete(BigQuery bigquery, String dataset)"
    parameters:
    - id: "bigquery"
      type: "com.google.cloud.bigquery.BigQuery"
      description: "the BigQuery service to be used to issue the delete request"
    - id: "dataset"
      type: "java.lang.String"
      description: "the dataset to be deleted"
    return:
      type: "boolean"
      description: "<code>true</code> if deletion succeeded, <code>false</code> if the dataset was not found"
- uid: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.generateDatasetName()"
  id: "generateDatasetName()"
  parent: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper"
  langs:
  - "java"
  name: "generateDatasetName()"
  nameWithType: "RemoteBigQueryHelper.generateDatasetName()"
  fullName: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.generateDatasetName()"
  overload: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.generateDatasetName*"
  type: "Method"
  package: "com.google.cloud.bigquery.testing"
  summary: "Returns a dataset name generated using a random UUID."
  syntax:
    content: "public static String generateDatasetName()"
    return:
      type: "java.lang.String"
- uid: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.generateModelName()"
  id: "generateModelName()"
  parent: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper"
  langs:
  - "java"
  name: "generateModelName()"
  nameWithType: "RemoteBigQueryHelper.generateModelName()"
  fullName: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.generateModelName()"
  overload: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.generateModelName*"
  type: "Method"
  package: "com.google.cloud.bigquery.testing"
  syntax:
    content: "public static String generateModelName()"
    return:
      type: "java.lang.String"
- uid: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.generateRoutineName()"
  id: "generateRoutineName()"
  parent: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper"
  langs:
  - "java"
  name: "generateRoutineName()"
  nameWithType: "RemoteBigQueryHelper.generateRoutineName()"
  fullName: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.generateRoutineName()"
  overload: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.generateRoutineName*"
  type: "Method"
  package: "com.google.cloud.bigquery.testing"
  syntax:
    content: "public static String generateRoutineName()"
    return:
      type: "java.lang.String"
- uid: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.getOptions()"
  id: "getOptions()"
  parent: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper"
  langs:
  - "java"
  name: "getOptions()"
  nameWithType: "RemoteBigQueryHelper.getOptions()"
  fullName: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.getOptions()"
  overload: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.getOptions*"
  type: "Method"
  package: "com.google.cloud.bigquery.testing"
  summary: "Returns a <xref uid=\"com.google.cloud.bigquery.BigQueryOptions\" data-throw-if-not-resolved=\"false\">BigQueryOptions</xref> object to be used for testing."
  syntax:
    content: "public BigQueryOptions getOptions()"
    return:
      type: "com.google.cloud.bigquery.BigQueryOptions"
references:
- uid: "com.google.cloud.bigquery.BigQueryOptions"
  name: "BigQueryOptions"
  nameWithType: "BigQueryOptions"
  fullName: "com.google.cloud.bigquery.BigQueryOptions"
- uid: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.RemoteBigQueryHelper*"
  name: "RemoteBigQueryHelper"
  nameWithType: "RemoteBigQueryHelper.RemoteBigQueryHelper"
  fullName: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.RemoteBigQueryHelper"
  package: "com.google.cloud.bigquery.testing"
- uid: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.getOptions*"
  name: "getOptions"
  nameWithType: "RemoteBigQueryHelper.getOptions"
  fullName: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.getOptions"
  package: "com.google.cloud.bigquery.testing"
- uid: "com.google.cloud.bigquery.BigQuery"
  name: "BigQuery"
  nameWithType: "BigQuery"
  fullName: "com.google.cloud.bigquery.BigQuery"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.forceDelete*"
  name: "forceDelete"
  nameWithType: "RemoteBigQueryHelper.forceDelete"
  fullName: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.forceDelete"
  package: "com.google.cloud.bigquery.testing"
- uid: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.generateDatasetName*"
  name: "generateDatasetName"
  nameWithType: "RemoteBigQueryHelper.generateDatasetName"
  fullName: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.generateDatasetName"
  package: "com.google.cloud.bigquery.testing"
- uid: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.generateModelName*"
  name: "generateModelName"
  nameWithType: "RemoteBigQueryHelper.generateModelName"
  fullName: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.generateModelName"
  package: "com.google.cloud.bigquery.testing"
- uid: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.generateRoutineName*"
  name: "generateRoutineName"
  nameWithType: "RemoteBigQueryHelper.generateRoutineName"
  fullName: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.generateRoutineName"
  package: "com.google.cloud.bigquery.testing"
- uid: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.BigQueryHelperException"
  name: "RemoteBigQueryHelper.BigQueryHelperException"
  nameWithType: "RemoteBigQueryHelper.BigQueryHelperException"
  fullName: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.BigQueryHelperException"
- uid: "java.io.InputStream"
  spec.java:
  - uid: "java.io.InputStream"
    name: "InputStream"
    fullName: "java.io.InputStream"
- uid: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.create*"
  name: "create"
  nameWithType: "RemoteBigQueryHelper.create"
  fullName: "com.google.cloud.bigquery.testing.RemoteBigQueryHelper.create"
  package: "com.google.cloud.bigquery.testing"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
