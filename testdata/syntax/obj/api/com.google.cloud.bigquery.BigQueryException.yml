### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.BigQueryException"
  id: "BigQueryException"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.BigQueryException.BigQueryException(int,java.lang.String)"
  - "com.google.cloud.bigquery.BigQueryException.BigQueryException(int,java.lang.String,com.google.cloud.bigquery.BigQueryError)"
  - "com.google.cloud.bigquery.BigQueryException.BigQueryException(int,java.lang.String,java.lang.Throwable)"
  - "com.google.cloud.bigquery.BigQueryException.BigQueryException(java.io.IOException)"
  - "com.google.cloud.bigquery.BigQueryException.BigQueryException(java.util.List<com.google.cloud.bigquery.BigQueryError>)"
  - "com.google.cloud.bigquery.BigQueryException.equals(java.lang.Object)"
  - "com.google.cloud.bigquery.BigQueryException.getError()"
  - "com.google.cloud.bigquery.BigQueryException.getErrors()"
  - "com.google.cloud.bigquery.BigQueryException.hashCode()"
  langs:
  - "java"
  name: "BigQueryException"
  nameWithType: "BigQueryException"
  fullName: "com.google.cloud.bigquery.BigQueryException"
  type: "Class"
  package: "com.google.cloud.bigquery"
  summary: "BigQuery service exception."
  syntax:
    content: "public final class BigQueryException extends BaseHttpServiceException"
  inheritance:
  - "java.lang.Object"
  - "java.lang.Throwable"
  - "java.lang.Exception"
  - "java.lang.RuntimeException"
  - "com.google.cloud.BaseServiceException"
  - "com.google.cloud.http.BaseHttpServiceException"
  inheritedMembers:
  - "com.google.cloud.BaseServiceException.equals(java.lang.Object)"
  - "com.google.cloud.BaseServiceException.getCode()"
  - "com.google.cloud.BaseServiceException.getDebugInfo()"
  - "com.google.cloud.BaseServiceException.getLocation()"
  - "com.google.cloud.BaseServiceException.getReason()"
  - "com.google.cloud.BaseServiceException.hashCode()"
  - "com.google.cloud.BaseServiceException.isRetryable()"
  - "com.google.cloud.BaseServiceException.isRetryable(boolean,java.io.IOException)"
  - "com.google.cloud.BaseServiceException.isRetryable(java.lang.Integer,java.lang.String,boolean,java.util.Set<com.google.cloud.BaseServiceException.Error>)"
  - "com.google.cloud.BaseServiceException.translate(com.google.cloud.RetryHelper.RetryHelperException)"
  - "com.google.cloud.BaseServiceException.translate(java.util.concurrent.ExecutionException)"
  - "java.lang.Object.clone()"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
  - "java.lang.Throwable.addSuppressed(java.lang.Throwable)"
  - "java.lang.Throwable.fillInStackTrace()"
  - "java.lang.Throwable.getCause()"
  - "java.lang.Throwable.getLocalizedMessage()"
  - "java.lang.Throwable.getMessage()"
  - "java.lang.Throwable.getStackTrace()"
  - "java.lang.Throwable.getSuppressed()"
  - "java.lang.Throwable.initCause(java.lang.Throwable)"
  - "java.lang.Throwable.printStackTrace()"
  - "java.lang.Throwable.printStackTrace(java.io.PrintStream)"
  - "java.lang.Throwable.printStackTrace(java.io.PrintWriter)"
  - "java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])"
  - "java.lang.Throwable.toString()"
- uid: "com.google.cloud.bigquery.BigQueryException.BigQueryException(int,java.lang.String)"
  id: "BigQueryException(int,java.lang.String)"
  parent: "com.google.cloud.bigquery.BigQueryException"
  langs:
  - "java"
  name: "BigQueryException(int code, String message)"
  nameWithType: "BigQueryException.BigQueryException(int code, String message)"
  fullName: "com.google.cloud.bigquery.BigQueryException.BigQueryException(int code, String message)"
  overload: "com.google.cloud.bigquery.BigQueryException.BigQueryException*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public BigQueryException(int code, String message)"
    parameters:
    - id: "code"
      type: "int"
    - id: "message"
      type: "java.lang.String"
- uid: "com.google.cloud.bigquery.BigQueryException.BigQueryException(int,java.lang.String,com.google.cloud.bigquery.BigQueryError)"
  id: "BigQueryException(int,java.lang.String,com.google.cloud.bigquery.BigQueryError)"
  parent: "com.google.cloud.bigquery.BigQueryException"
  langs:
  - "java"
  name: "BigQueryException(int code, String message, BigQueryError error)"
  nameWithType: "BigQueryException.BigQueryException(int code, String message, BigQueryError error)"
  fullName: "com.google.cloud.bigquery.BigQueryException.BigQueryException(int code, String message, BigQueryError error)"
  overload: "com.google.cloud.bigquery.BigQueryException.BigQueryException*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public BigQueryException(int code, String message, BigQueryError error)"
    parameters:
    - id: "code"
      type: "int"
    - id: "message"
      type: "java.lang.String"
    - id: "error"
      type: "com.google.cloud.bigquery.BigQueryError"
- uid: "com.google.cloud.bigquery.BigQueryException.BigQueryException(int,java.lang.String,java.lang.Throwable)"
  id: "BigQueryException(int,java.lang.String,java.lang.Throwable)"
  parent: "com.google.cloud.bigquery.BigQueryException"
  langs:
  - "java"
  name: "BigQueryException(int code, String message, Throwable cause)"
  nameWithType: "BigQueryException.BigQueryException(int code, String message, Throwable cause)"
  fullName: "com.google.cloud.bigquery.BigQueryException.BigQueryException(int code, String message, Throwable cause)"
  overload: "com.google.cloud.bigquery.BigQueryException.BigQueryException*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public BigQueryException(int code, String message, Throwable cause)"
    parameters:
    - id: "code"
      type: "int"
    - id: "message"
      type: "java.lang.String"
    - id: "cause"
      type: "java.lang.Throwable"
- uid: "com.google.cloud.bigquery.BigQueryException.BigQueryException(java.io.IOException)"
  id: "BigQueryException(java.io.IOException)"
  parent: "com.google.cloud.bigquery.BigQueryException"
  langs:
  - "java"
  name: "BigQueryException(IOException exception)"
  nameWithType: "BigQueryException.BigQueryException(IOException exception)"
  fullName: "com.google.cloud.bigquery.BigQueryException.BigQueryException(IOException exception)"
  overload: "com.google.cloud.bigquery.BigQueryException.BigQueryException*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public BigQueryException(IOException exception)"
    parameters:
    - id: "exception"
      type: "java.io.IOException"
- uid: "com.google.cloud.bigquery.BigQueryException.BigQueryException(java.util.List<com.google.cloud.bigquery.BigQueryError>)"
  id: "BigQueryException(java.util.List<com.google.cloud.bigquery.BigQueryError>)"
  parent: "com.google.cloud.bigquery.BigQueryException"
  langs:
  - "java"
  name: "BigQueryException(List<BigQueryError> errors)"
  nameWithType: "BigQueryException.BigQueryException(List<BigQueryError> errors)"
  fullName: "com.google.cloud.bigquery.BigQueryException.BigQueryException(List<BigQueryError> errors)"
  overload: "com.google.cloud.bigquery.BigQueryException.BigQueryException*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public BigQueryException(List<BigQueryError> errors)"
    parameters:
    - id: "errors"
      type: "java.util.List<com.google.cloud.bigquery.BigQueryError>"
- uid: "com.google.cloud.bigquery.BigQueryException.equals(java.lang.Object)"
  id: "equals(java.lang.Object)"
  parent: "com.google.cloud.bigquery.BigQueryException"
  langs:
  - "java"
  name: "equals(Object obj)"
  nameWithType: "BigQueryException.equals(Object obj)"
  fullName: "com.google.cloud.bigquery.BigQueryException.equals(Object obj)"
  overload: "com.google.cloud.bigquery.BigQueryException.equals*"
  overridden: "com.google.cloud.BaseServiceException.equals(java.lang.Object)"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public boolean equals(Object obj)"
    parameters:
    - id: "obj"
      type: "java.lang.Object"
    return:
      type: "boolean"
- uid: "com.google.cloud.bigquery.BigQueryException.getError()"
  id: "getError()"
  parent: "com.google.cloud.bigquery.BigQueryException"
  langs:
  - "java"
  name: "getError()"
  nameWithType: "BigQueryException.getError()"
  fullName: "com.google.cloud.bigquery.BigQueryException.getError()"
  overload: "com.google.cloud.bigquery.BigQueryException.getError*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the <xref uid=\"com.google.cloud.bigquery.BigQueryError\" data-throw-if-not-resolved=\"false\">BigQueryError</xref> that caused this exception. Returns `null` if none exists."
  syntax:
    content: "public BigQueryError getError()"
    return:
      type: "com.google.cloud.bigquery.BigQueryError"
- uid: "com.google.cloud.bigquery.BigQueryException.getErrors()"
  id: "getErrors()"
  parent: "com.google.cloud.bigquery.BigQueryException"
  langs:
  - "java"
  name: "getErrors()"
  nameWithType: "BigQueryException.getErrors()"
  fullName: "com.google.cloud.bigquery.BigQueryException.getErrors()"
  overload: "com.google.cloud.bigquery.BigQueryException.getErrors*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns a list of <xref uid=\"com.google.cloud.bigquery.BigQueryError\" data-throw-if-not-resolved=\"false\">BigQueryError</xref>s that caused this exception. Returns `null` if none exists."
  syntax:
    content: "public List<BigQueryError> getErrors()"
    return:
      type: "java.util.List<com.google.cloud.bigquery.BigQueryError>"
- uid: "com.google.cloud.bigquery.BigQueryException.hashCode()"
  id: "hashCode()"
  parent: "com.google.cloud.bigquery.BigQueryException"
  langs:
  - "java"
  name: "hashCode()"
  nameWithType: "BigQueryException.hashCode()"
  fullName: "com.google.cloud.bigquery.BigQueryException.hashCode()"
  overload: "com.google.cloud.bigquery.BigQueryException.hashCode*"
  overridden: "com.google.cloud.BaseServiceException.hashCode()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public int hashCode()"
    return:
      type: "int"
references:
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.BigQueryException.BigQueryException*"
  name: "BigQueryException"
  nameWithType: "BigQueryException.BigQueryException"
  fullName: "com.google.cloud.bigquery.BigQueryException.BigQueryException"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Throwable"
  spec.java:
  - uid: "java.lang.Throwable"
    name: "Throwable"
    fullName: "java.lang.Throwable"
- uid: "com.google.cloud.bigquery.BigQueryError"
  name: "BigQueryError"
  nameWithType: "BigQueryError"
  fullName: "com.google.cloud.bigquery.BigQueryError"
- uid: "java.util.List<com.google.cloud.bigquery.BigQueryError>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "com.google.cloud.bigquery.BigQueryError"
    name: "BigQueryError"
    fullName: "com.google.cloud.bigquery.BigQueryError"
  - name: ">"
    fullName: ">"
- uid: "java.io.IOException"
  spec.java:
  - uid: "java.io.IOException"
    name: "IOException"
    fullName: "java.io.IOException"
- uid: "com.google.cloud.bigquery.BigQueryException.getError*"
  name: "getError"
  nameWithType: "BigQueryException.getError"
  fullName: "com.google.cloud.bigquery.BigQueryException.getError"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.BigQueryException.getErrors*"
  name: "getErrors"
  nameWithType: "BigQueryException.getErrors"
  fullName: "com.google.cloud.bigquery.BigQueryException.getErrors"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.google.cloud.bigquery.BigQueryException.equals*"
  name: "equals"
  nameWithType: "BigQueryException.equals"
  fullName: "com.google.cloud.bigquery.BigQueryException.equals"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.BigQueryException.hashCode*"
  name: "hashCode"
  nameWithType: "BigQueryException.hashCode"
  fullName: "com.google.cloud.bigquery.BigQueryException.hashCode"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.http.BaseHttpServiceException"
  name: "BaseHttpServiceException"
  nameWithType: "BaseHttpServiceException"
  fullName: "com.google.cloud.http.BaseHttpServiceException"
- uid: "com.google.cloud.BaseServiceException.isRetryable(java.lang.Integer,java.lang.String,boolean,java.util.Set<com.google.cloud.BaseServiceException.Error>)"
  name: "BaseServiceException.isRetryable(Integer,String,boolean,Set<BaseServiceException.Error>)"
  nameWithType: "BaseServiceException.isRetryable(Integer,String,boolean,Set<BaseServiceException.Error>)"
  fullName: "com.google.cloud.BaseServiceException.isRetryable(java.lang.Integer,java.lang.String,boolean,java.util.Set<com.google.cloud.BaseServiceException.Error>)"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Throwable.getCause()"
  name: "Throwable.getCause()"
  nameWithType: "Throwable.getCause()"
  fullName: "java.lang.Throwable.getCause()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Throwable.fillInStackTrace()"
  name: "Throwable.fillInStackTrace()"
  nameWithType: "Throwable.fillInStackTrace()"
  fullName: "java.lang.Throwable.fillInStackTrace()"
- uid: "com.google.cloud.BaseServiceException.isRetryable()"
  name: "BaseServiceException.isRetryable()"
  nameWithType: "BaseServiceException.isRetryable()"
  fullName: "com.google.cloud.BaseServiceException.isRetryable()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Throwable.initCause(java.lang.Throwable)"
  name: "Throwable.initCause(Throwable)"
  nameWithType: "Throwable.initCause(Throwable)"
  fullName: "java.lang.Throwable.initCause(java.lang.Throwable)"
- uid: "com.google.cloud.BaseServiceException.getReason()"
  name: "BaseServiceException.getReason()"
  nameWithType: "BaseServiceException.getReason()"
  fullName: "com.google.cloud.BaseServiceException.getReason()"
- uid: "com.google.cloud.BaseServiceException.translate(com.google.cloud.RetryHelper.RetryHelperException)"
  name: "BaseServiceException.translate(RetryHelper.RetryHelperException)"
  nameWithType: "BaseServiceException.translate(RetryHelper.RetryHelperException)"
  fullName: "com.google.cloud.BaseServiceException.translate(com.google.cloud.RetryHelper.RetryHelperException)"
- uid: "java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])"
  name: "Throwable.setStackTrace(StackTraceElement[])"
  nameWithType: "Throwable.setStackTrace(StackTraceElement[])"
  fullName: "java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])"
- uid: "com.google.cloud.BaseServiceException.isRetryable(boolean,java.io.IOException)"
  name: "BaseServiceException.isRetryable(boolean,IOException)"
  nameWithType: "BaseServiceException.isRetryable(boolean,IOException)"
  fullName: "com.google.cloud.BaseServiceException.isRetryable(boolean,java.io.IOException)"
- uid: "java.lang.Throwable.toString()"
  name: "Throwable.toString()"
  nameWithType: "Throwable.toString()"
  fullName: "java.lang.Throwable.toString()"
- uid: "java.lang.Throwable.getSuppressed()"
  name: "Throwable.getSuppressed()"
  nameWithType: "Throwable.getSuppressed()"
  fullName: "java.lang.Throwable.getSuppressed()"
- uid: "com.google.cloud.BaseServiceException.getDebugInfo()"
  name: "BaseServiceException.getDebugInfo()"
  nameWithType: "BaseServiceException.getDebugInfo()"
  fullName: "com.google.cloud.BaseServiceException.getDebugInfo()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Throwable.getStackTrace()"
  name: "Throwable.getStackTrace()"
  nameWithType: "Throwable.getStackTrace()"
  fullName: "java.lang.Throwable.getStackTrace()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Throwable.getLocalizedMessage()"
  name: "Throwable.getLocalizedMessage()"
  nameWithType: "Throwable.getLocalizedMessage()"
  fullName: "java.lang.Throwable.getLocalizedMessage()"
- uid: "com.google.cloud.BaseServiceException.getCode()"
  name: "BaseServiceException.getCode()"
  nameWithType: "BaseServiceException.getCode()"
  fullName: "com.google.cloud.BaseServiceException.getCode()"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Throwable.printStackTrace(java.io.PrintWriter)"
  name: "Throwable.printStackTrace(PrintWriter)"
  nameWithType: "Throwable.printStackTrace(PrintWriter)"
  fullName: "java.lang.Throwable.printStackTrace(java.io.PrintWriter)"
- uid: "java.lang.Throwable.addSuppressed(java.lang.Throwable)"
  name: "Throwable.addSuppressed(Throwable)"
  nameWithType: "Throwable.addSuppressed(Throwable)"
  fullName: "java.lang.Throwable.addSuppressed(java.lang.Throwable)"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "com.google.cloud.BaseServiceException.hashCode()"
  name: "BaseServiceException.hashCode()"
  nameWithType: "BaseServiceException.hashCode()"
  fullName: "com.google.cloud.BaseServiceException.hashCode()"
- uid: "com.google.cloud.BaseServiceException.equals(java.lang.Object)"
  name: "BaseServiceException.equals(Object)"
  nameWithType: "BaseServiceException.equals(Object)"
  fullName: "com.google.cloud.BaseServiceException.equals(java.lang.Object)"
- uid: "java.lang.Throwable.printStackTrace(java.io.PrintStream)"
  name: "Throwable.printStackTrace(PrintStream)"
  nameWithType: "Throwable.printStackTrace(PrintStream)"
  fullName: "java.lang.Throwable.printStackTrace(java.io.PrintStream)"
- uid: "java.lang.Throwable.getMessage()"
  name: "Throwable.getMessage()"
  nameWithType: "Throwable.getMessage()"
  fullName: "java.lang.Throwable.getMessage()"
- uid: "com.google.cloud.BaseServiceException.getLocation()"
  name: "BaseServiceException.getLocation()"
  nameWithType: "BaseServiceException.getLocation()"
  fullName: "com.google.cloud.BaseServiceException.getLocation()"
- uid: "com.google.cloud.BaseServiceException.translate(java.util.concurrent.ExecutionException)"
  name: "BaseServiceException.translate(ExecutionException)"
  nameWithType: "BaseServiceException.translate(ExecutionException)"
  fullName: "com.google.cloud.BaseServiceException.translate(java.util.concurrent.ExecutionException)"
- uid: "java.lang.Throwable.printStackTrace()"
  name: "Throwable.printStackTrace()"
  nameWithType: "Throwable.printStackTrace()"
  fullName: "java.lang.Throwable.printStackTrace()"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "com.google.cloud.BaseServiceException.isRetryable(java.lang.Integer,java.lang.String,boolean,java.util.Set"
  name: "BaseServiceException.isRetryable(Integer,String,boolean,Set"
  nameWithType: "BaseServiceException.isRetryable(Integer,String,boolean,Set"
  fullName: "com.google.cloud.BaseServiceException.isRetryable(java.lang.Integer,java.lang.String,boolean,java.util.Set"
- uid: "com.google.cloud.BaseServiceException.Error>)"
  name: "BaseServiceException.Error>)"
  nameWithType: "BaseServiceException.Error>)"
  fullName: "com.google.cloud.BaseServiceException.Error>)"
