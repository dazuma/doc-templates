### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.Schema"
  id: "Schema"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.Schema.equals(java.lang.Object)"
  - "com.google.cloud.bigquery.Schema.getFields()"
  - "com.google.cloud.bigquery.Schema.hashCode()"
  - "com.google.cloud.bigquery.Schema.of(com.google.cloud.bigquery.Field...)"
  - "com.google.cloud.bigquery.Schema.of(java.lang.Iterable<com.google.cloud.bigquery.Field>)"
  - "com.google.cloud.bigquery.Schema.toString()"
  langs:
  - "java"
  name: "Schema"
  nameWithType: "Schema"
  fullName: "com.google.cloud.bigquery.Schema"
  type: "Class"
  package: "com.google.cloud.bigquery"
  summary: "This class represents the schema for a Google BigQuery Table or data source."
  syntax:
    content: "public final class Schema implements Serializable"
  inheritance:
  - "java.lang.Object"
  implements:
  - "java.io.Serializable"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.Schema.Schema(com.google.cloud.bigquery.FieldList)"
  id: "Schema(com.google.cloud.bigquery.FieldList)"
  parent: "com.google.cloud.bigquery.Schema"
  langs:
  - "java"
  name: "Schema(FieldList fields)"
  nameWithType: "Schema.Schema(FieldList fields)"
  fullName: "com.google.cloud.bigquery.Schema.Schema(FieldList fields)"
  overload: "com.google.cloud.bigquery.Schema.Schema*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "private Schema(FieldList fields)"
    parameters:
    - id: "fields"
      type: "com.google.cloud.bigquery.FieldList"
- uid: "com.google.cloud.bigquery.Schema.equals(java.lang.Object)"
  id: "equals(java.lang.Object)"
  parent: "com.google.cloud.bigquery.Schema"
  langs:
  - "java"
  name: "equals(Object obj)"
  nameWithType: "Schema.equals(Object obj)"
  fullName: "com.google.cloud.bigquery.Schema.equals(Object obj)"
  overload: "com.google.cloud.bigquery.Schema.equals*"
  overridden: "java.lang.Object.equals(java.lang.Object)"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public boolean equals(Object obj)"
    parameters:
    - id: "obj"
      type: "java.lang.Object"
    return:
      type: "boolean"
- uid: "com.google.cloud.bigquery.Schema.getFields()"
  id: "getFields()"
  parent: "com.google.cloud.bigquery.Schema"
  langs:
  - "java"
  name: "getFields()"
  nameWithType: "Schema.getFields()"
  fullName: "com.google.cloud.bigquery.Schema.getFields()"
  overload: "com.google.cloud.bigquery.Schema.getFields*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the fields in the current table schema."
  syntax:
    content: "public FieldList getFields()"
    return:
      type: "com.google.cloud.bigquery.FieldList"
- uid: "com.google.cloud.bigquery.Schema.hashCode()"
  id: "hashCode()"
  parent: "com.google.cloud.bigquery.Schema"
  langs:
  - "java"
  name: "hashCode()"
  nameWithType: "Schema.hashCode()"
  fullName: "com.google.cloud.bigquery.Schema.hashCode()"
  overload: "com.google.cloud.bigquery.Schema.hashCode*"
  overridden: "java.lang.Object.hashCode()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public int hashCode()"
    return:
      type: "int"
- uid: "com.google.cloud.bigquery.Schema.of(com.google.cloud.bigquery.Field...)"
  id: "of(com.google.cloud.bigquery.Field...)"
  parent: "com.google.cloud.bigquery.Schema"
  langs:
  - "java"
  name: "of(Field[] fields)"
  nameWithType: "Schema.of(Field[] fields)"
  fullName: "com.google.cloud.bigquery.Schema.of(Field[] fields)"
  overload: "com.google.cloud.bigquery.Schema.of*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Creates a `Schema` object given some fields."
  syntax:
    content: "public static Schema of(Field[] fields)"
    parameters:
    - id: "fields"
      type: "com.google.cloud.bigquery.Field[]"
    return:
      type: "com.google.cloud.bigquery.Schema"
- uid: "com.google.cloud.bigquery.Schema.of(java.lang.Iterable<com.google.cloud.bigquery.Field>)"
  id: "of(java.lang.Iterable<com.google.cloud.bigquery.Field>)"
  parent: "com.google.cloud.bigquery.Schema"
  langs:
  - "java"
  name: "of(Iterable<Field> fields)"
  nameWithType: "Schema.of(Iterable<Field> fields)"
  fullName: "com.google.cloud.bigquery.Schema.of(Iterable<Field> fields)"
  overload: "com.google.cloud.bigquery.Schema.of*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Creates a `Schema` object given a list of fields."
  syntax:
    content: "public static Schema of(Iterable<Field> fields)"
    parameters:
    - id: "fields"
      type: "java.lang.Iterable<com.google.cloud.bigquery.Field>"
    return:
      type: "com.google.cloud.bigquery.Schema"
- uid: "com.google.cloud.bigquery.Schema.toString()"
  id: "toString()"
  parent: "com.google.cloud.bigquery.Schema"
  langs:
  - "java"
  name: "toString()"
  nameWithType: "Schema.toString()"
  fullName: "com.google.cloud.bigquery.Schema.toString()"
  overload: "com.google.cloud.bigquery.Schema.toString*"
  overridden: "java.lang.Object.toString()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public String toString()"
    return:
      type: "java.lang.String"
references:
- uid: "com.google.cloud.bigquery.FieldList"
  name: "FieldList"
  nameWithType: "FieldList"
  fullName: "com.google.cloud.bigquery.FieldList"
- uid: "com.google.cloud.bigquery.Schema.Schema*"
  name: "Schema"
  nameWithType: "Schema.Schema"
  fullName: "com.google.cloud.bigquery.Schema.Schema"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Schema.getFields*"
  name: "getFields"
  nameWithType: "Schema.getFields"
  fullName: "com.google.cloud.bigquery.Schema.getFields"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.google.cloud.bigquery.Schema.toString*"
  name: "toString"
  nameWithType: "Schema.toString"
  fullName: "com.google.cloud.bigquery.Schema.toString"
  package: "com.google.cloud.bigquery"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.google.cloud.bigquery.Schema.hashCode*"
  name: "hashCode"
  nameWithType: "Schema.hashCode"
  fullName: "com.google.cloud.bigquery.Schema.hashCode"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.google.cloud.bigquery.Schema.equals*"
  name: "equals"
  nameWithType: "Schema.equals"
  fullName: "com.google.cloud.bigquery.Schema.equals"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Iterable<com.google.cloud.bigquery.Field>"
  spec.java:
  - uid: "java.lang.Iterable"
    name: "Iterable"
    fullName: "java.lang.Iterable"
  - name: "<"
    fullName: "<"
  - uid: "com.google.cloud.bigquery.Field"
    name: "Field"
    fullName: "com.google.cloud.bigquery.Field"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.Schema.of*"
  name: "of"
  nameWithType: "Schema.of"
  fullName: "com.google.cloud.bigquery.Schema.of"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.Field[]"
  spec.java:
  - uid: "com.google.cloud.bigquery.Field"
    name: "Field"
    fullName: "com.google.cloud.bigquery.Field"
  - name: "[]"
    fullName: "[]"
- uid: "java.io.Serializable"
  name: "Serializable"
  nameWithType: "Serializable"
  fullName: "java.io.Serializable"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.google.cloud.bigquery.Field"
  name: "Field"
  nameWithType: "Field"
  fullName: "com.google.cloud.bigquery.Field"
- uid: "java.lang.Iterable"
  name: "Iterable"
  nameWithType: "Iterable"
  fullName: "java.lang.Iterable"
