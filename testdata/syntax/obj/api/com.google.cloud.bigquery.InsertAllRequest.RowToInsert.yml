### YamlMime:ManagedReference
items:
- uid: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert"
  id: "RowToInsert"
  parent: "com.google.cloud.bigquery"
  children:
  - "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.equals(java.lang.Object)"
  - "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.getContent()"
  - "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.getId()"
  - "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.hashCode()"
  - "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.of(java.lang.String,java.util.Map<java.lang.String,?>)"
  - "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.of(java.util.Map<java.lang.String,?>)"
  - "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.toString()"
  langs:
  - "java"
  name: "InsertAllRequest.RowToInsert"
  nameWithType: "InsertAllRequest.RowToInsert"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert"
  type: "Class"
  package: "com.google.cloud.bigquery"
  summary: "A Google Big Query row to be inserted into a table. Each `RowToInsert` has an associated id used by BigQuery to detect duplicate insertion requests on a best-effort basis.\n\nTo ensure proper serialization of numeric data, it is recommended to supply values using a string-typed representation. Additionally, data for fields of <xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.BYTES\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#BYTES</xref> must be provided as a base64 encoded string.\n\nExample usage of creating a row to insert:\n\n```java\nList repeatedFieldValue = Arrays.asList(1L, 2L);\n Map recordContent = new HashMap();\n recordContent.put(\"subfieldName1\", \"value\");\n recordContent.put(\"subfieldName2\", repeatedFieldValue);\n Map rowContent = new HashMap();\n rowContent.put(\"booleanFieldName\", true);\n rowContent.put(\"bytesFieldName\", \"DQ4KDQ==\");\n rowContent.put(\"recordFieldName\", recordContent);\n rowContent.put(\"numericFieldName\", \"1298930929292.129593272\");\n RowToInsert row = new RowToInsert(\"rowId\", rowContent);\n```"
  syntax:
    content: "public static class InsertAllRequest.RowToInsert implements Serializable"
  inheritance:
  - "java.lang.Object"
  implements:
  - "java.io.Serializable"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.RowToInsert(java.lang.String,java.util.Map<java.lang.String,?>)"
  id: "RowToInsert(java.lang.String,java.util.Map<java.lang.String,?>)"
  parent: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert"
  langs:
  - "java"
  name: "RowToInsert(String id, Map<String,?> content)"
  nameWithType: "InsertAllRequest.RowToInsert.RowToInsert(String id, Map<String,?> content)"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.RowToInsert(String id, Map<String,?> content)"
  overload: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.RowToInsert*"
  type: "Constructor"
  package: "com.google.cloud.bigquery"
  syntax:
    content: " RowToInsert(String id, Map<String,?> content)"
    parameters:
    - id: "id"
      type: "java.lang.String"
    - id: "content"
      type: "java.util.Map<java.lang.String,?>"
- uid: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.equals(java.lang.Object)"
  id: "equals(java.lang.Object)"
  parent: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert"
  langs:
  - "java"
  name: "equals(Object obj)"
  nameWithType: "InsertAllRequest.RowToInsert.equals(Object obj)"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.equals(Object obj)"
  overload: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.equals*"
  overridden: "java.lang.Object.equals(java.lang.Object)"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public boolean equals(Object obj)"
    parameters:
    - id: "obj"
      type: "java.lang.Object"
    return:
      type: "boolean"
- uid: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.getContent()"
  id: "getContent()"
  parent: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert"
  langs:
  - "java"
  name: "getContent()"
  nameWithType: "InsertAllRequest.RowToInsert.getContent()"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.getContent()"
  overload: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.getContent*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the actual content of the row, as a map.\n\nThe returned map is always immutable. Its iteration order is unspecified."
  syntax:
    content: "public Map<String,Object> getContent()"
    return:
      type: "java.util.Map<java.lang.String,java.lang.Object>"
- uid: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.getId()"
  id: "getId()"
  parent: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert"
  langs:
  - "java"
  name: "getId()"
  nameWithType: "InsertAllRequest.RowToInsert.getId()"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.getId()"
  overload: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.getId*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Returns the id associated with the row. Returns `null` if not set."
  syntax:
    content: "public String getId()"
    return:
      type: "java.lang.String"
- uid: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.hashCode()"
  id: "hashCode()"
  parent: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert"
  langs:
  - "java"
  name: "hashCode()"
  nameWithType: "InsertAllRequest.RowToInsert.hashCode()"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.hashCode()"
  overload: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.hashCode*"
  overridden: "java.lang.Object.hashCode()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public int hashCode()"
    return:
      type: "int"
- uid: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.of(java.lang.String,java.util.Map<java.lang.String,?>)"
  id: "of(java.lang.String,java.util.Map<java.lang.String,?>)"
  parent: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert"
  langs:
  - "java"
  name: "of(String id, Map<String,?> content)"
  nameWithType: "InsertAllRequest.RowToInsert.of(String id, Map<String,?> content)"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.of(String id, Map<String,?> content)"
  overload: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.of*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Creates a row to be inserted with associated id.\n\nTo ensure proper serialization of numeric data, supply values using a string-typed representation. Additionally, data for fields of <xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.BYTES\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#BYTES</xref> must be provided as a base64 encoded string."
  syntax:
    content: "public static InsertAllRequest.RowToInsert of(String id, Map<String,?> content)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "id of the row, used to identify duplicates"
    - id: "content"
      type: "java.util.Map<java.lang.String,?>"
      description: "the actual content of the row"
    return:
      type: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert"
- uid: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.of(java.util.Map<java.lang.String,?>)"
  id: "of(java.util.Map<java.lang.String,?>)"
  parent: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert"
  langs:
  - "java"
  name: "of(Map<String,?> content)"
  nameWithType: "InsertAllRequest.RowToInsert.of(Map<String,?> content)"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.of(Map<String,?> content)"
  overload: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.of*"
  type: "Method"
  package: "com.google.cloud.bigquery"
  summary: "Creates a row to be inserted without associated id.\n\nTo ensure proper serialization of numeric data, supply values using a string-typed representation. Additionally, data for fields of type <xref uid=\"com.google.cloud.bigquery.LegacySQLTypeName.BYTES\" data-throw-if-not-resolved=\"false\">LegacySQLTypeName#BYTES</xref> must be provided as a base64 encoded string."
  syntax:
    content: "public static InsertAllRequest.RowToInsert of(Map<String,?> content)"
    parameters:
    - id: "content"
      type: "java.util.Map<java.lang.String,?>"
      description: "the actual content of the row"
    return:
      type: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert"
- uid: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.toString()"
  id: "toString()"
  parent: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert"
  langs:
  - "java"
  name: "toString()"
  nameWithType: "InsertAllRequest.RowToInsert.toString()"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.toString()"
  overload: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.toString*"
  overridden: "java.lang.Object.toString()"
  type: "Method"
  package: "com.google.cloud.bigquery"
  syntax:
    content: "public String toString()"
    return:
      type: "java.lang.String"
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "java.util.Map<java.lang.String,?>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "?"
    name: "?"
    fullName: "?"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.RowToInsert*"
  name: "RowToInsert"
  nameWithType: "InsertAllRequest.RowToInsert.RowToInsert"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.RowToInsert"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.getId*"
  name: "getId"
  nameWithType: "InsertAllRequest.RowToInsert.getId"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.getId"
  package: "com.google.cloud.bigquery"
- uid: "java.util.Map<java.lang.String,java.lang.Object>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
  - name: ">"
    fullName: ">"
- uid: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.getContent*"
  name: "getContent"
  nameWithType: "InsertAllRequest.RowToInsert.getContent"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.getContent"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.toString*"
  name: "toString"
  nameWithType: "InsertAllRequest.RowToInsert.toString"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.toString"
  package: "com.google.cloud.bigquery"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.hashCode*"
  name: "hashCode"
  nameWithType: "InsertAllRequest.RowToInsert.hashCode"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.hashCode"
  package: "com.google.cloud.bigquery"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.equals*"
  name: "equals"
  nameWithType: "InsertAllRequest.RowToInsert.equals"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.equals"
  package: "com.google.cloud.bigquery"
- uid: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.of*"
  name: "of"
  nameWithType: "InsertAllRequest.RowToInsert.of"
  fullName: "com.google.cloud.bigquery.InsertAllRequest.RowToInsert.of"
  package: "com.google.cloud.bigquery"
- uid: "java.io.Serializable"
  name: "Serializable"
  nameWithType: "Serializable"
  fullName: "java.io.Serializable"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.lang.String,?"
  name: "String,?"
  nameWithType: "String,?"
  fullName: "java.lang.String,?"
- uid: "java.util.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
- uid: "java.lang.String,java.lang.Object"
  name: "String,Object"
  nameWithType: "String,Object"
  fullName: "java.lang.String,java.lang.Object"
