### YamlMime:UniversalReference
api_name: []
items:
- children:
  - google.cloud.spanner_v1.database.BatchCheckout.__enter__
  - google.cloud.spanner_v1.database.BatchCheckout.__exit__
  class: google.cloud.spanner_v1.database.BatchCheckout
  fullName: google.cloud.spanner_v1.database.BatchCheckout
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: google.cloud.spanner_v1.database
  name: BatchCheckout
  source:
    id: BatchCheckout
    path: google/cloud/spanner_v1/database.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/database.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 600
  summary: 'Context manager for using a batch from a database.


    Inside the context manager, checks out a session from the database,

    creates a batch from it, making the batch available.


    Caller must *not* use the batch to perform API requests outside the scope

    of the context manager.'
  syntax:
    content: BatchCheckout(database)
    parameters:
    - description: database to use
      id: database
      type:
      - google.cloud.spanner_v1.database.Database
  type: class
  uid: google.cloud.spanner_v1.database.BatchCheckout
- class: google.cloud.spanner_v1.database.BatchCheckout
  fullName: google.cloud.spanner_v1.database.BatchCheckout.__enter__
  langs:
  - python
  module: google.cloud.spanner_v1.database
  name: __enter__()
  namewithoutparameters: __enter__
  source:
    id: __enter__
    path: google/cloud/spanner_v1/database.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/database.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 617
  summary: Begin `with` block.
  syntax:
    content: __enter__()
    parameters: []
  type: method
  uid: google.cloud.spanner_v1.database.BatchCheckout.__enter__
- class: google.cloud.spanner_v1.database.BatchCheckout
  fullName: google.cloud.spanner_v1.database.BatchCheckout.__exit__
  langs:
  - python
  module: google.cloud.spanner_v1.database
  name: __exit__(exc_type, exc_val, exc_tb)
  namewithoutparameters: __exit__
  source:
    id: __exit__
    path: google/cloud/spanner_v1/database.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/database.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 623
  summary: End `with` block.
  syntax:
    content: __exit__(exc_type, exc_val, exc_tb)
    parameters:
    - id: exc_type
      isRequired: true
    - id: exc_val
      isRequired: true
    - id: exc_tb
      isRequired: true
  type: method
  uid: google.cloud.spanner_v1.database.BatchCheckout.__exit__
references:
- fullName: google.cloud.spanner_v1.database.BatchCheckout.__enter__
  isExternal: false
  name: __enter__()
  parent: google.cloud.spanner_v1.database.BatchCheckout
  uid: google.cloud.spanner_v1.database.BatchCheckout.__enter__
- fullName: google.cloud.spanner_v1.database.BatchCheckout.__exit__
  isExternal: false
  name: __exit__(exc_type, exc_val, exc_tb)
  parent: google.cloud.spanner_v1.database.BatchCheckout
  uid: google.cloud.spanner_v1.database.BatchCheckout.__exit__
