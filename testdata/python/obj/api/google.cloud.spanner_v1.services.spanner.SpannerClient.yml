### YamlMime:UniversalReference
api_name: []
items:
- children:
  - google.cloud.spanner_v1.services.spanner.SpannerClient.batch_create_sessions
  - google.cloud.spanner_v1.services.spanner.SpannerClient.begin_transaction
  - google.cloud.spanner_v1.services.spanner.SpannerClient.commit
  - google.cloud.spanner_v1.services.spanner.SpannerClient.common_billing_account_path
  - google.cloud.spanner_v1.services.spanner.SpannerClient.common_folder_path
  - google.cloud.spanner_v1.services.spanner.SpannerClient.common_location_path
  - google.cloud.spanner_v1.services.spanner.SpannerClient.common_organization_path
  - google.cloud.spanner_v1.services.spanner.SpannerClient.common_project_path
  - google.cloud.spanner_v1.services.spanner.SpannerClient.create_session
  - google.cloud.spanner_v1.services.spanner.SpannerClient.database_path
  - google.cloud.spanner_v1.services.spanner.SpannerClient.delete_session
  - google.cloud.spanner_v1.services.spanner.SpannerClient.execute_batch_dml
  - google.cloud.spanner_v1.services.spanner.SpannerClient.execute_sql
  - google.cloud.spanner_v1.services.spanner.SpannerClient.execute_streaming_sql
  - google.cloud.spanner_v1.services.spanner.SpannerClient.from_service_account_file
  - google.cloud.spanner_v1.services.spanner.SpannerClient.from_service_account_json
  - google.cloud.spanner_v1.services.spanner.SpannerClient.get_session
  - google.cloud.spanner_v1.services.spanner.SpannerClient.list_sessions
  - google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_billing_account_path
  - google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_folder_path
  - google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_location_path
  - google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_organization_path
  - google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_project_path
  - google.cloud.spanner_v1.services.spanner.SpannerClient.parse_database_path
  - google.cloud.spanner_v1.services.spanner.SpannerClient.parse_session_path
  - google.cloud.spanner_v1.services.spanner.SpannerClient.partition_query
  - google.cloud.spanner_v1.services.spanner.SpannerClient.partition_read
  - google.cloud.spanner_v1.services.spanner.SpannerClient.read
  - google.cloud.spanner_v1.services.spanner.SpannerClient.rollback
  - google.cloud.spanner_v1.services.spanner.SpannerClient.session_path
  - google.cloud.spanner_v1.services.spanner.SpannerClient.streaming_read
  - google.cloud.spanner_v1.services.spanner.SpannerClient.transport
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: SpannerClient
  source:
    id: SpannerClient
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 80
  summary: 'Cloud Spanner API

    The Cloud Spanner API can be used to manage sessions and execute

    transactions on data stored in Cloud Spanner databases.


    Instantiate the spanner client.'
  syntax:
    content: 'SpannerClient(*, credentials: typing.Union[google.auth.credentials.Credentials,
      NoneType] = None, transport: typing.Union[str, google.cloud.spanner_v1.services.spanner.transports.base.SpannerTransport,
      NoneType] = None, client_options: typing.Union[google.api_core.client_options.ClientOptions,
      NoneType] = None, client_info: google.api_core.gapic_v1.client_info.ClientInfo
      = <google.api_core.gapic_v1.client_info.ClientInfo object>) -> None'
    parameters: &id001
    - description: 'The

        authorization credentials to attach to requests. These

        credentials identify the application to the service; if none

        are specified, the client will attempt to ascertain the

        credentials from the environment.'
      id: credentials
      type:
      - Optional[google.auth.credentials.Credentials]
    - description: 'The

        transport to use. If set to None, a transport is chosen

        automatically.'
      id: transport
      type:
      - Union[str, .SpannerTransport]
    - description: 'Custom options for the

        client. It won''t take effect if a `transport` instance is provided.

        (1) The `api_endpoint` property can be used to override the

        default endpoint provided by the client. GOOGLE_API_USE_MTLS_ENDPOINT

        environment variable can also be used to override the endpoint:

        "always" (always use the default mTLS endpoint), "never" (always

        use the default regular endpoint) and "auto" (auto switch to the

        default mTLS endpoint if client certificate is present, this is

        the default value). However, the `api_endpoint` property takes

        precedence if provided.

        (2) If GOOGLE_API_USE_CLIENT_CERTIFICATE environment variable

        is "true", then the `client_cert_source` property can be used

        to provide client certificate for mutual TLS transport. If

        not provided, the default SSL client certificate will be used if

        present. If GOOGLE_API_USE_CLIENT_CERTIFICATE is "false" or not

        set, no client certificate will be used.'
      id: client_options
      type:
      - client_options_lib.ClientOptions
    - description: 'The client info used to send a user-agent string along with

        API requests. If `None`, then default info will be used.

        Generally, you only need to set this if you''re developing

        your own client library.'
      id: client_info
      type:
      - google.api_core.gapic_v1.client_info.ClientInfo
  type: class
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient
- children:
  - google.cloud.spanner_v1.services.spanner.SpannerClient.batch_create_sessions
  - google.cloud.spanner_v1.services.spanner.SpannerClient.begin_transaction
  - google.cloud.spanner_v1.services.spanner.SpannerClient.commit
  - google.cloud.spanner_v1.services.spanner.SpannerClient.common_billing_account_path
  - google.cloud.spanner_v1.services.spanner.SpannerClient.common_folder_path
  - google.cloud.spanner_v1.services.spanner.SpannerClient.common_location_path
  - google.cloud.spanner_v1.services.spanner.SpannerClient.common_organization_path
  - google.cloud.spanner_v1.services.spanner.SpannerClient.common_project_path
  - google.cloud.spanner_v1.services.spanner.SpannerClient.create_session
  - google.cloud.spanner_v1.services.spanner.SpannerClient.database_path
  - google.cloud.spanner_v1.services.spanner.SpannerClient.delete_session
  - google.cloud.spanner_v1.services.spanner.SpannerClient.execute_batch_dml
  - google.cloud.spanner_v1.services.spanner.SpannerClient.execute_sql
  - google.cloud.spanner_v1.services.spanner.SpannerClient.execute_streaming_sql
  - google.cloud.spanner_v1.services.spanner.SpannerClient.from_service_account_file
  - google.cloud.spanner_v1.services.spanner.SpannerClient.from_service_account_json
  - google.cloud.spanner_v1.services.spanner.SpannerClient.get_session
  - google.cloud.spanner_v1.services.spanner.SpannerClient.list_sessions
  - google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_billing_account_path
  - google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_folder_path
  - google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_location_path
  - google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_organization_path
  - google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_project_path
  - google.cloud.spanner_v1.services.spanner.SpannerClient.parse_database_path
  - google.cloud.spanner_v1.services.spanner.SpannerClient.parse_session_path
  - google.cloud.spanner_v1.services.spanner.SpannerClient.partition_query
  - google.cloud.spanner_v1.services.spanner.SpannerClient.partition_read
  - google.cloud.spanner_v1.services.spanner.SpannerClient.read
  - google.cloud.spanner_v1.services.spanner.SpannerClient.rollback
  - google.cloud.spanner_v1.services.spanner.SpannerClient.session_path
  - google.cloud.spanner_v1.services.spanner.SpannerClient.streaming_read
  - google.cloud.spanner_v1.services.spanner.SpannerClient.transport
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: SpannerClient
  source:
    id: SpannerClient
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 80
  summary: 'Cloud Spanner API

    The Cloud Spanner API can be used to manage sessions and execute

    transactions on data stored in Cloud Spanner databases.


    Instantiate the spanner client.'
  syntax:
    content: 'SpannerClient(*, credentials: typing.Union[google.auth.credentials.Credentials,
      NoneType] = None, transport: typing.Union[str, google.cloud.spanner_v1.services.spanner.transports.base.SpannerTransport,
      NoneType] = None, client_options: typing.Union[google.api_core.client_options.ClientOptions,
      NoneType] = None, client_info: google.api_core.gapic_v1.client_info.ClientInfo
      = <google.api_core.gapic_v1.client_info.ClientInfo object>) -> None'
    parameters: *id001
  type: class
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient
- &id002
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.batch_create_sessions
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'batch_create_sessions(request: google.cloud.spanner_v1.types.spanner.BatchCreateSessionsRequest
    = None, *, database: str = None, session_count: int = None, retry: google.api_core.retry.Retry
    = <object object>, timeout: float = None, metadata: typing.Sequence[typing.Tuple[str,
    str]] = ()) -> google.cloud.spanner_v1.types.spanner.BatchCreateSessionsResponse'
  namewithoutparameters: batch_create_sessions
  source:
    id: batch_create_sessions
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 446
  summary: 'Creates multiple new sessions.

    This API can be used to initialize a session cache on

    the clients. See [https://goo.gl/TgSFN2](https://goo.gl/TgSFN2) for best

    practices on session cache management.'
  syntax:
    content: 'batch_create_sessions(request: google.cloud.spanner_v1.types.spanner.BatchCreateSessionsRequest
      = None, *, database: str = None, session_count: int = None, retry: google.api_core.retry.Retry
      = <object object>, timeout: float = None, metadata: typing.Sequence[typing.Tuple[str,
      str]] = ()) -> google.cloud.spanner_v1.types.spanner.BatchCreateSessionsResponse'
    parameters:
    - description: 'The request object. The request for

        [BatchCreateSessions][google.spanner.v1.Spanner.BatchCreateSessions].'
      id: request
      isRequired: true
      type:
      - spanner.BatchCreateSessionsRequest
    - description: 'Required. The database in which the

        new sessions are created.

        This corresponds to the `database` field

        on the `request` instance; if `request` is provided, this

        should not be set.'
      id: database
      isRequired: true
      type:
      - google.cloud.spanner_v1.services.spanner.str
    - description: 'Required. The number of sessions to be created in this

        batch call. The API may return fewer than the requested

        number of sessions. If a specific number of sessions are

        desired, the client can make additional calls to

        BatchCreateSessions (adjusting

        [session_count][google.spanner.v1.BatchCreateSessionsRequest.session_count]

        as necessary).

        This corresponds to the `session_count` field

        on the `request` instance; if `request` is provided, this

        should not be set.'
      id: session_count
      isRequired: true
      type:
      - google.cloud.spanner_v1.services.spanner.int
    - description: 'Designation of what errors, if any,

        should be retried.'
      id: retry
      isRequired: true
      type:
      - google.api_core.retry.Retry
    - description: The timeout for this request.
      id: timeout
      isRequired: true
      type:
      - float
    - description: 'Strings which should be

        sent along with the request as metadata.'
      id: metadata
      isRequired: true
      type:
      - Sequence[Tuple[str, str]]
    return:
      description: 'The response for

        [BatchCreateSessions][google.spanner.v1.Spanner.BatchCreateSessions].'
      type:
      - .spanner.BatchCreateSessionsResponse
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.batch_create_sessions
- *id002
- &id003
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.begin_transaction
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'begin_transaction(request: google.cloud.spanner_v1.types.spanner.BeginTransactionRequest
    = None, *, session: str = None, options: google.cloud.spanner_v1.types.transaction.TransactionOptions
    = None, retry: google.api_core.retry.Retry = <object object>, timeout: float =
    None, metadata: typing.Sequence[typing.Tuple[str, str]] = ()) -> google.cloud.spanner_v1.types.transaction.Transaction'
  namewithoutparameters: begin_transaction
  source:
    id: begin_transaction
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 1115
  summary: 'Begins a new transaction. This step can often be skipped:

    [Read][google.spanner.v1.Spanner.Read],

    [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] and

    [Commit][google.spanner.v1.Spanner.Commit] can begin a new

    transaction as a side-effect.'
  syntax:
    content: 'begin_transaction(request: google.cloud.spanner_v1.types.spanner.BeginTransactionRequest
      = None, *, session: str = None, options: google.cloud.spanner_v1.types.transaction.TransactionOptions
      = None, retry: google.api_core.retry.Retry = <object object>, timeout: float
      = None, metadata: typing.Sequence[typing.Tuple[str, str]] = ()) -> google.cloud.spanner_v1.types.transaction.Transaction'
    parameters:
    - description: 'The request object. The request for

        [BeginTransaction][google.spanner.v1.Spanner.BeginTransaction].'
      id: request
      isRequired: true
      type:
      - spanner.BeginTransactionRequest
    - description: 'Required. The session in which the

        transaction runs.

        This corresponds to the `session` field

        on the `request` instance; if `request` is provided, this

        should not be set.'
      id: session
      isRequired: true
      type:
      - google.cloud.spanner_v1.services.spanner.str
    - description: 'Required. Options for the new

        transaction.

        This corresponds to the `options` field

        on the `request` instance; if `request` is provided, this

        should not be set.'
      id: options
      isRequired: true
      type:
      - transaction.TransactionOptions
    - description: 'Designation of what errors, if any,

        should be retried.'
      id: retry
      isRequired: true
      type:
      - google.api_core.retry.Retry
    - description: The timeout for this request.
      id: timeout
      isRequired: true
      type:
      - float
    - description: 'Strings which should be

        sent along with the request as metadata.'
      id: metadata
      isRequired: true
      type:
      - Sequence[Tuple[str, str]]
    return:
      description: A transaction.
      type:
      - .transaction.Transaction
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.begin_transaction
- *id003
- &id004
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.commit
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'commit(request: google.cloud.spanner_v1.types.spanner.CommitRequest = None,
    *, session: str = None, transaction_id: bytes = None, mutations: typing.Sequence[google.cloud.spanner_v1.types.mutation.Mutation]
    = None, single_use_transaction: google.cloud.spanner_v1.types.transaction.TransactionOptions
    = None, retry: google.api_core.retry.Retry = <object object>, timeout: float =
    None, metadata: typing.Sequence[typing.Tuple[str, str]] = ()) -> google.cloud.spanner_v1.types.spanner.CommitResponse'
  namewithoutparameters: commit
  source:
    id: commit
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 1199
  summary: 'Commits a transaction. The request includes the mutations to be

    applied to rows in the database.


    `Commit` might return an `ABORTED` error. This can occur at

    any time; commonly, the cause is conflicts with concurrent

    transactions. However, it can also happen for a variety of other

    reasons. If `Commit` returns `ABORTED`, the caller should

    re-attempt the transaction from the beginning, re-using the same

    session.'
  syntax:
    content: 'commit(request: google.cloud.spanner_v1.types.spanner.CommitRequest
      = None, *, session: str = None, transaction_id: bytes = None, mutations: typing.Sequence[google.cloud.spanner_v1.types.mutation.Mutation]
      = None, single_use_transaction: google.cloud.spanner_v1.types.transaction.TransactionOptions
      = None, retry: google.api_core.retry.Retry = <object object>, timeout: float
      = None, metadata: typing.Sequence[typing.Tuple[str, str]] = ()) -> google.cloud.spanner_v1.types.spanner.CommitResponse'
    parameters:
    - description: 'The request object. The request for

        [Commit][google.spanner.v1.Spanner.Commit].'
      id: request
      isRequired: true
      type:
      - spanner.CommitRequest
    - description: 'Required. The session in which the

        transaction to be committed is running.

        This corresponds to the `session` field

        on the `request` instance; if `request` is provided, this

        should not be set.'
      id: session
      isRequired: true
      type:
      - google.cloud.spanner_v1.services.spanner.str
    - description: 'Commit a previously-started

        transaction.

        This corresponds to the `transaction_id` field

        on the `request` instance; if `request` is provided, this

        should not be set.'
      id: transaction_id
      isRequired: true
      type:
      - google.cloud.spanner_v1.services.spanner.bytes
    - description: 'The mutations to be executed when

        this transaction commits. All mutations

        are applied atomically, in the order

        they appear in this list.

        This corresponds to the `mutations` field

        on the `request` instance; if `request` is provided, this

        should not be set.'
      id: mutations
      isRequired: true
      type:
      - Sequence[.mutation.Mutation]
    - description: 'Execute mutations in a temporary transaction. Note that

        unlike commit of a previously-started transaction,

        commit with a temporary transaction is non-idempotent.

        That is, if the `CommitRequest` is sent to Cloud

        Spanner more than once (for instance, due to retries in

        the application, or in the transport library), it is

        possible that the mutations are executed more than once.

        If this is undesirable, use

        [BeginTransaction][google.spanner.v1.Spanner.BeginTransaction]

        and [Commit][google.spanner.v1.Spanner.Commit] instead.

        This corresponds to the `single_use_transaction` field

        on the `request` instance; if `request` is provided, this

        should not be set.'
      id: single_use_transaction
      isRequired: true
      type:
      - transaction.TransactionOptions
    - description: 'Designation of what errors, if any,

        should be retried.'
      id: retry
      isRequired: true
      type:
      - google.api_core.retry.Retry
    - description: The timeout for this request.
      id: timeout
      isRequired: true
      type:
      - float
    - description: 'Strings which should be

        sent along with the request as metadata.'
      id: metadata
      isRequired: true
      type:
      - Sequence[Tuple[str, str]]
    return:
      description: 'The response for

        [Commit][google.spanner.v1.Spanner.Commit].'
      type:
      - .spanner.CommitResponse
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.commit
- *id004
- &id005
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.common_billing_account_path
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'common_billing_account_path(billing_account: str) -> str'
  namewithoutparameters: common_billing_account_path
  source:
    id: common_billing_account_path
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 181
  summary: Return a fully-qualified billing_account string.
  syntax:
    content: 'common_billing_account_path(billing_account: str) -> str'
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.common_billing_account_path
- *id005
- &id006
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.common_folder_path
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'common_folder_path(folder: str) -> str'
  namewithoutparameters: common_folder_path
  source:
    id: common_folder_path
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 194
  summary: Return a fully-qualified folder string.
  syntax:
    content: 'common_folder_path(folder: str) -> str'
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.common_folder_path
- *id006
- &id007
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.common_location_path
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'common_location_path(project: str, location: str) -> str'
  namewithoutparameters: common_location_path
  source:
    id: common_location_path
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 227
  summary: Return a fully-qualified location string.
  syntax:
    content: 'common_location_path(project: str, location: str) -> str'
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.common_location_path
- *id007
- &id008
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.common_organization_path
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'common_organization_path(organization: str) -> str'
  namewithoutparameters: common_organization_path
  source:
    id: common_organization_path
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 205
  summary: Return a fully-qualified organization string.
  syntax:
    content: 'common_organization_path(organization: str) -> str'
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.common_organization_path
- *id008
- &id009
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.common_project_path
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'common_project_path(project: str) -> str'
  namewithoutparameters: common_project_path
  source:
    id: common_project_path
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 216
  summary: Return a fully-qualified project string.
  syntax:
    content: 'common_project_path(project: str) -> str'
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.common_project_path
- *id009
- &id010
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.create_session
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'create_session(request: google.cloud.spanner_v1.types.spanner.CreateSessionRequest
    = None, *, database: str = None, retry: google.api_core.retry.Retry = <object
    object>, timeout: float = None, metadata: typing.Sequence[typing.Tuple[str, str]]
    = ()) -> google.cloud.spanner_v1.types.spanner.Session'
  namewithoutparameters: create_session
  source:
    id: create_session
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 357
  summary: 'Creates a new session. A session can be used to perform

    transactions that read and/or modify data in a Cloud Spanner

    database. Sessions are meant to be reused for many consecutive

    transactions.


    Sessions can only execute one transaction at a time. To execute

    multiple concurrent read-write/write-only transactions, create

    multiple sessions. Note that standalone reads and queries use a

    transaction internally, and count toward the one transaction

    limit.


    Active sessions use additional server resources, so it is a good

    idea to delete idle and unneeded sessions. Aside from explicit

    deletes, Cloud Spanner may delete sessions for which no

    operations are sent for more than an hour. If a session is

    deleted, requests to it return `NOT_FOUND`.


    Idle sessions can be kept alive by sending a trivial SQL query

    periodically, e.g., `"SELECT 1"`.'
  syntax:
    content: 'create_session(request: google.cloud.spanner_v1.types.spanner.CreateSessionRequest
      = None, *, database: str = None, retry: google.api_core.retry.Retry = <object
      object>, timeout: float = None, metadata: typing.Sequence[typing.Tuple[str,
      str]] = ()) -> google.cloud.spanner_v1.types.spanner.Session'
    parameters:
    - description: 'The request object. The request for

        [CreateSession][google.spanner.v1.Spanner.CreateSession].'
      id: request
      isRequired: true
      type:
      - spanner.CreateSessionRequest
    - description: 'Required. The database in which the

        new session is created.

        This corresponds to the `database` field

        on the `request` instance; if `request` is provided, this

        should not be set.'
      id: database
      isRequired: true
      type:
      - google.cloud.spanner_v1.services.spanner.str
    - description: 'Designation of what errors, if any,

        should be retried.'
      id: retry
      isRequired: true
      type:
      - google.api_core.retry.Retry
    - description: The timeout for this request.
      id: timeout
      isRequired: true
      type:
      - float
    - description: 'Strings which should be

        sent along with the request as metadata.'
      id: metadata
      isRequired: true
      type:
      - Sequence[Tuple[str, str]]
    return:
      description: A session in the Cloud Spanner API.
      type:
      - .spanner.Session
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.create_session
- *id010
- &id011
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.database_path
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'database_path(project: str, instance: str, database: str) -> str'
  namewithoutparameters: database_path
  source:
    id: database_path
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 149
  summary: Return a fully-qualified database string.
  syntax:
    content: 'database_path(project: str, instance: str, database: str) -> str'
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.database_path
- *id011
- &id012
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.delete_session
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'delete_session(request: google.cloud.spanner_v1.types.spanner.DeleteSessionRequest
    = None, *, name: str = None, retry: google.api_core.retry.Retry = <object object>,
    timeout: float = None, metadata: typing.Sequence[typing.Tuple[str, str]] = ())
    -> None'
  namewithoutparameters: delete_session
  source:
    id: delete_session
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 691
  summary: 'Ends a session, releasing server resources associated

    with it. This will asynchronously trigger cancellation

    of any operations that are running with this session.'
  syntax:
    content: 'delete_session(request: google.cloud.spanner_v1.types.spanner.DeleteSessionRequest
      = None, *, name: str = None, retry: google.api_core.retry.Retry = <object object>,
      timeout: float = None, metadata: typing.Sequence[typing.Tuple[str, str]] = ())
      -> None'
    parameters:
    - description: 'The request object. The request for

        [DeleteSession][google.spanner.v1.Spanner.DeleteSession].'
      id: request
      isRequired: true
      type:
      - spanner.DeleteSessionRequest
    - description: 'Required. The name of the session to

        delete.

        This corresponds to the `name` field

        on the `request` instance; if `request` is provided, this

        should not be set.'
      id: name
      isRequired: true
      type:
      - google.cloud.spanner_v1.services.spanner.str
    - description: 'Designation of what errors, if any,

        should be retried.'
      id: retry
      isRequired: true
      type:
      - google.api_core.retry.Retry
    - description: The timeout for this request.
      id: timeout
      isRequired: true
      type:
      - float
    - description: 'Strings which should be

        sent along with the request as metadata.'
      id: metadata
      isRequired: true
      type:
      - Sequence[Tuple[str, str]]
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.delete_session
- *id012
- &id013
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.execute_batch_dml
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'execute_batch_dml(request: google.cloud.spanner_v1.types.spanner.ExecuteBatchDmlRequest
    = None, *, retry: google.api_core.retry.Retry = <object object>, timeout: float
    = None, metadata: typing.Sequence[typing.Tuple[str, str]] = ()) -> google.cloud.spanner_v1.types.spanner.ExecuteBatchDmlResponse'
  namewithoutparameters: execute_batch_dml
  source:
    id: execute_batch_dml
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 886
  summary: 'Executes a batch of SQL DML statements. This method allows many

    statements to be run with lower latency than submitting them

    sequentially with

    [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].


    Statements are executed in sequential order. A request can

    succeed even if a statement fails. The

    [ExecuteBatchDmlResponse.status][google.spanner.v1.ExecuteBatchDmlResponse.status]

    field in the response provides information about the statement

    that failed. Clients must inspect this field to determine

    whether an error occurred.


    Execution stops after the first failed statement; the remaining

    statements are not executed.'
  syntax:
    content: 'execute_batch_dml(request: google.cloud.spanner_v1.types.spanner.ExecuteBatchDmlRequest
      = None, *, retry: google.api_core.retry.Retry = <object object>, timeout: float
      = None, metadata: typing.Sequence[typing.Tuple[str, str]] = ()) -> google.cloud.spanner_v1.types.spanner.ExecuteBatchDmlResponse'
    parameters:
    - description: 'The request object. The request for

        [ExecuteBatchDml][google.spanner.v1.Spanner.ExecuteBatchDml].'
      id: request
      isRequired: true
      type:
      - spanner.ExecuteBatchDmlRequest
    - description: 'Designation of what errors, if any,

        should be retried.'
      id: retry
      isRequired: true
      type:
      - google.api_core.retry.Retry
    - description: The timeout for this request.
      id: timeout
      isRequired: true
      type:
      - float
    - description: 'Strings which should be

        sent along with the request as metadata.'
      id: metadata
      isRequired: true
      type:
      - Sequence[Tuple[str, str]]
    return:
      description: "The response for\n[ExecuteBatchDml][google.spanner.v1.Spanner.ExecuteBatchDml].\n\
        Contains a list of\n[ResultSet][google.spanner.v1.ResultSet] messages, one\n\
        for each DML statement that has successfully executed,\nin the same order\
        \ as the statements in the request. If a\nstatement fails, the status in the\
        \ response body\nidentifies the cause of the failure.\n\nTo check for DML\
        \ statements that failed, use the\nfollowing approach:\n\n1. Check the status\
        \ in the response message. The [google.rpc.Code][google.rpc.Code] enum value\
        \ `OK` indicates that all statements were executed successfully. \n\n2. If\
        \ the status was not `OK`, check the number of result sets in the response.\
        \ If the response contains `N` [ResultSet][google.spanner.v1.ResultSet] messages,\
        \ then statement `N+1` in the request failed. \n\nExample 1:\n\n* Request:\
        \ 5 DML statements, all executed successfully. \n\n* Response: 5 [ResultSet][google.spanner.v1.ResultSet]\
        \ messages, with the status `OK`. \n\nExample 2:\n\n* Request: 5 DML statements.\
        \ The third statement has a syntax error. \n\n* Response: 2 [ResultSet][google.spanner.v1.ResultSet]\
        \ messages, and a syntax error (`INVALID_ARGUMENT`) status. The number of\
        \ [ResultSet][google.spanner.v1.ResultSet] messages indicates that the third\
        \ statement failed, and the fourth and fifth statements were not executed."
      type:
      - .spanner.ExecuteBatchDmlResponse
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.execute_batch_dml
- *id013
- &id014
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.execute_sql
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'execute_sql(request: google.cloud.spanner_v1.types.spanner.ExecuteSqlRequest
    = None, *, retry: google.api_core.retry.Retry = <object object>, timeout: float
    = None, metadata: typing.Sequence[typing.Tuple[str, str]] = ()) -> google.cloud.spanner_v1.types.result_set.ResultSet'
  namewithoutparameters: execute_sql
  source:
    id: execute_sql
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 759
  summary: 'Executes an SQL statement, returning all results in a single

    reply. This method cannot be used to return a result set larger

    than 10 MiB; if the query yields more data than that, the query

    fails with a `FAILED_PRECONDITION` error.


    Operations inside read-write transactions might return

    `ABORTED`. If this occurs, the application should restart the

    transaction from the beginning. See

    [Transaction][google.spanner.v1.Transaction] for more details.


    Larger result sets can be fetched in streaming fashion by

    calling

    [ExecuteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql]

    instead.'
  syntax:
    content: 'execute_sql(request: google.cloud.spanner_v1.types.spanner.ExecuteSqlRequest
      = None, *, retry: google.api_core.retry.Retry = <object object>, timeout: float
      = None, metadata: typing.Sequence[typing.Tuple[str, str]] = ()) -> google.cloud.spanner_v1.types.result_set.ResultSet'
    parameters:
    - description: 'The request object. The request for

        [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] and

        [ExecuteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql].'
      id: request
      isRequired: true
      type:
      - spanner.ExecuteSqlRequest
    - description: 'Designation of what errors, if any,

        should be retried.'
      id: retry
      isRequired: true
      type:
      - google.api_core.retry.Retry
    - description: The timeout for this request.
      id: timeout
      isRequired: true
      type:
      - float
    - description: 'Strings which should be

        sent along with the request as metadata.'
      id: metadata
      isRequired: true
      type:
      - Sequence[Tuple[str, str]]
    return:
      description: 'Results from [Read][google.spanner.v1.Spanner.Read] or

        [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].'
      type:
      - .result_set.ResultSet
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.execute_sql
- *id014
- &id015
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.execute_streaming_sql
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'execute_streaming_sql(request: google.cloud.spanner_v1.types.spanner.ExecuteSqlRequest
    = None, *, retry: google.api_core.retry.Retry = <object object>, timeout: float
    = None, metadata: typing.Sequence[typing.Tuple[str, str]] = ()) -> typing.Iterable[google.cloud.spanner_v1.types.result_set.PartialResultSet]'
  namewithoutparameters: execute_streaming_sql
  source:
    id: execute_streaming_sql
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 825
  summary: 'Like [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql], except

    returns the result set as a stream. Unlike

    [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql], there is no

    limit on the size of the returned result set. However, no

    individual row in the result set can exceed 100 MiB, and no

    column value can exceed 10 MiB.'
  syntax:
    content: 'execute_streaming_sql(request: google.cloud.spanner_v1.types.spanner.ExecuteSqlRequest
      = None, *, retry: google.api_core.retry.Retry = <object object>, timeout: float
      = None, metadata: typing.Sequence[typing.Tuple[str, str]] = ()) -> typing.Iterable[google.cloud.spanner_v1.types.result_set.PartialResultSet]'
    parameters:
    - description: 'The request object. The request for

        [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] and

        [ExecuteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql].'
      id: request
      isRequired: true
      type:
      - spanner.ExecuteSqlRequest
    - description: 'Designation of what errors, if any,

        should be retried.'
      id: retry
      isRequired: true
      type:
      - google.api_core.retry.Retry
    - description: The timeout for this request.
      id: timeout
      isRequired: true
      type:
      - float
    - description: 'Strings which should be

        sent along with the request as metadata.'
      id: metadata
      isRequired: true
      type:
      - Sequence[Tuple[str, str]]
    return:
      description: 'Partial results from a streaming read

        or SQL query. Streaming reads and SQL

        queries better tolerate large result

        sets, large rows, and large values, but

        are a little trickier to consume.'
      type:
      - Iterable[.result_set.PartialResultSet]
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.execute_streaming_sql
- *id015
- &id016
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.from_service_account_file
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'from_service_account_file(filename: str, *args, **kwargs)'
  namewithoutparameters: from_service_account_file
  source:
    id: from_service_account_file
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 120
  summary: 'Creates an instance of this client using the provided credentials

    file.'
  syntax:
    content: 'from_service_account_file(filename: str, *args, **kwargs)'
    parameters:
    - description: 'The path to the service account private key json

        file.'
      id: filename
      isRequired: true
      type:
      - str
    - description: Additional arguments to pass to the constructor.
      id: args
      isRequired: true
    - description: Additional arguments to pass to the constructor.
      id: kwargs
      isRequired: true
    return:
      description: The constructed client.
      type:
      - <xref:mailto:{api.name>}
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.from_service_account_file
- *id016
- &id017
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.from_service_account_json
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'from_service_account_json(filename: str, *args, **kwargs)'
  namewithoutparameters: from_service_account_json
  source:
    id: from_service_account_json
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 120
  summary: 'Creates an instance of this client using the provided credentials

    file.'
  syntax:
    content: 'from_service_account_json(filename: str, *args, **kwargs)'
    parameters:
    - description: 'The path to the service account private key json

        file.'
      id: filename
      isRequired: true
      type:
      - str
    - description: Additional arguments to pass to the constructor.
      id: args
      isRequired: true
    - description: Additional arguments to pass to the constructor.
      id: kwargs
      isRequired: true
    return:
      description: The constructed client.
      type:
      - <xref:mailto:{api.name>}
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.from_service_account_json
- *id017
- &id018
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.get_session
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'get_session(request: google.cloud.spanner_v1.types.spanner.GetSessionRequest
    = None, *, name: str = None, retry: google.api_core.retry.Retry = <object object>,
    timeout: float = None, metadata: typing.Sequence[typing.Tuple[str, str]] = ())
    -> google.cloud.spanner_v1.types.spanner.Session'
  namewithoutparameters: get_session
  source:
    id: get_session
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 536
  summary: 'Gets a session. Returns `NOT_FOUND` if the session does not

    exist. This is mainly useful for determining whether a session

    is still alive.'
  syntax:
    content: 'get_session(request: google.cloud.spanner_v1.types.spanner.GetSessionRequest
      = None, *, name: str = None, retry: google.api_core.retry.Retry = <object object>,
      timeout: float = None, metadata: typing.Sequence[typing.Tuple[str, str]] = ())
      -> google.cloud.spanner_v1.types.spanner.Session'
    parameters:
    - description: 'The request object. The request for

        [GetSession][google.spanner.v1.Spanner.GetSession].'
      id: request
      isRequired: true
      type:
      - spanner.GetSessionRequest
    - description: 'Required. The name of the session to

        retrieve.

        This corresponds to the `name` field

        on the `request` instance; if `request` is provided, this

        should not be set.'
      id: name
      isRequired: true
      type:
      - google.cloud.spanner_v1.services.spanner.str
    - description: 'Designation of what errors, if any,

        should be retried.'
      id: retry
      isRequired: true
      type:
      - google.api_core.retry.Retry
    - description: The timeout for this request.
      id: timeout
      isRequired: true
      type:
      - float
    - description: 'Strings which should be

        sent along with the request as metadata.'
      id: metadata
      isRequired: true
      type:
      - Sequence[Tuple[str, str]]
    return:
      description: A session in the Cloud Spanner API.
      type:
      - .spanner.Session
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.get_session
- *id018
- &id019
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.list_sessions
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'list_sessions(request: google.cloud.spanner_v1.types.spanner.ListSessionsRequest
    = None, *, database: str = None, retry: google.api_core.retry.Retry = <object
    object>, timeout: float = None, metadata: typing.Sequence[typing.Tuple[str, str]]
    = ()) -> google.cloud.spanner_v1.services.spanner.pagers.ListSessionsPager'
  namewithoutparameters: list_sessions
  source:
    id: list_sessions
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 609
  summary: Lists all sessions in a given database.
  syntax:
    content: 'list_sessions(request: google.cloud.spanner_v1.types.spanner.ListSessionsRequest
      = None, *, database: str = None, retry: google.api_core.retry.Retry = <object
      object>, timeout: float = None, metadata: typing.Sequence[typing.Tuple[str,
      str]] = ()) -> google.cloud.spanner_v1.services.spanner.pagers.ListSessionsPager'
    parameters:
    - description: 'The request object. The request for

        [ListSessions][google.spanner.v1.Spanner.ListSessions].'
      id: request
      isRequired: true
      type:
      - spanner.ListSessionsRequest
    - description: 'Required. The database in which to

        list sessions.

        This corresponds to the `database` field

        on the `request` instance; if `request` is provided, this

        should not be set.'
      id: database
      isRequired: true
      type:
      - google.cloud.spanner_v1.services.spanner.str
    - description: 'Designation of what errors, if any,

        should be retried.'
      id: retry
      isRequired: true
      type:
      - google.api_core.retry.Retry
    - description: The timeout for this request.
      id: timeout
      isRequired: true
      type:
      - float
    - description: 'Strings which should be

        sent along with the request as metadata.'
      id: metadata
      isRequired: true
      type:
      - Sequence[Tuple[str, str]]
    return:
      description: 'The response for

        [ListSessions][google.spanner.v1.Spanner.ListSessions].


        Iterating over this object will yield results and

        resolve additional pages automatically.'
      type:
      - .pagers.ListSessionsPager
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.list_sessions
- *id019
- &id020
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_billing_account_path
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'parse_common_billing_account_path(path: str) -> typing.Dict[str, str]'
  namewithoutparameters: parse_common_billing_account_path
  source:
    id: parse_common_billing_account_path
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 188
  summary: Parse a billing_account path into its component segments.
  syntax:
    content: 'parse_common_billing_account_path(path: str) -> typing.Dict[str, str]'
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_billing_account_path
- *id020
- &id021
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_folder_path
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'parse_common_folder_path(path: str) -> typing.Dict[str, str]'
  namewithoutparameters: parse_common_folder_path
  source:
    id: parse_common_folder_path
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 199
  summary: Parse a folder path into its component segments.
  syntax:
    content: 'parse_common_folder_path(path: str) -> typing.Dict[str, str]'
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_folder_path
- *id021
- &id022
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_location_path
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'parse_common_location_path(path: str) -> typing.Dict[str, str]'
  namewithoutparameters: parse_common_location_path
  source:
    id: parse_common_location_path
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 234
  summary: Parse a location path into its component segments.
  syntax:
    content: 'parse_common_location_path(path: str) -> typing.Dict[str, str]'
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_location_path
- *id022
- &id023
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_organization_path
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'parse_common_organization_path(path: str) -> typing.Dict[str, str]'
  namewithoutparameters: parse_common_organization_path
  source:
    id: parse_common_organization_path
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 210
  summary: Parse a organization path into its component segments.
  syntax:
    content: 'parse_common_organization_path(path: str) -> typing.Dict[str, str]'
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_organization_path
- *id023
- &id024
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_project_path
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'parse_common_project_path(path: str) -> typing.Dict[str, str]'
  namewithoutparameters: parse_common_project_path
  source:
    id: parse_common_project_path
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 221
  summary: Parse a project path into its component segments.
  syntax:
    content: 'parse_common_project_path(path: str) -> typing.Dict[str, str]'
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_project_path
- *id024
- &id025
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.parse_database_path
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'parse_database_path(path: str) -> typing.Dict[str, str]'
  namewithoutparameters: parse_database_path
  source:
    id: parse_database_path
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 156
  summary: Parse a database path into its component segments.
  syntax:
    content: 'parse_database_path(path: str) -> typing.Dict[str, str]'
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.parse_database_path
- *id025
- &id026
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.parse_session_path
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'parse_session_path(path: str) -> typing.Dict[str, str]'
  namewithoutparameters: parse_session_path
  source:
    id: parse_session_path
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 172
  summary: Parse a session path into its component segments.
  syntax:
    content: 'parse_session_path(path: str) -> typing.Dict[str, str]'
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.parse_session_path
- *id026
- &id027
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.partition_query
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'partition_query(request: google.cloud.spanner_v1.types.spanner.PartitionQueryRequest
    = None, *, retry: google.api_core.retry.Retry = <object object>, timeout: float
    = None, metadata: typing.Sequence[typing.Tuple[str, str]] = ()) -> google.cloud.spanner_v1.types.spanner.PartitionResponse'
  namewithoutparameters: partition_query
  source:
    id: partition_query
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 1404
  summary: 'Creates a set of partition tokens that can be used to execute a

    query operation in parallel. Each of the returned partition

    tokens can be used by

    [ExecuteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql]

    to specify a subset of the query result to read. The same

    session and read-only transaction must be used by the

    PartitionQueryRequest used to create the partition tokens and

    the ExecuteSqlRequests that use the partition tokens.


    Partition tokens become invalid when the session used to create

    them is deleted, is idle for too long, begins a new transaction,

    or becomes too old. When any of these happen, it is not possible

    to resume the query, and the whole operation must be restarted

    from the beginning.'
  syntax:
    content: 'partition_query(request: google.cloud.spanner_v1.types.spanner.PartitionQueryRequest
      = None, *, retry: google.api_core.retry.Retry = <object object>, timeout: float
      = None, metadata: typing.Sequence[typing.Tuple[str, str]] = ()) -> google.cloud.spanner_v1.types.spanner.PartitionResponse'
    parameters:
    - description: 'The request object. The request for

        [PartitionQuery][google.spanner.v1.Spanner.PartitionQuery]'
      id: request
      isRequired: true
      type:
      - spanner.PartitionQueryRequest
    - description: 'Designation of what errors, if any,

        should be retried.'
      id: retry
      isRequired: true
      type:
      - google.api_core.retry.Retry
    - description: The timeout for this request.
      id: timeout
      isRequired: true
      type:
      - float
    - description: 'Strings which should be

        sent along with the request as metadata.'
      id: metadata
      isRequired: true
      type:
      - Sequence[Tuple[str, str]]
    return:
      description: 'The response for

        [PartitionQuery][google.spanner.v1.Spanner.PartitionQuery]

        or

        [PartitionRead][google.spanner.v1.Spanner.PartitionRead]'
      type:
      - .spanner.PartitionResponse
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.partition_query
- *id027
- &id028
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.partition_read
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'partition_read(request: google.cloud.spanner_v1.types.spanner.PartitionReadRequest
    = None, *, retry: google.api_core.retry.Retry = <object object>, timeout: float
    = None, metadata: typing.Sequence[typing.Tuple[str, str]] = ()) -> google.cloud.spanner_v1.types.spanner.PartitionResponse'
  namewithoutparameters: partition_read
  source:
    id: partition_read
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 1471
  summary: 'Creates a set of partition tokens that can be used to execute a

    read operation in parallel. Each of the returned partition

    tokens can be used by

    [StreamingRead][google.spanner.v1.Spanner.StreamingRead] to

    specify a subset of the read result to read. The same session

    and read-only transaction must be used by the

    PartitionReadRequest used to create the partition tokens and the

    ReadRequests that use the partition tokens. There are no

    ordering guarantees on rows returned among the returned

    partition tokens, or even within each individual StreamingRead

    call issued with a partition_token.


    Partition tokens become invalid when the session used to create

    them is deleted, is idle for too long, begins a new transaction,

    or becomes too old. When any of these happen, it is not possible

    to resume the read, and the whole operation must be restarted

    from the beginning.'
  syntax:
    content: 'partition_read(request: google.cloud.spanner_v1.types.spanner.PartitionReadRequest
      = None, *, retry: google.api_core.retry.Retry = <object object>, timeout: float
      = None, metadata: typing.Sequence[typing.Tuple[str, str]] = ()) -> google.cloud.spanner_v1.types.spanner.PartitionResponse'
    parameters:
    - description: 'The request object. The request for

        [PartitionRead][google.spanner.v1.Spanner.PartitionRead]'
      id: request
      isRequired: true
      type:
      - spanner.PartitionReadRequest
    - description: 'Designation of what errors, if any,

        should be retried.'
      id: retry
      isRequired: true
      type:
      - google.api_core.retry.Retry
    - description: The timeout for this request.
      id: timeout
      isRequired: true
      type:
      - float
    - description: 'Strings which should be

        sent along with the request as metadata.'
      id: metadata
      isRequired: true
      type:
      - Sequence[Tuple[str, str]]
    return:
      description: 'The response for

        [PartitionQuery][google.spanner.v1.Spanner.PartitionQuery]

        or

        [PartitionRead][google.spanner.v1.Spanner.PartitionRead]'
      type:
      - .spanner.PartitionResponse
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.partition_read
- *id028
- &id029
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.read
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'read(request: google.cloud.spanner_v1.types.spanner.ReadRequest = None, *,
    retry: google.api_core.retry.Retry = <object object>, timeout: float = None, metadata:
    typing.Sequence[typing.Tuple[str, str]] = ()) -> google.cloud.spanner_v1.types.result_set.ResultSet'
  namewithoutparameters: read
  source:
    id: read
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 987
  summary: 'Reads rows from the database using key lookups and scans, as a

    simple key/value style alternative to

    [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql]. This method

    cannot be used to return a result set larger than 10 MiB; if the

    read matches more data than that, the read fails with a

    `FAILED_PRECONDITION` error.


    Reads inside read-write transactions might return `ABORTED`.

    If this occurs, the application should restart the transaction

    from the beginning. See

    [Transaction][google.spanner.v1.Transaction] for more details.


    Larger result sets can be yielded in streaming fashion by

    calling [StreamingRead][google.spanner.v1.Spanner.StreamingRead]

    instead.'
  syntax:
    content: 'read(request: google.cloud.spanner_v1.types.spanner.ReadRequest = None,
      *, retry: google.api_core.retry.Retry = <object object>, timeout: float = None,
      metadata: typing.Sequence[typing.Tuple[str, str]] = ()) -> google.cloud.spanner_v1.types.result_set.ResultSet'
    parameters:
    - description: 'The request object. The request for

        [Read][google.spanner.v1.Spanner.Read] and

        [StreamingRead][google.spanner.v1.Spanner.StreamingRead].'
      id: request
      isRequired: true
      type:
      - spanner.ReadRequest
    - description: 'Designation of what errors, if any,

        should be retried.'
      id: retry
      isRequired: true
      type:
      - google.api_core.retry.Retry
    - description: The timeout for this request.
      id: timeout
      isRequired: true
      type:
      - float
    - description: 'Strings which should be

        sent along with the request as metadata.'
      id: metadata
      isRequired: true
      type:
      - Sequence[Tuple[str, str]]
    return:
      description: 'Results from [Read][google.spanner.v1.Spanner.Read] or

        [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].'
      type:
      - .result_set.ResultSet
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.read
- *id029
- &id030
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.rollback
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'rollback(request: google.cloud.spanner_v1.types.spanner.RollbackRequest =
    None, *, session: str = None, transaction_id: bytes = None, retry: google.api_core.retry.Retry
    = <object object>, timeout: float = None, metadata: typing.Sequence[typing.Tuple[str,
    str]] = ()) -> None'
  namewithoutparameters: rollback
  source:
    id: rollback
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 1320
  summary: 'Rolls back a transaction, releasing any locks it holds. It is a

    good idea to call this for any transaction that includes one or

    more [Read][google.spanner.v1.Spanner.Read] or

    [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] requests and

    ultimately decides not to commit.


    `Rollback` returns `OK` if it successfully aborts the

    transaction, the transaction was already aborted, or the

    transaction is not found. `Rollback` never returns

    `ABORTED`.'
  syntax:
    content: 'rollback(request: google.cloud.spanner_v1.types.spanner.RollbackRequest
      = None, *, session: str = None, transaction_id: bytes = None, retry: google.api_core.retry.Retry
      = <object object>, timeout: float = None, metadata: typing.Sequence[typing.Tuple[str,
      str]] = ()) -> None'
    parameters:
    - description: 'The request object. The request for

        [Rollback][google.spanner.v1.Spanner.Rollback].'
      id: request
      isRequired: true
      type:
      - spanner.RollbackRequest
    - description: 'Required. The session in which the

        transaction to roll back is running.

        This corresponds to the `session` field

        on the `request` instance; if `request` is provided, this

        should not be set.'
      id: session
      isRequired: true
      type:
      - google.cloud.spanner_v1.services.spanner.str
    - description: 'Required. The transaction to roll

        back.

        This corresponds to the `transaction_id` field

        on the `request` instance; if `request` is provided, this

        should not be set.'
      id: transaction_id
      isRequired: true
      type:
      - google.cloud.spanner_v1.services.spanner.bytes
    - description: 'Designation of what errors, if any,

        should be retried.'
      id: retry
      isRequired: true
      type:
      - google.api_core.retry.Retry
    - description: The timeout for this request.
      id: timeout
      isRequired: true
      type:
      - float
    - description: 'Strings which should be

        sent along with the request as metadata.'
      id: metadata
      isRequired: true
      type:
      - Sequence[Tuple[str, str]]
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.rollback
- *id030
- &id031
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.session_path
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'session_path(project: str, instance: str, database: str, session: str) ->
    str'
  namewithoutparameters: session_path
  source:
    id: session_path
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 165
  summary: Return a fully-qualified session string.
  syntax:
    content: 'session_path(project: str, instance: str, database: str, session: str)
      -> str'
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.session_path
- *id031
- &id032
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.streaming_read
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: 'streaming_read(request: google.cloud.spanner_v1.types.spanner.ReadRequest
    = None, *, retry: google.api_core.retry.Retry = <object object>, timeout: float
    = None, metadata: typing.Sequence[typing.Tuple[str, str]] = ()) -> typing.Iterable[google.cloud.spanner_v1.types.result_set.PartialResultSet]'
  namewithoutparameters: streaming_read
  source:
    id: streaming_read
    path: google/cloud/spanner_v1/services/spanner/client.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/services/spanner/client.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 1054
  summary: 'Like [Read][google.spanner.v1.Spanner.Read], except returns the

    result set as a stream. Unlike

    [Read][google.spanner.v1.Spanner.Read], there is no limit on the

    size of the returned result set. However, no individual row in

    the result set can exceed 100 MiB, and no column value can

    exceed 10 MiB.'
  syntax:
    content: 'streaming_read(request: google.cloud.spanner_v1.types.spanner.ReadRequest
      = None, *, retry: google.api_core.retry.Retry = <object object>, timeout: float
      = None, metadata: typing.Sequence[typing.Tuple[str, str]] = ()) -> typing.Iterable[google.cloud.spanner_v1.types.result_set.PartialResultSet]'
    parameters:
    - description: 'The request object. The request for

        [Read][google.spanner.v1.Spanner.Read] and

        [StreamingRead][google.spanner.v1.Spanner.StreamingRead].'
      id: request
      isRequired: true
      type:
      - spanner.ReadRequest
    - description: 'Designation of what errors, if any,

        should be retried.'
      id: retry
      isRequired: true
      type:
      - google.api_core.retry.Retry
    - description: The timeout for this request.
      id: timeout
      isRequired: true
      type:
      - float
    - description: 'Strings which should be

        sent along with the request as metadata.'
      id: metadata
      isRequired: true
      type:
      - Sequence[Tuple[str, str]]
    return:
      description: 'Partial results from a streaming read

        or SQL query. Streaming reads and SQL

        queries better tolerate large result

        sets, large rows, and large values, but

        are a little trickier to consume.'
      type:
      - Iterable[.result_set.PartialResultSet]
  type: method
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.streaming_read
- *id032
- &id033
  class: google.cloud.spanner_v1.services.spanner.SpannerClient
  fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.transport
  langs:
  - python
  module: google.cloud.spanner_v1.services.spanner
  name: transport
  source:
    id: transport
    path: null
    remote:
      branch: HEAD
      path: null
      repo: https://github.com/googleapis/python-spanner.git
    startLine: null
  summary: Return the transport used by the client instance.
  syntax:
    return:
      description: The transport used by the client instance.
      type:
      - SpannerTransport
  type: attribute
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.transport
- *id033
references:
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.batch_create_sessions
  isExternal: false
  name: 'batch_create_sessions(request: google.cloud.spanner_v1.types.spanner.BatchCreateSessionsRequest
    = None, *, database: str = None, session_count: int = None, retry: google.api_core.retry.Retry
    = <object object>, timeout: float = None, metadata: typing.Sequence[typing.Tuple[str,
    str]] = ()) -> google.cloud.spanner_v1.types.spanner.BatchCreateSessionsResponse'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.batch_create_sessions
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.begin_transaction
  isExternal: false
  name: 'begin_transaction(request: google.cloud.spanner_v1.types.spanner.BeginTransactionRequest
    = None, *, session: str = None, options: google.cloud.spanner_v1.types.transaction.TransactionOptions
    = None, retry: google.api_core.retry.Retry = <object object>, timeout: float =
    None, metadata: typing.Sequence[typing.Tuple[str, str]] = ()) -> google.cloud.spanner_v1.types.transaction.Transaction'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.begin_transaction
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.commit
  isExternal: false
  name: 'commit(request: google.cloud.spanner_v1.types.spanner.CommitRequest = None,
    *, session: str = None, transaction_id: bytes = None, mutations: typing.Sequence[google.cloud.spanner_v1.types.mutation.Mutation]
    = None, single_use_transaction: google.cloud.spanner_v1.types.transaction.TransactionOptions
    = None, retry: google.api_core.retry.Retry = <object object>, timeout: float =
    None, metadata: typing.Sequence[typing.Tuple[str, str]] = ()) -> google.cloud.spanner_v1.types.spanner.CommitResponse'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.commit
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.common_billing_account_path
  isExternal: false
  name: 'common_billing_account_path(billing_account: str) -> str'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.common_billing_account_path
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.common_folder_path
  isExternal: false
  name: 'common_folder_path(folder: str) -> str'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.common_folder_path
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.common_location_path
  isExternal: false
  name: 'common_location_path(project: str, location: str) -> str'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.common_location_path
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.common_organization_path
  isExternal: false
  name: 'common_organization_path(organization: str) -> str'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.common_organization_path
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.common_project_path
  isExternal: false
  name: 'common_project_path(project: str) -> str'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.common_project_path
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.create_session
  isExternal: false
  name: 'create_session(request: google.cloud.spanner_v1.types.spanner.CreateSessionRequest
    = None, *, database: str = None, retry: google.api_core.retry.Retry = <object
    object>, timeout: float = None, metadata: typing.Sequence[typing.Tuple[str, str]]
    = ()) -> google.cloud.spanner_v1.types.spanner.Session'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.create_session
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.database_path
  isExternal: false
  name: 'database_path(project: str, instance: str, database: str) -> str'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.database_path
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.delete_session
  isExternal: false
  name: 'delete_session(request: google.cloud.spanner_v1.types.spanner.DeleteSessionRequest
    = None, *, name: str = None, retry: google.api_core.retry.Retry = <object object>,
    timeout: float = None, metadata: typing.Sequence[typing.Tuple[str, str]] = ())
    -> None'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.delete_session
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.execute_batch_dml
  isExternal: false
  name: 'execute_batch_dml(request: google.cloud.spanner_v1.types.spanner.ExecuteBatchDmlRequest
    = None, *, retry: google.api_core.retry.Retry = <object object>, timeout: float
    = None, metadata: typing.Sequence[typing.Tuple[str, str]] = ()) -> google.cloud.spanner_v1.types.spanner.ExecuteBatchDmlResponse'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.execute_batch_dml
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.execute_sql
  isExternal: false
  name: 'execute_sql(request: google.cloud.spanner_v1.types.spanner.ExecuteSqlRequest
    = None, *, retry: google.api_core.retry.Retry = <object object>, timeout: float
    = None, metadata: typing.Sequence[typing.Tuple[str, str]] = ()) -> google.cloud.spanner_v1.types.result_set.ResultSet'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.execute_sql
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.execute_streaming_sql
  isExternal: false
  name: 'execute_streaming_sql(request: google.cloud.spanner_v1.types.spanner.ExecuteSqlRequest
    = None, *, retry: google.api_core.retry.Retry = <object object>, timeout: float
    = None, metadata: typing.Sequence[typing.Tuple[str, str]] = ()) -> typing.Iterable[google.cloud.spanner_v1.types.result_set.PartialResultSet]'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.execute_streaming_sql
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.from_service_account_file
  isExternal: false
  name: 'from_service_account_file(filename: str, *args, **kwargs)'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.from_service_account_file
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.from_service_account_json
  isExternal: false
  name: 'from_service_account_json(filename: str, *args, **kwargs)'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.from_service_account_json
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.get_session
  isExternal: false
  name: 'get_session(request: google.cloud.spanner_v1.types.spanner.GetSessionRequest
    = None, *, name: str = None, retry: google.api_core.retry.Retry = <object object>,
    timeout: float = None, metadata: typing.Sequence[typing.Tuple[str, str]] = ())
    -> google.cloud.spanner_v1.types.spanner.Session'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.get_session
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.list_sessions
  isExternal: false
  name: 'list_sessions(request: google.cloud.spanner_v1.types.spanner.ListSessionsRequest
    = None, *, database: str = None, retry: google.api_core.retry.Retry = <object
    object>, timeout: float = None, metadata: typing.Sequence[typing.Tuple[str, str]]
    = ()) -> google.cloud.spanner_v1.services.spanner.pagers.ListSessionsPager'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.list_sessions
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_billing_account_path
  isExternal: false
  name: 'parse_common_billing_account_path(path: str) -> typing.Dict[str, str]'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_billing_account_path
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_folder_path
  isExternal: false
  name: 'parse_common_folder_path(path: str) -> typing.Dict[str, str]'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_folder_path
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_location_path
  isExternal: false
  name: 'parse_common_location_path(path: str) -> typing.Dict[str, str]'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_location_path
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_organization_path
  isExternal: false
  name: 'parse_common_organization_path(path: str) -> typing.Dict[str, str]'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_organization_path
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_project_path
  isExternal: false
  name: 'parse_common_project_path(path: str) -> typing.Dict[str, str]'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.parse_common_project_path
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.parse_database_path
  isExternal: false
  name: 'parse_database_path(path: str) -> typing.Dict[str, str]'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.parse_database_path
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.parse_session_path
  isExternal: false
  name: 'parse_session_path(path: str) -> typing.Dict[str, str]'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.parse_session_path
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.partition_query
  isExternal: false
  name: 'partition_query(request: google.cloud.spanner_v1.types.spanner.PartitionQueryRequest
    = None, *, retry: google.api_core.retry.Retry = <object object>, timeout: float
    = None, metadata: typing.Sequence[typing.Tuple[str, str]] = ()) -> google.cloud.spanner_v1.types.spanner.PartitionResponse'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.partition_query
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.partition_read
  isExternal: false
  name: 'partition_read(request: google.cloud.spanner_v1.types.spanner.PartitionReadRequest
    = None, *, retry: google.api_core.retry.Retry = <object object>, timeout: float
    = None, metadata: typing.Sequence[typing.Tuple[str, str]] = ()) -> google.cloud.spanner_v1.types.spanner.PartitionResponse'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.partition_read
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.read
  isExternal: false
  name: 'read(request: google.cloud.spanner_v1.types.spanner.ReadRequest = None, *,
    retry: google.api_core.retry.Retry = <object object>, timeout: float = None, metadata:
    typing.Sequence[typing.Tuple[str, str]] = ()) -> google.cloud.spanner_v1.types.result_set.ResultSet'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.read
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.rollback
  isExternal: false
  name: 'rollback(request: google.cloud.spanner_v1.types.spanner.RollbackRequest =
    None, *, session: str = None, transaction_id: bytes = None, retry: google.api_core.retry.Retry
    = <object object>, timeout: float = None, metadata: typing.Sequence[typing.Tuple[str,
    str]] = ()) -> None'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.rollback
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.session_path
  isExternal: false
  name: 'session_path(project: str, instance: str, database: str, session: str) ->
    str'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.session_path
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.streaming_read
  isExternal: false
  name: 'streaming_read(request: google.cloud.spanner_v1.types.spanner.ReadRequest
    = None, *, retry: google.api_core.retry.Retry = <object object>, timeout: float
    = None, metadata: typing.Sequence[typing.Tuple[str, str]] = ()) -> typing.Iterable[google.cloud.spanner_v1.types.result_set.PartialResultSet]'
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.streaming_read
- fullName: google.cloud.spanner_v1.services.spanner.SpannerClient.transport
  isExternal: false
  name: transport
  parent: google.cloud.spanner_v1.services.spanner.SpannerClient
  uid: google.cloud.spanner_v1.services.spanner.SpannerClient.transport
- fullName: Optional[google.auth.credentials.Credentials]
  name: Optional[Credentials]
  spec.python:
  - fullName: Optional
    name: Optional
    uid: Optional
  - fullName: '['
    name: '['
  - fullName: google.auth.credentials.Credentials
    name: Credentials
    uid: google.auth.credentials.Credentials
  - fullName: ']'
    name: ']'
  uid: Optional[google.auth.credentials.Credentials]
- fullName: Union[str, .SpannerTransport]
  name: Union[str, SpannerTransport]
  spec.python:
  - fullName: Union
    name: Union
    uid: Union
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: .SpannerTransport
    name: SpannerTransport
    uid: .SpannerTransport
  - fullName: ']'
    name: ']'
  uid: Union[str, .SpannerTransport]
- fullName: Sequence[Tuple[str, str]]
  name: Sequence[Tuple[str, str]]
  spec.python:
  - fullName: Sequence
    name: Sequence
    uid: Sequence
  - fullName: '['
    name: '['
  - fullName: Tuple
    name: Tuple
    uid: Tuple
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  - fullName: ']'
    name: ']'
  uid: Sequence[Tuple[str, str]]
- fullName: Sequence[.mutation.Mutation]
  name: Sequence[Mutation]
  spec.python:
  - fullName: Sequence
    name: Sequence
    uid: Sequence
  - fullName: '['
    name: '['
  - fullName: .mutation.Mutation
    name: Mutation
    uid: .mutation.Mutation
  - fullName: ']'
    name: ']'
  uid: Sequence[.mutation.Mutation]
- fullName: Iterable[.result_set.PartialResultSet]
  name: Iterable[PartialResultSet]
  spec.python:
  - fullName: Iterable
    name: Iterable
    uid: Iterable
  - fullName: '['
    name: '['
  - fullName: .result_set.PartialResultSet
    name: PartialResultSet
    uid: .result_set.PartialResultSet
  - fullName: ']'
    name: ']'
  uid: Iterable[.result_set.PartialResultSet]
