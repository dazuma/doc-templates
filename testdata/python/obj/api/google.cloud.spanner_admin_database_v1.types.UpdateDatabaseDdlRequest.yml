### YamlMime:UniversalReference
api_name: []
items:
- children: []
  class: google.cloud.spanner_admin_database_v1.types.UpdateDatabaseDdlRequest
  fullName: google.cloud.spanner_admin_database_v1.types.UpdateDatabaseDdlRequest
  inheritance:
  - inheritance:
    - type: builtins.object
    type: proto.message.Message
  langs:
  - python
  module: google.cloud.spanner_admin_database_v1.types
  name: UpdateDatabaseDdlRequest
  source:
    id: UpdateDatabaseDdlRequest
    path: google/cloud/spanner_admin_database_v1/types/spanner_database_admin.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_admin_database_v1/types/spanner_database_admin.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 220
  summary: 'Enqueues the given DDL statements to be applied, in order but not

    necessarily all at once, to the database schema at some point (or

    points) in the future. The server checks that the statements are

    executable (syntactically valid, name tables that exist, etc.)

    before enqueueing them, but they may still fail upon later execution

    (e.g., if a statement from another batch of statements is applied

    first and it conflicts in some way, or if there is some data-related

    problem like a `NULL` value in a column to which `NOT NULL`

    would be added). If a statement fails, all subsequent statements in

    the batch are automatically cancelled.


    Each batch of statements is assigned a name which can be used with

    the [Operations][google.longrunning.Operations] API to monitor

    progress. See the

    [operation_id][google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id]

    field for more details.'
  syntax:
    content: UpdateDatabaseDdlRequest(mapping=None, *, ignore_unknown_fields=False,
      **kwargs)
  type: class
  uid: google.cloud.spanner_admin_database_v1.types.UpdateDatabaseDdlRequest
references: []
