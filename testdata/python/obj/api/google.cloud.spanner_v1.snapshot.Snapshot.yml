### YamlMime:UniversalReference
api_name: []
items:
- children:
  - google.cloud.spanner_v1.snapshot.Snapshot.begin
  - google.cloud.spanner_v1.snapshot.Snapshot.execute_sql
  - google.cloud.spanner_v1.snapshot.Snapshot.partition_query
  - google.cloud.spanner_v1.snapshot.Snapshot.partition_read
  - google.cloud.spanner_v1.snapshot.Snapshot.read
  class: google.cloud.spanner_v1.snapshot.Snapshot
  fullName: google.cloud.spanner_v1.snapshot.Snapshot
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: google.cloud.spanner_v1._helpers._SessionWrapper
    type: google.cloud.spanner_v1.snapshot._SnapshotBase
  langs:
  - python
  module: google.cloud.spanner_v1.snapshot
  name: Snapshot
  source:
    id: Snapshot
    path: google/cloud/spanner_v1/snapshot.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/snapshot.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 446
  summary: 'Allow a set of reads / SQL statements with shared staleness.


    See

    [https://cloud.google.com/spanner/reference/rpc/google.spanner.v1#google.spanner.v1.TransactionOptions.ReadOnly](https://cloud.google.com/spanner/reference/rpc/google.spanner.v1#google.spanner.v1.TransactionOptions.ReadOnly)


    If no options are passed, reads will use the `strong` model, reading

    at a timestamp where all previously committed transactions are visible.'
  syntax:
    content: Snapshot(session, read_timestamp=None, min_read_timestamp=None, max_staleness=None,
      exact_staleness=None, multi_use=False)
    parameters:
    - description: The session used to perform the commit.
      id: session
      type:
      - google.cloud.spanner_v1.session.Session
    - description: Execute all reads at the given timestamp.
      id: read_timestamp
      type:
      - datetime.datetime
    - description: 'Execute all reads at a

        timestamp >= `min_read_timestamp`.'
      id: min_read_timestamp
      type:
      - datetime.datetime
    - description: 'Read data at a

        timestamp >= NOW - `max_staleness` seconds.'
      id: max_staleness
      type:
      - datetime.timedelta
    - description: 'Execute all reads at a timestamp that is

        `exact_staleness` old.'
      id: exact_staleness
      type:
      - datetime.timedelta
    - description: 'If true, multiple <xref:google.cloud.spanner_v1.snapshot.Snapshot.read>
        / <xref:google.cloud.spanner_v1.snapshot.Snapshot.execute_sql>

        calls can be performed with the snapshot in the

        context of a read-only transaction, used to ensure

        isolation / consistency. Incompatible with

        `max_staleness` and `min_read_timestamp`.'
      id: multi_use
      type:
      - google.cloud.spanner_v1.snapshot.bool
  type: class
  uid: google.cloud.spanner_v1.snapshot.Snapshot
- class: google.cloud.spanner_v1.snapshot.Snapshot
  exceptions:
  - description: if the transaction is already begun, committed, or rolled back.
    type: ValueError
  fullName: google.cloud.spanner_v1.snapshot.Snapshot.begin
  langs:
  - python
  module: google.cloud.spanner_v1.snapshot
  name: begin()
  namewithoutparameters: begin
  source:
    id: begin
    path: google/cloud/spanner_v1/snapshot.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/snapshot.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 541
  summary: Begin a read-only transaction on the database.
  syntax:
    content: begin()
    parameters: []
    return:
      description: the ID for the newly-begun transaction.
      type:
      - bytes
  type: method
  uid: google.cloud.spanner_v1.snapshot.Snapshot.begin
- class: google.cloud.spanner_v1.snapshot.Snapshot
  exceptions:
  - description: 'for reuse of single-use snapshots, or if a transaction ID is

      already pending for multiple-use snapshots.'
    type: ValueError
  fullName: google.cloud.spanner_v1.snapshot.Snapshot.execute_sql
  langs:
  - python
  module: google.cloud.spanner_v1.snapshot
  name: execute_sql(sql, params=None, param_types=None, query_mode=None, query_options=None,
    partition=None, retry=<object object>, timeout=<object object>)
  namewithoutparameters: execute_sql
  source:
    id: execute_sql
    path: google/cloud/spanner_v1/snapshot.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/snapshot.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 181
  summary: Perform an `ExecuteStreamingSql` API request.
  syntax:
    content: execute_sql(sql, params=None, param_types=None, query_mode=None, query_options=None,
      partition=None, retry=<object object>, timeout=<object object>)
    parameters:
    - description: SQL query statement
      id: sql
      isRequired: true
      type:
      - str
    - defaultValue: None
      description: 'values for parameter replacement.  Keys must match

        the names used in `sql`.'
      id: params
      type:
      - dict, {str -> column value}
    - defaultValue: None
      description: '(Optional) maps explicit types for one or more param values;

        required if parameters are passed.'
      id: param_types
      type:
      - dict[str -> Union[dict, .types.Type]]
    - defaultValue: None
      description: 'Mode governing return of results / query plan.

        See:

        [QueryMode](https://cloud.google.com/spanner/reference/rpc/google.spanner.v1#google.spanner.v1.ExecuteSqlRequest.QueryMode).'
      id: query_mode
      type:
      - google.cloud.spanner_v1.ExecuteSqlRequest.QueryMode
    - defaultValue: None
      description: '(Optional) Query optimizer configuration to use for the given
        query.

        If a dict is provided, it must be of the same form as the protobuf

        message <xref:google.cloud.spanner_v1.QueryOptions>'
      id: query_options
    - defaultValue: None
      description: '(Optional) one of the partition tokens returned

        from <xref:google.cloud.spanner_v1.snapshot.Snapshot.partition_query>.'
      id: partition
      type:
      - bytes
    - id: retry
      isRequired: true
    - id: timeout
      isRequired: true
    return:
      description: a result set instance which can be used to consume rows.
      type:
      - google.cloud.spanner_v1.streamed.StreamedResultSet
  type: method
  uid: google.cloud.spanner_v1.snapshot.Snapshot.execute_sql
- class: google.cloud.spanner_v1.snapshot.Snapshot
  exceptions:
  - description: 'for single-use snapshots, or if a transaction ID is

      already associtated with the snapshot.'
    type: ValueError
  fullName: google.cloud.spanner_v1.snapshot.Snapshot.partition_query
  langs:
  - python
  module: google.cloud.spanner_v1.snapshot
  name: partition_query(sql, params=None, param_types=None, partition_size_bytes=None,
    max_partitions=None)
  namewithoutparameters: partition_query
  source:
    id: partition_query
    path: google/cloud/spanner_v1/snapshot.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/snapshot.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 364
  summary: Perform a `ParitionQuery` API request.
  syntax:
    content: partition_query(sql, params=None, param_types=None, partition_size_bytes=None,
      max_partitions=None)
    parameters:
    - description: SQL query statement
      id: sql
      isRequired: true
      type:
      - str
    - defaultValue: None
      description: 'values for parameter replacement.  Keys must match

        the names used in `sql`.'
      id: params
      type:
      - dict, {str -> column value}
    - defaultValue: None
      description: '(Optional) maps explicit types for one or more param values;

        required if parameters are passed.'
      id: param_types
      type:
      - dict[str -> Union[dict, .types.Type]]
    - defaultValue: None
      description: '(Optional) desired size for each partition generated.  The service

        uses this as a hint, the actual partition size may differ.'
      id: partition_size_bytes
      type:
      - int
    - defaultValue: None
      description: '(Optional) desired maximum number of partitions generated. The

        service uses this as a hint, the actual number of partitions may

        differ.'
      id: max_partitions
      type:
      - int
    return:
      description: a sequence of partition tokens
      type:
      - iterable of bytes
  type: method
  uid: google.cloud.spanner_v1.snapshot.Snapshot.partition_query
- class: google.cloud.spanner_v1.snapshot.Snapshot
  exceptions:
  - description: 'for single-use snapshots, or if a transaction ID is

      already associtated with the snapshot.'
    type: ValueError
  fullName: google.cloud.spanner_v1.snapshot.Snapshot.partition_read
  langs:
  - python
  module: google.cloud.spanner_v1.snapshot
  name: partition_read(table, columns, keyset, index='', partition_size_bytes=None,
    max_partitions=None)
  namewithoutparameters: partition_read
  source:
    id: partition_read
    path: google/cloud/spanner_v1/snapshot.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/snapshot.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 291
  summary: Perform a `ParitionRead` API request for rows in a table.
  syntax:
    content: partition_read(table, columns, keyset, index='', partition_size_bytes=None,
      max_partitions=None)
    parameters:
    - description: name of the table from which to fetch data
      id: table
      isRequired: true
      type:
      - str
    - description: names of columns to be retrieved
      id: columns
      isRequired: true
      type:
      - list of str
    - description: keys / ranges identifying rows to be retrieved
      id: keyset
      isRequired: true
      type:
      - google.cloud.spanner_v1.keyset.KeySet
    - defaultValue: ''
      description: '(Optional) name of index to use, rather than the

        table''s primary key'
      id: index
      type:
      - str
    - defaultValue: None
      description: '(Optional) desired size for each partition generated.  The service

        uses this as a hint, the actual partition size may differ.'
      id: partition_size_bytes
      type:
      - int
    - defaultValue: None
      description: '(Optional) desired maximum number of partitions generated. The

        service uses this as a hint, the actual number of partitions may

        differ.'
      id: max_partitions
      type:
      - int
    return:
      description: a sequence of partition tokens
      type:
      - iterable of bytes
  type: method
  uid: google.cloud.spanner_v1.snapshot.Snapshot.partition_read
- class: google.cloud.spanner_v1.snapshot.Snapshot
  exceptions:
  - description: 'for reuse of single-use snapshots, or if a transaction ID is

      already pending for multiple-use snapshots.'
    type: ValueError
  fullName: google.cloud.spanner_v1.snapshot.Snapshot.read
  langs:
  - python
  module: google.cloud.spanner_v1.snapshot
  name: read(table, columns, keyset, index='', limit=0, partition=None)
  namewithoutparameters: read
  source:
    id: read
    path: google/cloud/spanner_v1/snapshot.py
    remote:
      branch: HEAD
      path: google/cloud/spanner_v1/snapshot.py
      repo: https://github.com/googleapis/python-spanner.git
    startLine: 112
  summary: Perform a `StreamingRead` API request for rows in a table.
  syntax:
    content: read(table, columns, keyset, index='', limit=0, partition=None)
    parameters:
    - description: name of the table from which to fetch data
      id: table
      isRequired: true
      type:
      - str
    - description: names of columns to be retrieved
      id: columns
      isRequired: true
      type:
      - list of str
    - description: keys / ranges identifying rows to be retrieved
      id: keyset
      isRequired: true
      type:
      - google.cloud.spanner_v1.keyset.KeySet
    - defaultValue: ''
      description: '(Optional) name of index to use, rather than the

        table''s primary key'
      id: index
      type:
      - str
    - defaultValue: '0'
      description: '(Optional) maximum number of rows to return.

        Incompatible with `partition`.'
      id: limit
      type:
      - int
    - defaultValue: None
      description: '(Optional) one of the partition tokens returned

        from <xref:google.cloud.spanner_v1.snapshot.Snapshot.partition_read>.  Incompatible
        with

        `limit`.'
      id: partition
      type:
      - bytes
    return:
      description: a result set instance which can be used to consume rows.
      type:
      - google.cloud.spanner_v1.streamed.StreamedResultSet
  type: method
  uid: google.cloud.spanner_v1.snapshot.Snapshot.read
references:
- fullName: google.cloud.spanner_v1.snapshot.Snapshot.begin
  isExternal: false
  name: begin()
  parent: google.cloud.spanner_v1.snapshot.Snapshot
  uid: google.cloud.spanner_v1.snapshot.Snapshot.begin
- fullName: google.cloud.spanner_v1.snapshot.Snapshot.execute_sql
  isExternal: false
  name: execute_sql(sql, params=None, param_types=None, query_mode=None, query_options=None,
    partition=None, retry=<object object>, timeout=<object object>)
  parent: google.cloud.spanner_v1.snapshot.Snapshot
  uid: google.cloud.spanner_v1.snapshot.Snapshot.execute_sql
- fullName: google.cloud.spanner_v1.snapshot.Snapshot.partition_query
  isExternal: false
  name: partition_query(sql, params=None, param_types=None, partition_size_bytes=None,
    max_partitions=None)
  parent: google.cloud.spanner_v1.snapshot.Snapshot
  uid: google.cloud.spanner_v1.snapshot.Snapshot.partition_query
- fullName: google.cloud.spanner_v1.snapshot.Snapshot.partition_read
  isExternal: false
  name: partition_read(table, columns, keyset, index='', partition_size_bytes=None,
    max_partitions=None)
  parent: google.cloud.spanner_v1.snapshot.Snapshot
  uid: google.cloud.spanner_v1.snapshot.Snapshot.partition_read
- fullName: google.cloud.spanner_v1.snapshot.Snapshot.read
  isExternal: false
  name: read(table, columns, keyset, index='', limit=0, partition=None)
  parent: google.cloud.spanner_v1.snapshot.Snapshot
  uid: google.cloud.spanner_v1.snapshot.Snapshot.read
- fullName: dict, {str -> column value}
  name: dict, {str -> column value}
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: ', '
    name: ', '
  - fullName: '{str -> column value}'
    name: '{str -> column value}'
    uid: '{str -> column value}'
  uid: dict, {str -> column value}
- fullName: dict[str -> Union[dict, .types.Type]]
  name: dict[str -> Union[dict, Type]]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str -> Union
    name: str -> Union
    uid: str -> Union
  - fullName: '['
    name: '['
  - fullName: dict
    name: dict
    uid: dict
  - fullName: ', '
    name: ', '
  - fullName: .types.Type
    name: Type
    uid: .types.Type
  - fullName: ']'
    name: ']'
  - fullName: ']'
    name: ']'
  uid: dict[str -> Union[dict, .types.Type]]
